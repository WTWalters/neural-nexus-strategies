# Generated by Django 5.1.3 on 2024-11-23 17:27

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('content', '0002_blogpost_view_count'),
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='blogpost',
            name='estimated_read_time',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='seo_keywords',
            field=models.CharField(blank=True, max_length=500),
        ),
        migrations.AddField(
            model_name='newslettersubscriber',
            name='source',
            field=models.CharField(blank=True, max_length=50),
        ),
        migrations.AddField(
            model_name='resource',
            name='lead_magnet_conversion_rate',
            field=models.DecimalField(decimal_places=2, default=0, max_digits=5),
        ),
        migrations.AddField(
            model_name='resource',
            name='seo_keywords',
            field=models.CharField(blank=True, max_length=500),
        ),
        migrations.CreateModel(
            name='BlogAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_time_on_page', models.FloatField(default=0)),
                ('bounce_rate', models.FloatField(default=0)),
                ('return_visits', models.IntegerField(default=0)),
                ('social_shares', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('blog_post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='content.blogpost')),
            ],
            options={
                'verbose_name_plural': 'blog analytics',
            },
        ),
        migrations.CreateModel(
            name='ResourceDownload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('company', models.CharField(blank=True, max_length=200)),
                ('downloaded_at', models.DateTimeField(auto_now_add=True)),
                ('source_url', models.URLField(blank=True)),
                ('converted_to_subscriber', models.BooleanField(default=False)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='downloads', to='content.resource')),
                ('subscriber', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_downloads', to='content.newslettersubscriber')),
            ],
            options={
                'unique_together': {('email', 'resource')},
            },
        ),
        migrations.AddField(
            model_name='newslettersubscriber',
            name='downloaded_resources',
            field=models.ManyToManyField(related_name='subscribers', through='content.ResourceDownload', to='content.resource'),
        ),
        migrations.AddField(
            model_name='blogpost',
            name='tags',
            field=models.ManyToManyField(blank=True, to='content.tag'),
        ),
        migrations.AddField(
            model_name='newslettersubscriber',
            name='interests',
            field=models.ManyToManyField(blank=True, to='content.tag'),
        ),
        migrations.AddField(
            model_name='resource',
            name='tags',
            field=models.ManyToManyField(blank=True, to='content.tag'),
        ),
    ]
