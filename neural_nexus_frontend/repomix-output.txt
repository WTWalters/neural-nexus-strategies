This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-15T21:58:48.557Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  sitemap.ts
public/
  file.svg
  globe.svg
  icon.svg
  mockServiceWorker.js
  next.svg
  robots.ts
  vercel.svg
  window.svg
src/
  app/
    (marketing)/
      blog/
        [slug]/
          loading.tsx
          not-found.tsx
          page.tsx
        error.tsx
        page.tsx
      careers/
        page.tsx
      case-studies/
        [slug]/
          loading.tsx
          not-found.tsx
          page.tsx
        loading.tsx
        page.tsx
    about/
      page.tsx
    api/
      backend-test/
        route.tsx
      newsletter/
        subscribe/
          route.tsx
      test/
        route.ts
    contact/
      page.tsx
    services/
      [slug]/
        not-found.tsx
        page.tsx
      ai-readiness/
        page.tsx
      data-strategy/
        page.tsx
      fractional-cdo/
        page.tsx
      page.tsx
    test/
      page.tsx
    test-tracking/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    _lib/
      types.ts
    about/
      AboutContent.tsx
      CloudinaryTest.tsx
      ImageTest.tsx
    analytics/
      GoogleAnalytics.tsx
    calculators/
      AIROICalculator.tsx
    composite/
      content/
        content-card/
          content-card.test.tsx
          index.tsx
          types.ts
        section-header/
          index.tsx
          section-header.test.tsx
          types.ts
      form/
        form-field/
          examples.tsx
          form-field.integration.test.tsx
          form-field.test.tsx
          index.tsx
          types.ts
        form-section/
          index.tsx
          types.ts
        form-submit/
          index.tsx
          types.ts
      navigation/
        nav-link/
          index.tsx
          nav-link.test.tsx
          types.ts
        nav-menu/
          index.tsx
          nav-menu.test.tsx
          types.ts
    contact/
      ContactForm.tsx
      ContactInfo.tsx
      FAQ.tsx
    diagnostic/
      api-test.tsx
    examples/
      signup-form.tsx
    features/
      booking/
        BookDiscoveryButton.tsx
        BookDiscoveryCall.tsx
      calculators/
        ROICalculator/
          index.tsx
          roi-calculator.styles.ts
          roi-calculator.test.tsx
          types.ts
    landing-page/
      sections/
        CtaDownload.tsx
        Hero.tsx
        ValueProps.tsx
      LandingPage.tsx
    layout/
      Footer.tsx
      Header.tsx
      Layout.tsx
      navigation-menu.tsx
    marketing/
      blog/
        blog-analytics.tsx
        blog-breadcrumb.tsx
        blog-card.tsx
        blog-error-boundary.tsx
        blog-image.tsx
        blog-list.tsx
        blog-loading.tsx
        blog-search.tsx
        blog-sidebar.tsx
      careers/
        CareersContent.tsx
      case-studies/
        case-study-analytics.tsx
        case-study-card.tsx
        case-study-error-boundary.tsx
        case-study-list.tsx
        case-study-loading.tsx
        case-study-pagination.tsx
        case-study-search.tsx
      home/
        0ld_GeometricPatterns.tsx
        AnimatedMetrics.tsx
        enhanced-features-section.tsx
        featured-insight.tsx
        GeometricPatterns.tsx
      newsletter/
        newsletter-content-end.tsx
        NewsletterBanner.tsx
      services/
        service-breadcrumb.tsx
    providers/
      TrackingProvider.tsx
    services/
      ai-readiness/
        AIReadinessContent.tsx
      data-strategy/
        DataStrategyContent.tsx
      fractional-cdo/
        FractionalCDOContent.tsx
      ServicesContent.tsx
    test/
      TrackingTest.tsx
    ui/
      alert/
        alert.test.tsx
        index.tsx
        types.ts
      button/
        index.tsx
        types.ts
      card/
        card.test.tsx
        index.tsx
        types.ts
      form/
        __tests__/
          test-utils.tsx
        form.test.tsx
        index.tsx
        types.ts
      input/
        index.tsx
        input.test.tsx
        types.ts
      label/
        index.tsx
        label.test.tsx
        types.ts
      navigation-menu/
        index.tsx
      select/
        index.tsx
        select.test.tsx
        types.ts
      textarea/
        index.tsx
        types.ts
      alert.tsx
      index.ts
      navigation-menu.tsx
    theme-provider.tsx
  config/
    calendly.ts
    env.ts
  docs/
    token-mapping-guide.ts
  hooks/
    use-form-validation.ts
  lib/
    analytics/
      index.tsx
      types.ts
    api/
      blog.ts
      case-studies.ts
      services.ts
    tracking/
      deviceFingerprint.ts
      index.ts
      sessionManager.ts
      trackingService.ts
      types.ts
    utils/
      image.tsx
    analytics.tsx
    api.ts
    config.ts
    tracking.ts
    utils.ts
  mocks/
    browser.ts
    handlers.ts
    server.ts
  pages/
    [slug].tsx
  styles/
    __tests__/
      GlobalStyles.test.tsx
      themes.test.tsx
      tokens.test.tsx
    global/
      GlobalStyles.ts
    theme/
      animations.css
      ThemeProvider.tsx
      themes.ts
    tokens/
      __tests__/
        animation.test.ts
      animation.ts
      colors.ts
      index.ts
      spacing.ts
      typography.ts
  test/
    components/
      SimpleTest.tsx
    setup/
      browser-mocks.ts
      global-polyfills.ts
      jest.setup.ts
    unit/
      components/
        Button.test.tsx
        Form.test.tsx
    utils/
      form.tsx
      test-utils.tsx
    setup.ts
    test-utils.tsx
  types/
    blog.ts
    calendly.d.ts
    newsletter.ts
    window.d.ts
  utils/
    api.ts
    form.tsx
  setupTests.ts
  test.txt
types/
  blog.ts
.env.development
.env.example
.env.local
.env.production
.eslintrc.json
components.json
jest.config.js
neural-nexus-helper.js
next-env.d.ts
next.config.js
nns_frontend_structure.txt
package.json
package.json.backup
postcss.config.mjs
railway.toml
README.md
tailwind.config.ts
tsconfig.json
tsconfig.test.json
tsconfig.tsbuildinfo

================================================================
Files
================================================================

================
File: app/sitemap.ts
================
// Path: neural_nexus_frontend/app/sitemap.ts

import { MetadataRoute } from "next";
import { BlogPost } from "@/types/blog";

interface Service {
  id: number;
  title: string;
  slug: string;
  updated_at: string;
  created_at: string;
}

interface CaseStudy {
  id: number;
  title: string;
  slug: string;
  updated_at: string;
  created_at: string;
  published: boolean;
}

async function fetchWithTimeout(url: string, options = {}) {
  const timeout = 5000; // 5 seconds timeout
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeout);

  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal,
      next: { revalidate: 3600 }, // Cache for 1 hour
    });
    clearTimeout(id);
    return response;
  } catch (error) {
    clearTimeout(id);
    throw error;
  }
}

async function getBlogPosts(): Promise<BlogPost[]> {
  try {
    const res = await fetchWithTimeout(
      "https://nns-backend-production.up.railway.app/api/blog-posts/",
    );
    if (!res.ok) throw new Error("Failed to fetch blog posts");
    return res.json();
  } catch (error) {
    console.error("Error fetching blog posts for sitemap:", error);
    return [];
  }
}

async function getServices(): Promise<Service[]> {
  try {
    const res = await fetchWithTimeout(
      "https://nns-backend-production.up.railway.app/api/services/",
    );
    if (!res.ok) throw new Error("Failed to fetch services");
    return res.json();
  } catch (error) {
    console.error("Error fetching services for sitemap:", error);
    return [];
  }
}

async function getCaseStudies(): Promise<CaseStudy[]> {
  try {
    const res = await fetchWithTimeout(
      "https://nns-backend-production.up.railway.app/api/case-studies/",
    );
    if (!res.ok) throw new Error("Failed to fetch case studies");
    return res.json();
  } catch (error) {
    console.error("Error fetching case studies for sitemap:", error);
    return [];
  }
}

export default async function sitemap(): Promise<MetadataRoute.Sitemap> {
  const baseUrl = "https://neuralnexusstrategies.ai";

  // Fetch all dynamic content
  const [posts, services, caseStudies] = await Promise.all([
    getBlogPosts(),
    getServices(),
    getCaseStudies(),
  ]);

  // Base routes
  const routes = [
    {
      url: baseUrl,
      lastModified: new Date(),
      changeFrequency: "monthly" as const,
      priority: 1,
    },
    {
      url: `${baseUrl}/about`,
      lastModified: new Date(),
      changeFrequency: "monthly" as const,
      priority: 0.8,
    },
    {
      url: `${baseUrl}/services`,
      lastModified: new Date(),
      changeFrequency: "monthly" as const,
      priority: 0.8,
    },
    {
      url: `${baseUrl}/case-studies`,
      lastModified: new Date(),
      changeFrequency: "weekly" as const,
      priority: 0.8,
    },
    {
      url: `${baseUrl}/contact`,
      lastModified: new Date(),
      changeFrequency: "monthly" as const,
      priority: 0.7,
    },
    {
      url: `${baseUrl}/blog`,
      lastModified: new Date(),
      changeFrequency: "weekly" as const,
      priority: 0.9,
    },
  ];

  // Blog post routes
  const blogPosts = posts.map((post: BlogPost) => ({
    url: `${baseUrl}/blog/${post.slug}`,
    lastModified: new Date(post.updated_at || post.created_at),
    changeFrequency: "weekly" as const,
    priority: 0.7,
  }));

  // Service routes
  const serviceRoutes = services.map((service: Service) => ({
    url: `${baseUrl}/services/${service.slug}`,
    lastModified: new Date(service.updated_at || service.created_at),
    changeFrequency: "monthly" as const,
    priority: 0.6,
  }));

  // Case Study routes
  const caseStudyRoutes = caseStudies
    .filter((study) => study.published) // Only include published case studies
    .map((study: CaseStudy) => ({
      url: `${baseUrl}/case-studies/${study.slug}`,
      lastModified: new Date(study.updated_at || study.created_at),
      changeFrequency: "monthly" as const,
      priority: 0.7,
    }));

  // Combine all routes
  return [...routes, ...blogPosts, ...serviceRoutes, ...caseStudyRoutes];
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/icon.svg
================
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
  <defs>
    <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#0066CC;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#00CCFF;stop-opacity:1" />
    </linearGradient>
  </defs>
  <rect width="32" height="32" rx="4" fill="url(#grad1)"/>
  <circle cx="8" cy="8" r="2" fill="white" opacity="2.0"/>
  <circle cx="8" cy="24" r="2" fill="white" opacity="2.0"/>
  <circle cx="24" cy="8" r="2" fill="white" opacity="2.0"/>
  <circle cx="24" cy="24" r="2" fill="white" opacity="2.0"/>
  <line x1="8" y1="8" x2="8" y2="24" stroke="white" stroke-width="1.5" opacity="0.7"/>
  <line x1="8" y1="8" x2="24" y2="24" stroke="white" stroke-width="1.5" opacity="0.7"/>
  <line x1="24" y1="8" x2="24" y2="24" stroke="white" stroke-width="1.5" opacity="0.7"/>
</svg>

================
File: public/mockServiceWorker.js
================
/* eslint-disable */
/* tslint:disable */

/**
 * Mock Service Worker.
 * @see https://github.com/mswjs/msw
 * - Please do NOT modify this file.
 * - Please do NOT serve this file on production.
 */

const PACKAGE_VERSION = '2.6.8'
const INTEGRITY_CHECKSUM = '00729d72e3b82faf54ca8b9621dbb96f'
const IS_MOCKED_RESPONSE = Symbol('isMockedResponse')
const activeClientIds = new Set()

self.addEventListener('install', function () {
  self.skipWaiting()
})

self.addEventListener('activate', function (event) {
  event.waitUntil(self.clients.claim())
})

self.addEventListener('message', async function (event) {
  const clientId = event.source.id

  if (!clientId || !self.clients) {
    return
  }

  const client = await self.clients.get(clientId)

  if (!client) {
    return
  }

  const allClients = await self.clients.matchAll({
    type: 'window',
  })

  switch (event.data) {
    case 'KEEPALIVE_REQUEST': {
      sendToClient(client, {
        type: 'KEEPALIVE_RESPONSE',
      })
      break
    }

    case 'INTEGRITY_CHECK_REQUEST': {
      sendToClient(client, {
        type: 'INTEGRITY_CHECK_RESPONSE',
        payload: {
          packageVersion: PACKAGE_VERSION,
          checksum: INTEGRITY_CHECKSUM,
        },
      })
      break
    }

    case 'MOCK_ACTIVATE': {
      activeClientIds.add(clientId)

      sendToClient(client, {
        type: 'MOCKING_ENABLED',
        payload: {
          client: {
            id: client.id,
            frameType: client.frameType,
          },
        },
      })
      break
    }

    case 'MOCK_DEACTIVATE': {
      activeClientIds.delete(clientId)
      break
    }

    case 'CLIENT_CLOSED': {
      activeClientIds.delete(clientId)

      const remainingClients = allClients.filter((client) => {
        return client.id !== clientId
      })

      // Unregister itself when there are no more clients
      if (remainingClients.length === 0) {
        self.registration.unregister()
      }

      break
    }
  }
})

self.addEventListener('fetch', function (event) {
  const { request } = event

  // Bypass navigation requests.
  if (request.mode === 'navigate') {
    return
  }

  // Opening the DevTools triggers the "only-if-cached" request
  // that cannot be handled by the worker. Bypass such requests.
  if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {
    return
  }

  // Bypass all requests when there are no active clients.
  // Prevents the self-unregistered worked from handling requests
  // after it's been deleted (still remains active until the next reload).
  if (activeClientIds.size === 0) {
    return
  }

  // Generate unique request ID.
  const requestId = crypto.randomUUID()
  event.respondWith(handleRequest(event, requestId))
})

async function handleRequest(event, requestId) {
  const client = await resolveMainClient(event)
  const response = await getResponse(event, client, requestId)

  // Send back the response clone for the "response:*" life-cycle events.
  // Ensure MSW is active and ready to handle the message, otherwise
  // this message will pend indefinitely.
  if (client && activeClientIds.has(client.id)) {
    ;(async function () {
      const responseClone = response.clone()

      sendToClient(
        client,
        {
          type: 'RESPONSE',
          payload: {
            requestId,
            isMockedResponse: IS_MOCKED_RESPONSE in response,
            type: responseClone.type,
            status: responseClone.status,
            statusText: responseClone.statusText,
            body: responseClone.body,
            headers: Object.fromEntries(responseClone.headers.entries()),
          },
        },
        [responseClone.body],
      )
    })()
  }

  return response
}

// Resolve the main client for the given event.
// Client that issues a request doesn't necessarily equal the client
// that registered the worker. It's with the latter the worker should
// communicate with during the response resolving phase.
async function resolveMainClient(event) {
  const client = await self.clients.get(event.clientId)

  if (activeClientIds.has(event.clientId)) {
    return client
  }

  if (client?.frameType === 'top-level') {
    return client
  }

  const allClients = await self.clients.matchAll({
    type: 'window',
  })

  return allClients
    .filter((client) => {
      // Get only those clients that are currently visible.
      return client.visibilityState === 'visible'
    })
    .find((client) => {
      // Find the client ID that's recorded in the
      // set of clients that have registered the worker.
      return activeClientIds.has(client.id)
    })
}

async function getResponse(event, client, requestId) {
  const { request } = event

  // Clone the request because it might've been already used
  // (i.e. its body has been read and sent to the client).
  const requestClone = request.clone()

  function passthrough() {
    // Cast the request headers to a new Headers instance
    // so the headers can be manipulated with.
    const headers = new Headers(requestClone.headers)

    // Remove the "accept" header value that marked this request as passthrough.
    // This prevents request alteration and also keeps it compliant with the
    // user-defined CORS policies.
    const acceptHeader = headers.get('accept')
    if (acceptHeader) {
      const values = acceptHeader.split(',').map((value) => value.trim())
      const filteredValues = values.filter(
        (value) => value !== 'msw/passthrough',
      )

      if (filteredValues.length > 0) {
        headers.set('accept', filteredValues.join(', '))
      } else {
        headers.delete('accept')
      }
    }

    return fetch(requestClone, { headers })
  }

  // Bypass mocking when the client is not active.
  if (!client) {
    return passthrough()
  }

  // Bypass initial page load requests (i.e. static assets).
  // The absence of the immediate/parent client in the map of the active clients
  // means that MSW hasn't dispatched the "MOCK_ACTIVATE" event yet
  // and is not ready to handle requests.
  if (!activeClientIds.has(client.id)) {
    return passthrough()
  }

  // Notify the client that a request has been intercepted.
  const requestBuffer = await request.arrayBuffer()
  const clientMessage = await sendToClient(
    client,
    {
      type: 'REQUEST',
      payload: {
        id: requestId,
        url: request.url,
        mode: request.mode,
        method: request.method,
        headers: Object.fromEntries(request.headers.entries()),
        cache: request.cache,
        credentials: request.credentials,
        destination: request.destination,
        integrity: request.integrity,
        redirect: request.redirect,
        referrer: request.referrer,
        referrerPolicy: request.referrerPolicy,
        body: requestBuffer,
        keepalive: request.keepalive,
      },
    },
    [requestBuffer],
  )

  switch (clientMessage.type) {
    case 'MOCK_RESPONSE': {
      return respondWithMock(clientMessage.data)
    }

    case 'PASSTHROUGH': {
      return passthrough()
    }
  }

  return passthrough()
}

function sendToClient(client, message, transferrables = []) {
  return new Promise((resolve, reject) => {
    const channel = new MessageChannel()

    channel.port1.onmessage = (event) => {
      if (event.data && event.data.error) {
        return reject(event.data.error)
      }

      resolve(event.data)
    }

    client.postMessage(
      message,
      [channel.port2].concat(transferrables.filter(Boolean)),
    )
  })
}

async function respondWithMock(response) {
  // Setting response status code to 0 is a no-op.
  // However, when responding with a "Response.error()", the produced Response
  // instance will have status code set to 0. Since it's not possible to create
  // a Response instance with status code 0, handle that use-case separately.
  if (response.status === 0) {
    return Response.error()
  }

  const mockedResponse = new Response(response.body, response)

  Reflect.defineProperty(mockedResponse, IS_MOCKED_RESPONSE, {
    value: true,
    enumerable: true,
  })

  return mockedResponse
}

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/robots.ts
================
// Path: neural_nexus_frontend/public/robots.txt

User-agent: *
Allow: /

Sitemap: https://neuralnexusstrategies.ai/sitemap.xml

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/(marketing)/blog/[slug]/loading.tsx
================
// src/app/(marketing)/blog/[slug]/loading.tsx
export default function BlogPostLoading() {
    return (
        <div className="container mx-auto px-4 py-8">
            <div className="flex flex-col md:flex-row gap-8">
                {/* Main Content */}
                <div className="flex-1">
                    {/* Featured Image Skeleton */}
                    <div className="aspect-video bg-gray-200 rounded-lg animate-pulse mb-8" />

                    {/* Content Skeleton */}
                    <div className="space-y-4">
                        <div className="flex gap-2">
                            <div className="h-4 w-24 bg-gray-200 rounded animate-pulse" />
                            <div className="h-4 w-4 bg-gray-200 rounded animate-pulse" />
                            <div className="h-4 w-32 bg-gray-200 rounded animate-pulse" />
                        </div>
                        <div className="h-8 w-3/4 bg-gray-200 rounded animate-pulse" />
                        <div className="h-6 w-2/3 bg-gray-200 rounded animate-pulse" />
                        <div className="space-y-2">
                            {[...Array(6)].map((_, i) => (
                                <div
                                    key={i}
                                    className="h-4 bg-gray-200 rounded animate-pulse"
                                />
                            ))}
                        </div>
                    </div>
                </div>

                {/* Sidebar Skeleton */}
                <div className="md:w-1/3">
                    <div className="space-y-4">
                        <div className="h-40 bg-gray-200 rounded-lg animate-pulse" />
                        <div className="h-60 bg-gray-200 rounded-lg animate-pulse" />
                    </div>
                </div>
            </div>
        </div>
    );
}

================
File: src/app/(marketing)/blog/[slug]/not-found.tsx
================
// src/app/(marketing)/blog/[slug]/not-found.tsx
import Link from "next/link";
import { Button } from "@/components/ui/button";

export default function BlogNotFound() {
    return (
        <div className="container mx-auto px-4 py-16 text-center">
            <h2 className="text-3xl font-bold mb-4">Blog Post Not Found</h2>
            <p className="text-gray-600 mb-8">
                The blog post you're looking for doesn't exist or has been
                removed.
            </p>
            <Button asChild>
                <Link href="/blog">Return to Blog</Link>
            </Button>
        </div>
    );
}

================
File: src/app/(marketing)/blog/[slug]/page.tsx
================
// Path: neural_nexus_frontend/src/app/(marketing)/blog/[slug]/page.tsx
import { Suspense } from "react";
import { notFound } from "next/navigation";
import { BlogBreadcrumb } from "@/components/marketing/blog/blog-breadcrumb";
import { BlogSidebar } from "@/components/marketing/blog/blog-sidebar";
import { NewsletterContentEnd } from "@/components/marketing/newsletter/newsletter-content-end";
import { getBlogPost } from "@/lib/api/blog";
import { formatDate, formatContent } from "@/lib/utils";

export const fetchCache = "force-dynamic";

interface BlogPostPageProps {
  params: {
    slug: string;
  };
}

export default async function BlogPostPage({ params }: BlogPostPageProps) {
  try {
    console.log("Attempting to fetch blog post with slug:", params.slug);
    const post = await getBlogPost(params.slug);
    console.log("Received post data:", post);

    if (!post) {
      console.log("No post found, redirecting to 404");
      notFound();
    }

    const breadcrumbItems = [
      {
        label: post.category.name,
        href: `/blog?category=${post.category.slug}`,
      },
      {
        label: post.title,
      },
    ];

    return (
      <div className="container mx-auto px-4 py-8">
        <div className="mb-8 bg-gray-50 p-4 rounded-lg shadow-sm">
          <BlogBreadcrumb items={breadcrumbItems} className="text-sm" />
        </div>

        <div className="flex flex-col md:flex-row gap-8">
          <article className="flex-1">
            {post.featured_image && (
              <div className="relative aspect-video w-full overflow-hidden rounded-lg mb-8">
                <img
                  src={
                    typeof post.featured_image === "object"
                      ? post.featured_image.url
                      : post.featured_image
                  }
                  alt={
                    typeof post.featured_image === "object"
                      ? post.featured_image.altText || post.title
                      : post.title
                  }
                  className="object-cover w-full h-full"
                  width={
                    typeof post.featured_image === "object"
                      ? post.featured_image.width
                      : undefined
                  }
                  height={
                    typeof post.featured_image === "object"
                      ? post.featured_image.height
                      : undefined
                  }
                />
              </div>
            )}

            <header className="mb-8">
              <div className="flex items-center space-x-2 text-sm text-gray-600 mb-4">
                <time dateTime={post.published_at || post.created_at}>
                  {formatDate(post.published_at || post.created_at)}
                </time>
                <span>•</span>
                <span>{post.category.name}</span>
                {post.estimated_read_time > 0 && (
                  <>
                    <span>•</span>
                    <span>{post.estimated_read_time} min read</span>
                  </>
                )}
              </div>

              <h1 className="text-4xl font-bold text-gray-900 mb-4">
                {post.title}
              </h1>

              {post.excerpt && (
                <p className="text-xl text-gray-600 mb-4">{post.excerpt}</p>
              )}
            </header>

            <div
              className="prose prose-lg max-w-none prose-headings:text-gray-900 prose-a:text-primary-600"
              dangerouslySetInnerHTML={{
                __html: formatContent(post.content),
              }}
            />

            <div className="mt-16">
              <Suspense
                fallback={
                  <div className="animate-pulse h-48 bg-gray-100 rounded-lg" />
                }
              >
                <NewsletterContentEnd />
              </Suspense>
            </div>
          </article>

          <div className="md:w-1/3">
            <Suspense
              fallback={
                <div className="animate-pulse h-96 bg-gray-100 rounded-lg" />
              }
            >
              <BlogSidebar />
            </Suspense>
          </div>
        </div>
      </div>
    );
  } catch (error) {
    console.error("Error fetching blog post:", error);
    notFound();
  }
}

================
File: src/app/(marketing)/blog/error.tsx
================
// src/app/(marketing)/blog/error.tsx
"use client";

import { Button } from "@/components/ui/button";

export default function BlogError({
    error,
    reset,
}: {
    error: Error;
    reset: () => void;
}) {
    return (
        <div className="container mx-auto px-4 py-16 text-center">
            <h2 className="text-3xl font-bold mb-4">Something went wrong!</h2>
            <p className="text-gray-600 mb-8">
                {error.message || "An error occurred while loading the blog."}
            </p>
            <Button onClick={reset}>Try Again</Button>
        </div>
    );
}

================
File: src/app/(marketing)/blog/page.tsx
================
// Path: neural_nexus_frontend/src/app/(marketing)/blog/page.tsx
import { Suspense } from "react";
import { BlogList } from "@/components/marketing/blog/blog-list";
import { BlogSidebar } from "@/components/marketing/blog/blog-sidebar";
import { BlogSearch } from "@/components/marketing/blog/blog-search";
import { BlogLoading } from "@/components/marketing/blog/blog-loading";
import { BlogBreadcrumb } from "@/components/marketing/blog/blog-breadcrumb";

export const fetchCache = "force-dynamic";

interface BlogPageProps {
  searchParams: {
    page?: string;
    category?: string;
    tag?: string;
    search?: string;
  };
}

export default async function BlogPage({ searchParams }: BlogPageProps) {
  const resolvedSearchParams = await Promise.resolve(searchParams);

  const params = {
    page: Number(resolvedSearchParams.page) || 1,
    category: resolvedSearchParams.category,
    tag: resolvedSearchParams.tag,
    search: resolvedSearchParams.search,
  };

  const breadcrumbItems = [];
  if (params.category) {
    breadcrumbItems.push({
      label: params.category.replace(/-/g, " "),
      href: `/blog?category=${params.category}`,
    });
  }
  if (params.tag) {
    breadcrumbItems.push({
      label: `#${params.tag.replace(/-/g, " ")}`,
      href: `/blog?tag=${params.tag}`,
    });
  }
  if (params.search) {
    breadcrumbItems.push({
      label: `Search: ${params.search}`,
    });
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8">
        <BlogBreadcrumb items={breadcrumbItems} />
      </div>

      <div className="flex flex-col md:flex-row gap-8">
        <div className="flex-1">
          <div className="mb-8">
            <BlogSearch />
          </div>

          <Suspense fallback={<BlogLoading />}>
            <BlogList
              page={params.page}
              category={params.category}
              tag={params.tag}
              search={params.search}
            />
          </Suspense>
        </div>

        <div className="md:w-1/3">
          <Suspense
            fallback={
              <div className="animate-pulse h-96 bg-gray-100 rounded-lg" />
            }
          >
            <BlogSidebar />
          </Suspense>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/(marketing)/careers/page.tsx
================
// Path: neural_nexus_frontend/src/app/(marketing)/careers/page.tsx
import { Suspense } from "react";
import dynamicImport from "next/dynamic";

const CareersContent = dynamicImport(
  () => import("@/components/marketing/careers/CareersContent"),
  {
    ssr: false,
    loading: () => (
      <div className="animate-pulse">
        <div className="h-64 bg-gray-100 mb-8"></div>
        <div className="h-96 bg-gray-100"></div>
      </div>
    ),
  },
);

export const revalidate = 3600; // Revalidate every hour
export const dynamic = "force-dynamic";
export const fetchCache = "force-dynamic";

export default function CareersPage() {
  return (
    <Suspense
      fallback={
        <div className="animate-pulse">
          <div className="h-64 bg-gray-100 mb-8"></div>
          <div className="h-96 bg-gray-100"></div>
        </div>
      }
    >
      <CareersContent />
    </Suspense>
  );
}

================
File: src/app/(marketing)/case-studies/[slug]/loading.tsx
================
// src/app/(marketing)/case-studies/[slug]/loading.tsx
export default function CaseStudyLoading() {
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto animate-pulse">
        <div className="aspect-video bg-gray-200 rounded-lg mb-8" />

        <div className="space-y-4 mb-8">
          <div className="h-4 bg-gray-200 rounded w-1/3" />
          <div className="h-8 bg-gray-200 rounded w-3/4" />
          <div className="h-4 bg-gray-200 rounded w-2/3" />
        </div>

        <div className="space-y-6">
          {[...Array(4)].map((_, i) => (
            <div key={i} className="space-y-3">
              <div className="h-6 bg-gray-200 rounded w-1/4" />
              <div className="space-y-2">
                <div className="h-4 bg-gray-200 rounded w-full" />
                <div className="h-4 bg-gray-200 rounded w-full" />
                <div className="h-4 bg-gray-200 rounded w-2/3" />
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

================
File: src/app/(marketing)/case-studies/[slug]/not-found.tsx
================
// src/app/(marketing)/case-studies/[slug]/not-found.tsx
import Link from "next/link";
import { Button } from "@/components/ui/button";

export default function CaseStudyNotFound() {
  return (
    <div className="container mx-auto px-4 py-16 text-center">
      <h2 className="text-3xl font-bold mb-4">Case Study Not Found</h2>
      <p className="text-gray-600 mb-8">
        The case study you're looking for doesn't exist or has been removed.
      </p>
      <Button asChild>
        <Link href="/case-studies">Return to Case Studies</Link>
      </Button>
    </div>
  );
}

================
File: src/app/(marketing)/case-studies/[slug]/page.tsx
================
// src/app/(marketing)/case-studies/[slug]/page.tsx
import { notFound } from "next/navigation";
import { getCaseStudy } from "@/lib/api/case-studies";
import { NewsletterContentEnd } from "@/components/marketing/newsletter/newsletter-content-end";
import { formatDate, formatContent } from "@/lib/utils";

interface CaseStudyPageProps {
  params: {
    slug: string;
  };
}

// Add this helper function for the JSON Results formatting
function formatResultValue(value: any, level = 0): React.ReactNode {
  if (typeof value === "object" && value !== null) {
    return (
      <dl className={`space-y-2 ${level > 0 ? "ml-4" : ""}`}>
        {Object.entries(value).map(([subKey, subValue]) => (
          <div key={subKey} className="text-gray-800">
            <dt className="text-sm font-medium text-gray-600 capitalize">
              {subKey.split("_").join(" ")}
            </dt>
            <dd className="mt-1">
              {typeof subValue === "object" ? (
                <dl>{formatResultValue(subValue, level + 1)}</dl>
              ) : (
                <span className="text-gray-900">{String(subValue)}</span>
              )}
            </dd>
          </div>
        ))}
      </dl>
    );
  }
  return String(value);
}

export default async function CaseStudyPage({ params }: CaseStudyPageProps) {
  try {
    const caseStudy = await getCaseStudy(params.slug);

    if (!caseStudy) {
      console.log("No case study found, returning 404");
      notFound();
    }

    return (
      <div className="container mx-auto px-4 py-8">
        <article className="max-w-4xl mx-auto">
          {caseStudy.featured_image && (
            <div className="relative aspect-video w-full overflow-hidden rounded-lg mb-8">
              <img
                src={caseStudy.featured_image}
                alt={caseStudy.title}
                className="object-cover w-full h-full"
              />
            </div>
          )}

          <header className="mb-8">
            <div className="flex items-center space-x-2 text-sm text-gray-600 mb-4">
              <span className="text-primary-600 font-medium">
                {caseStudy.industry}
              </span>
              <span>•</span>
              <span>{caseStudy.client_name}</span>
              <span>•</span>
              <time dateTime={caseStudy.published_at || caseStudy.created_at}>
                {formatDate(caseStudy.published_at || caseStudy.created_at)}
              </time>
            </div>

            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              {caseStudy.title}
            </h1>

            {caseStudy.excerpt && (
              <p className="text-xl text-gray-600 mb-4">{caseStudy.excerpt}</p>
            )}
          </header>

          <div className="prose prose-lg max-w-none mb-8">
            <h2 className="text-2xl font-bold mb-4">Challenge</h2>
            <div
              dangerouslySetInnerHTML={{
                __html: formatContent(caseStudy.challenge),
              }}
            />

            <h2 className="text-2xl font-bold mt-8 mb-4">Solution</h2>
            <div
              dangerouslySetInnerHTML={{
                __html: formatContent(caseStudy.solution),
              }}
            />

            <h2 className="text-2xl font-bold mt-8 mb-4">Results</h2>
            <div className="grid grid-cols-1 gap-6 my-6">
              {Object.entries(caseStudy.results || {}).map(([key, value]) => (
                <div key={key} className="bg-gray-50 p-6 rounded-lg">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4 capitalize">
                    {key.split("_").join(" ")}
                  </h3>
                  <dl className="space-y-4">{formatResultValue(value)}</dl>
                </div>
              ))}
            </div>

            <h2 className="text-2xl font-bold mt-8 mb-4">
              Implementation Timeline
            </h2>
            <div
              dangerouslySetInnerHTML={{
                __html: formatContent(caseStudy.implementation_timeline),
              }}
            />

            {caseStudy.testimonial && (
              <>
                <h2 className="text-2xl font-bold mt-8 mb-4">
                  Client Testimonial
                </h2>
                <blockquote className="border-l-4 border-primary-500 pl-4 italic">
                  {caseStudy.testimonial}
                </blockquote>
              </>
            )}
          </div>

          {/* Newsletter signup */}
          <div className="mt-16">
            <NewsletterContentEnd />
          </div>
        </article>
      </div>
    );
  } catch (error) {
    console.error("Error in CaseStudyPage:", error);
    notFound();
  }
}

================
File: src/app/(marketing)/case-studies/loading.tsx
================
// src/app/(marketing)/case-studies/loading.tsx
import { CaseStudyLoading } from "@/components/marketing/case-studies/case-study-loading";

export default function Loading() {
  return <CaseStudyLoading />;
}

================
File: src/app/(marketing)/case-studies/page.tsx
================
// Path: neural_nexus_frontend/src/app/(marketing)/case-studies/page.tsx
import { Suspense } from "react";
import { notFound } from "next/navigation";
import { CaseStudyErrorBoundary } from "@/components/marketing/case-studies/case-study-error-boundary";
import { CaseStudyList } from "@/components/marketing/case-studies/case-study-list";
import { CaseStudySearch } from "@/components/marketing/case-studies/case-study-search";
import { CaseStudyAnalytics } from "@/components/marketing/case-studies/case-study-analytics";

export const fetchCache = "force-dynamic";

interface CaseStudiesPageProps {
  searchParams: {
    page?: string;
    industry?: string;
    search?: string;
  };
}

export default async function CaseStudiesPage({
  searchParams,
}: CaseStudiesPageProps) {
  const { page = "1", industry, search } = searchParams;

  try {
    return (
      <CaseStudyErrorBoundary>
        <div className="container mx-auto px-4 py-8">
          <CaseStudyAnalytics />

          <header className="mb-8">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              Case Studies
            </h1>
            <p className="text-xl text-gray-600">
              Learn how we've helped organizations transform through data and AI
            </p>
          </header>

          <div className="mb-8">
            <CaseStudySearch />
          </div>

          <Suspense
            fallback={
              <div className="animate-pulse h-96 bg-gray-100 rounded-lg" />
            }
          >
            <CaseStudyList
              page={parseInt(page)}
              industry={industry}
              search={search}
            />
          </Suspense>
        </div>
      </CaseStudyErrorBoundary>
    );
  } catch (error) {
    console.error("Error in CaseStudiesPage:", error);
    notFound();
  }
}

================
File: src/app/about/page.tsx
================
// Path: neural_nexus_frontend/src/app/about/page.tsx
import { Suspense } from "react";
import dynamic from "next/dynamic";

// Import the client components dynamically
const AboutContent = dynamic(() => import("@/components/about/AboutContent"), {
  loading: () => (
    <div className="animate-pulse">
      <div className="h-96 bg-gray-100 mb-8"></div>
      <div className="h-64 bg-gray-100"></div>
    </div>
  ),
  ssr: true, // We can enable SSR for this component since it doesn't use searchParams
});

export const fetchCache = "force-dynamic";

export default function AboutPage() {
  return (
    <Suspense
      fallback={
        <div className="animate-pulse">
          <div className="h-96 bg-gray-100 mb-8"></div>
          <div className="h-64 bg-gray-100"></div>
        </div>
      }
    >
      <AboutContent />
    </Suspense>
  );
}

================
File: src/app/api/backend-test/route.tsx
================
// src/app/api/backend-test/route.tsx

import { NextResponse } from "next/server";

export async function GET() {
    try {
        const apiUrl = process.env.NEXT_PUBLIC_API_URL;
        console.log("Attempting to connect to backend at:", apiUrl);

        // Use the services endpoint which we know exists
        const response = await fetch(`${apiUrl}/api/services/`);
        const data = await response.json();

        return NextResponse.json({
            status: "success",
            services: data,
            timestamp: new Date().toISOString(),
        });
    } catch (error) {
        console.error("Backend connection error:", error);
        return NextResponse.json(
            {
                status: "error",
                message:
                    error instanceof Error
                        ? error.message
                        : "Failed to connect to backend",
                endpoint: `${process.env.NEXT_PUBLIC_API_URL}/api/services/`,
                timestamp: new Date().toISOString(),
            },
            { status: 500 },
        );
    }
}

================
File: src/app/api/newsletter/subscribe/route.tsx
================
// src/app/api/newsletter/subscribe/route.ts
import { type NextRequest } from "next/server";
import { type NewsletterFormData } from "@/types/newsletter";

export async function POST(request: NextRequest) {
    try {
        const data: NewsletterFormData = await request.json();

        // TODO: Add validation
        if (!data.email || !data.firstName) {
            return new Response(
                JSON.stringify({
                    message: "Email and first name are required",
                }),
                { status: 400 },
            );
        }

        // TODO: Add your email service integration here
        // For now, just log and return success
        console.log("Newsletter subscription:", data);

        return new Response(
            JSON.stringify({ message: "Subscription successful" }),
            { status: 200 },
        );
    } catch (error) {
        console.error("Newsletter subscription error:", error);
        return new Response(
            JSON.stringify({ message: "Internal server error" }),
            { status: 500 },
        );
    }
}

================
File: src/app/api/test/route.ts
================
// src/app/api/test/route.ts

import { NextResponse } from "next/server";

export async function GET() {
    try {
        return NextResponse.json({
            status: "success",
            message: "API route working correctly",
            timestamp: new Date().toISOString(),
        });
    } catch (error) {
        return NextResponse.json(
            {
                status: "error",
                message:
                    error instanceof Error ? error.message : "Unknown error",
            },
            { status: 500 },
        );
    }
}

================
File: src/app/contact/page.tsx
================
// src/app/contact/page.tsx
import dynamic from "next/dynamic";
import ContactInfo from "@/components/contact/ContactInfo";
import { BookDiscoveryButton } from "@/components/features/booking/BookDiscoveryButton";

// Dynamically import client components with no SSR
const ContactForm = dynamic(() => import("@/components/contact/ContactForm"), {
  ssr: false,
});

const FAQ = dynamic(() => import("@/components/contact/FAQ"), {
  ssr: false,
});

// Use a different name for the config export
export const fetchCache = "force-dynamic";

export default function ContactPage() {
  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">Contact Us</h1>
        <p className="text-lg text-gray-600 mb-6">
          Have questions? We'd love to hear from you.
        </p>
        <BookDiscoveryButton size="lg" />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
        <ContactInfo />
        <div className="min-h-[200px]">
          <ContactForm />
        </div>
      </div>

      <div className="mt-16">
        <FAQ />
      </div>
    </div>
  );
}

================
File: src/app/services/[slug]/not-found.tsx
================
// src/app/services/[slug]/not-found.tsx
"use client";

import Link from "next/link";

export default function NotFound() {
    return (
        <div className="min-h-screen flex items-center justify-center">
            <div className="text-center">
                <h2 className="text-2xl font-bold mb-4">Service Not Found</h2>
                <p className="mb-4">Could not find the requested service.</p>
                <Link
                    href="/services"
                    className="text-blue-600 hover:text-blue-800"
                >
                    Return to Services
                </Link>
            </div>
        </div>
    );
}

================
File: src/app/services/[slug]/page.tsx
================
// src/app/services/[slug]/page.tsx

"use client";

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import Link from "next/link";
import { ChevronLeft, CheckCircle2, Calendar, Clock } from "lucide-react";
import { BookDiscoveryButton } from "@/components/features/booking/BookDiscoveryButton";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";

interface Feature {
  id: number;
  name: string;
  description: string;
  is_highlighted: boolean;
  order: number;
}

interface Deliverable {
  id: number;
  name: string;
  description: string;
  timeline: string;
  order: number;
}

interface Service {
  id: number;
  category: number;
  name: string;
  slug: string;
  package_type: "ESSENTIALS" | "PROFESSIONAL" | "ENTERPRISE";
  description: string;
  base_price: string;
  duration: string;
  is_active: boolean;
  features: Feature[];
  deliverables: Deliverable[];
}

export default function ServiceDetailPage() {
  const params = useParams();
  const [service, setService] = useState<Service | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchServiceDetail = async () => {
      try {
        const apiUrl = process.env.NEXT_PUBLIC_API_URL;
        console.log("Debug - Environment:", {
          apiUrl,
          slug: params?.slug,
          isDevelopment: process.env.NODE_ENV === "development",
        });

        if (!apiUrl) {
          throw new Error("API URL is not configured");
        }

        if (!params?.slug) {
          throw new Error("Service slug is required");
        }

        const fullUrl = `${apiUrl}/api/services/${params.slug}/`;
        console.log("Debug - Fetching from:", fullUrl);

        const response = await fetch(fullUrl);
        console.log("Response status:", response.status);

        if (!response.ok) {
          throw new Error(`Service not found (Status: ${response.status})`);
        }

        const data = await response.json();
        console.log("Received data:", data);
        setService(data);
      } catch (err) {
        console.error("Debug - Fetch error:", err);
        setError(err instanceof Error ? err.message : "Failed to load service");
      } finally {
        setLoading(false);
      }
    };

    if (params?.slug) {
      // Add optional chaining here
      fetchServiceDetail();
    }
  }, [params?.slug]); // And here in the dependency array

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-red-50 border border-red-200 p-4 rounded-md">
          <h2 className="text-red-800 font-semibold">Error</h2>
          <p className="text-red-600">{error}</p>
        </div>
      </div>
    );
  }

  if (!service) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-md">
          <h2 className="text-yellow-800 font-semibold">Not Found</h2>
          <p className="text-yellow-600">
            Service not found. Please check the URL and try again.
          </p>
        </div>
      </div>
    );
  }

  const getPackageTypeStyles = (type: string) => {
    switch (type) {
      case "ESSENTIALS":
        return "bg-blue-100 text-blue-800 border-blue-200";
      case "PROFESSIONAL":
        return "bg-purple-100 text-purple-800 border-purple-200";
      case "ENTERPRISE":
        return "bg-green-100 text-green-800 border-green-200";
      default:
        return "bg-gray-100 text-gray-800 border-gray-200";
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  if (error || !service) {
    return (
      <div className="container mx-auto px-4 py-8">
        <Alert variant="destructive">
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>
            {error || "Service not found"}. Please try again later or contact
            support.
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        {/* Breadcrumb */}
        <div className="mb-8">
          <a
            href="/services"
            className="inline-flex items-center text-blue-600 hover:text-blue-800"
          >
            <ChevronLeft className="w-4 h-4 mr-1" />
            Back to Services
          </a>
        </div>

        {/* Header */}
        <div className="bg-white rounded-2xl shadow-lg p-8 mb-8">
          <div className="flex flex-col lg:flex-row justify-between items-start gap-6">
            <div>
              <div className="mb-4">
                <span
                  className={`inline-flex items-center px-4 py-2 rounded-full text-sm font-medium ${getPackageTypeStyles(service.package_type)}`}
                >
                  {service.package_type}
                </span>
              </div>
              <h1 className="text-3xl lg:text-4xl font-bold text-gray-900 mb-4">
                {service.name}
              </h1>
              <p className="text-lg text-gray-600">{service.description}</p>
            </div>
            <div className="lg:text-right">
              <div className="text-4xl font-bold text-gray-900 mb-2">
                ${parseInt(service.base_price).toLocaleString()}
              </div>
              <div className="flex items-center text-gray-600">
                <Clock className="w-4 h-4 mr-2" />
                Duration: {service.duration}
              </div>
            </div>
          </div>
        </div>

        {/* Features and Deliverables */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Features */}
          <div className="bg-white rounded-2xl shadow-lg p-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">
              Key Features
            </h2>
            <ul className="space-y-6">
              {service.features.map((feature) => (
                <li key={feature.id} className="flex items-start">
                  <CheckCircle2
                    className={`w-6 h-6 mr-3 mt-1 ${feature.is_highlighted ? "text-green-500" : "text-blue-500"}`}
                  />
                  <div>
                    <h3 className="font-semibold text-gray-900">
                      {feature.name}
                    </h3>
                    <p className="text-gray-600">{feature.description}</p>
                  </div>
                </li>
              ))}
            </ul>
          </div>

          {/* Deliverables */}
          <div className="bg-white rounded-2xl shadow-lg p-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">
              Deliverables
            </h2>
            <ul className="space-y-6">
              {service.deliverables.map((deliverable) => (
                <li key={deliverable.id}>
                  <h3 className="font-semibold text-gray-900">
                    {deliverable.name}
                  </h3>
                  <p className="text-gray-600 mb-2">
                    {deliverable.description}
                  </p>
                  <div className="flex items-center text-sm text-blue-600 font-medium">
                    <Calendar className="w-4 h-4 mr-2" />
                    {deliverable.timeline}
                  </div>
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* CTA Section */}
        <div className="bg-white rounded-2xl shadow-lg p-8 text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            Ready to Transform Your Organization?
          </h2>
          <p className="text-gray-600 mb-6 max-w-2xl mx-auto">
            Let's discuss how {service.name} can help you achieve your data and
            AI objectives.
          </p>
          <BookDiscoveryButton size="lg" variant="default" />
        </div>
      </div>
    </div>
  );
}

================
File: src/app/services/ai-readiness/page.tsx
================
// Path: neural_nexus_frontend/src/app/services/ai-readiness/page.tsx
import { Suspense } from "react";
import dynamic from "next/dynamic";
import type { Metadata } from "next";

// Dynamic import for client components
const AIReadinessContent = dynamic(
  () => import("@/components/services/ai-readiness/AIReadinessContent"),
  {
    ssr: false,
    loading: () => (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-pulse">
          <div className="h-64 bg-gray-100 rounded-lg mb-8 w-full max-w-4xl"></div>
          <div className="h-96 bg-gray-100 rounded-lg w-full max-w-4xl"></div>
        </div>
      </div>
    ),
  },
);

export function generateMetadata(): Metadata {
  return {
    title:
      "AI Readiness Assessment & Implementation Services | Neural Nexus Strategies",
    description:
      "Transform your organization with our comprehensive AI readiness assessment and implementation services. Expert guidance for successful AI adoption and integration.",
    keywords: [
      "AI readiness assessment",
      "AI implementation",
      "artificial intelligence consulting",
      "AI transformation",
      "AI strategy",
      "AI adoption",
      "AI maturity assessment",
      "enterprise AI",
      "AI consulting",
      "machine learning implementation",
      "AI ROI assessment",
    ].join(", "),
    openGraph: {
      title:
        "AI Readiness Assessment & Implementation | Neural Nexus Strategies",
      description:
        "Expert AI readiness assessment and implementation services. Transform your organization with strategic AI adoption.",
      type: "website",
      locale: "en_US",
      url: "https://neuralnexusstrategies.ai/services/ai-readiness",
      siteName: "Neural Nexus Strategies",
      images: [
        {
          url: "https://neuralnexusstrategies.ai/images/ai-readiness-og.jpg",
          width: 1200,
          height: 630,
          alt: "AI Readiness Assessment Services",
        },
      ],
    },
    twitter: {
      card: "summary_large_image",
      title: "AI Readiness Assessment Services",
      description:
        "Transform your organization with expert AI readiness assessment and implementation services.",
    },
    alternates: {
      canonical: "https://neuralnexusstrategies.ai/services/ai-readiness",
    },
    robots: {
      index: true,
      follow: true,
      googleBot: {
        index: true,
        follow: true,
        "max-video-preview": -1,
        "max-image-preview": "large",
        "max-snippet": -1,
      },
    },
  };
}

// Force dynamic rendering for fresh content
export const fetchCache = "force-dynamic";

// Add page revalidation
export const revalidate = 3600; // Revalidate every hour

export default function AIReadinessPage() {
  return (
    <Suspense
      fallback={
        <div className="flex justify-center items-center min-h-screen">
          <div className="animate-pulse">
            <div className="h-64 bg-gray-100 rounded-lg mb-8 w-full max-w-4xl"></div>
            <div className="h-96 bg-gray-100 rounded-lg w-full max-w-4xl"></div>
          </div>
        </div>
      }
    >
      <main className="min-h-screen">
        <article
          itemScope
          itemType="https://schema.org/Service"
          className="h-full"
        >
          <div
            itemProp="provider"
            itemScope
            itemType="https://schema.org/Organization"
          >
            <meta itemProp="name" content="Neural Nexus Strategies" />
            <meta itemProp="url" content="https://neuralnexusstrategies.ai" />
          </div>
          <meta itemProp="name" content="AI Readiness Assessment Services" />
          <meta
            itemProp="description"
            content="Comprehensive AI readiness assessment and implementation services helping organizations succeed with artificial intelligence adoption."
          />
          <meta itemProp="serviceType" content="AI Consulting" />
          <meta itemProp="areaServed" content="Worldwide" />

          <AIReadinessContent />
        </article>
      </main>
    </Suspense>
  );
}

================
File: src/app/services/data-strategy/page.tsx
================
// Path: neural_nexus_frontend/src/app/services/data-strategy/page.tsx
import { Suspense } from "react";
import dynamic from "next/dynamic";
import type { Metadata } from "next";

// Dynamic import for client components
const DataStrategyContent = dynamic(
  () => import("@/components/services/data-strategy/DataStrategyContent"),
  {
    ssr: false,
    loading: () => (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-pulse">
          <div className="h-64 bg-gray-100 rounded-lg mb-8 w-full max-w-4xl"></div>
          <div className="h-96 bg-gray-100 rounded-lg w-full max-w-4xl"></div>
        </div>
      </div>
    ),
  },
);

export function generateMetadata(): Metadata {
  return {
    title: "Data Strategy Consulting Services | Neural Nexus Strategies",
    description:
      "Transform your organization with expert data strategy consulting. Comprehensive data solutions from assessment to implementation. Drive business value through strategic data initiatives.",
    keywords: [
      "data strategy",
      "data strategy consulting",
      "data transformation",
      "data maturity assessment",
      "data governance",
      "data analytics strategy",
      "data roadmap",
      "AI strategy",
      "digital transformation",
      "data consulting",
      "business intelligence strategy",
    ].join(", "),
    openGraph: {
      title: "Data Strategy Consulting Services | Neural Nexus Strategies",
      description:
        "Expert data strategy consulting to transform your organization. Build a comprehensive data roadmap that drives business value.",
      type: "website",
      locale: "en_US",
      url: "https://neuralnexusstrategies.ai/services/data-strategy",
      siteName: "Neural Nexus Strategies",
      images: [
        {
          url: "https://neuralnexusstrategies.ai/images/data-strategy-og.jpg",
          width: 1200,
          height: 630,
          alt: "Data Strategy Consulting Services",
        },
      ],
    },
    twitter: {
      card: "summary_large_image",
      title: "Data Strategy Consulting Services",
      description:
        "Transform your organization with expert data strategy consulting. From assessment to implementation.",
    },
    alternates: {
      canonical: "https://neuralnexusstrategies.ai/services/data-strategy",
    },
    robots: {
      index: true,
      follow: true,
      googleBot: {
        index: true,
        follow: true,
        "max-video-preview": -1,
        "max-image-preview": "large",
        "max-snippet": -1,
      },
    },
  };
}

// Force dynamic rendering for fresh content
export const fetchCache = "force-dynamic";

// Add page revalidation
export const revalidate = 3600; // Revalidate every hour

export default function DataStrategyPage() {
  return (
    <Suspense
      fallback={
        <div className="flex justify-center items-center min-h-screen">
          <div className="animate-pulse">
            <div className="h-64 bg-gray-100 rounded-lg mb-8 w-full max-w-4xl"></div>
            <div className="h-96 bg-gray-100 rounded-lg w-full max-w-4xl"></div>
          </div>
        </div>
      }
    >
      <main className="min-h-screen">
        <article
          itemScope
          itemType="https://schema.org/Service"
          className="h-full"
        >
          <div
            itemProp="provider"
            itemScope
            itemType="https://schema.org/Organization"
          >
            <meta itemProp="name" content="Neural Nexus Strategies" />
            <meta itemProp="url" content="https://neuralnexusstrategies.ai" />
          </div>
          <meta itemProp="name" content="Data Strategy Consulting Services" />
          <meta
            itemProp="description"
            content="Expert data strategy consulting helping organizations transform through comprehensive data solutions and strategic initiatives."
          />
          <meta itemProp="serviceType" content="Data Strategy Consulting" />
          <meta itemProp="areaServed" content="Worldwide" />

          <DataStrategyContent />
        </article>
      </main>
    </Suspense>
  );
}

================
File: src/app/services/fractional-cdo/page.tsx
================
// Path: neural_nexus_frontend/src/app/services/fractional-cdo/page.tsx
import { Suspense } from "react";
import dynamic from "next/dynamic";
import type { Metadata } from "next";

// Dynamic import for client components
const FractionalCDOContent = dynamic(
  () => import("@/components/services/fractional-cdo/FractionalCDOContent"),
  {
    ssr: false,
    loading: () => (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-pulse">
          <div className="h-64 bg-gray-100 rounded-lg mb-8 w-full max-w-4xl"></div>
          <div className="h-96 bg-gray-100 rounded-lg w-full max-w-4xl"></div>
        </div>
      </div>
    ),
  },
);

export function generateMetadata(): Metadata {
  return {
    title:
      "Fractional Chief Data Officer (CDO) Services | Neural Nexus Strategies",
    description:
      "Transform your organization with expert Fractional CDO services. Get the benefits of a Chief Data Officer without the full-time cost. Strategic data leadership for modern businesses.",
    keywords: [
      "Fractional CDO",
      "Chief Data Officer",
      "Fractional Chief Data Officer",
      "data strategy",
      "executive data leadership",
      "part-time CDO",
      "data governance",
      "data leadership",
      "data transformation",
      "AI strategy",
    ].join(", "),
    openGraph: {
      title:
        "Fractional Chief Data Officer (CDO) Services | Neural Nexus Strategies",
      description:
        "Get expert Chief Data Officer leadership without the full-time commitment. Transform your data strategy with our Fractional CDO services.",
      type: "website",
      locale: "en_US",
      url: "https://neuralnexusstrategies.ai/services/fractional-cdo",
      siteName: "Neural Nexus Strategies",
      images: [
        {
          url: "https://neuralnexusstrategies.ai/images/fractional-cdo-og.jpg",
          width: 1200,
          height: 630,
          alt: "Fractional Chief Data Officer Services",
        },
      ],
    },
    twitter: {
      card: "summary_large_image",
      title: "Fractional Chief Data Officer Services",
      description:
        "Expert Fractional CDO services for modern businesses. Transform your data strategy with experienced leadership.",
    },
    alternates: {
      canonical: "https://neuralnexusstrategies.ai/services/fractional-cdo",
    },
    robots: {
      index: true,
      follow: true,
      googleBot: {
        index: true,
        follow: true,
        "max-video-preview": -1,
        "max-image-preview": "large",
        "max-snippet": -1,
      },
    },
  };
}

// Force dynamic rendering for fresh content
export const fetchCache = "force-dynamic";

// Add page revalidation
export const revalidate = 3600; // Revalidate every hour

export default function FractionalCDOPage() {
  return (
    <Suspense
      fallback={
        <div className="flex justify-center items-center min-h-screen">
          <div className="animate-pulse">
            <div className="h-64 bg-gray-100 rounded-lg mb-8 w-full max-w-4xl"></div>
            <div className="h-96 bg-gray-100 rounded-lg w-full max-w-4xl"></div>
          </div>
        </div>
      }
    >
      <main className="min-h-screen">
        <article
          itemScope
          itemType="https://schema.org/Service"
          className="h-full"
        >
          <div
            itemProp="provider"
            itemScope
            itemType="https://schema.org/Organization"
          >
            <meta itemProp="name" content="Neural Nexus Strategies" />
            <meta itemProp="url" content="https://neuralnexusstrategies.ai" />
          </div>
          <meta
            itemProp="name"
            content="Fractional Chief Data Officer Services"
          />
          <meta
            itemProp="description"
            content="Expert Fractional CDO services helping organizations transform through data-driven strategy and leadership."
          />
          <meta itemProp="serviceType" content="Fractional CDO Services" />
          <meta itemProp="areaServed" content="Worldwide" />

          <FractionalCDOContent />
        </article>
      </main>
    </Suspense>
  );
}

================
File: src/app/services/page.tsx
================
// Path: neural_nexus_frontend/src/app/services/page.tsx
import { Suspense } from "react";
import dynamic from "next/dynamic";

const ServicesContent = dynamic(
  () => import("@/components/services/ServicesContent"),
  {
    ssr: false,
    loading: () => (
      <div className="flex justify-center items-center min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50">
        <div className="text-xl">Loading services...</div>
      </div>
    ),
  },
);

export const fetchCache = "force-dynamic";

export default function ServicesPage() {
  return (
    <Suspense
      fallback={
        <div className="flex justify-center items-center min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50">
          <div className="text-xl">Loading services...</div>
        </div>
      }
    >
      <ServicesContent />
    </Suspense>
  );
}

================
File: src/app/test/page.tsx
================
// src/app/test/page.tsx
// Path: src/app/test/page.tsx
import dynamic from "next/dynamic";

const GeometricPatterns = dynamic(
  () => import("@/components/marketing/home/GeometricPatterns"),
  { ssr: false },
);

export default function TestPage() {
  return (
    <div className="min-h-screen relative bg-gradient-to-br from-white to-gray-50">
      <div className="relative border-2 border-dashed border-red-500 min-h-screen">
        <GeometricPatterns />
        <div className="relative z-10 p-8">
          <h1 className="text-2xl font-bold mb-4">Geometric Patterns Test</h1>
          <p className="text-gray-600">
            Testing geometric patterns visibility and animations.
          </p>
        </div>
      </div>
    </div>
  );
}

================
File: src/app/test-tracking/page.tsx
================
// Path: neural_nexus_frontend/src/app/test-tracking/page.tsx
import { Suspense } from "react";
import dynamic from "next/dynamic";

const TrackingTest = dynamic(() => import("@/components/test/TrackingTest"), {
  ssr: false,
  loading: () => (
    <div className="p-6 m-4 border rounded bg-white shadow animate-pulse">
      <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
      <div className="h-32 bg-gray-200 rounded mb-4"></div>
      <div className="h-10 bg-gray-200 rounded w-1/3"></div>
    </div>
  ),
});

export const fetchCache = "force-dynamic";

export default function TestTrackingPage() {
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">Tracking System Test</h1>
      <Suspense
        fallback={
          <div className="p-6 m-4 border rounded bg-white shadow animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
            <div className="h-32 bg-gray-200 rounded mb-4"></div>
            <div className="h-10 bg-gray-200 rounded w-1/3"></div>
          </div>
        }
      >
        <TrackingTest />
      </Suspense>
    </div>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Base Colors */
  --white: #ffffff;

  /* Navy Scale */
  --color-navy-50: #e6e8ed;
  --color-navy-100: #c2c7d6;
  --color-navy-200: #9ea7bc;
  --color-navy-300: #7a87a3;
  --color-navy-400: #566789;
  --color-navy-500: #1b2b4d;
  --color-navy-600: #162341;
  --color-navy-700: #111b35;
  --color-navy-800: #0d1429;
  --color-navy-900: #0a1020;

  /* Blue Scale */
  --color-blue-50: #ebf8ff;
  --color-blue-100: #bee3f8;
  --color-blue-200: #90cdf4;
  --color-blue-300: #63b3ed;
  --color-blue-400: #4299e1;
  --color-blue-500: #3182ce;
  --color-blue-600: #2b6cb0;
  --color-blue-700: #2c5282;
  --color-blue-800: #2a4365;
  --color-blue-900: #1a365d;

  /* Red Scale */
  --color-red-50: #fff5f5;
  --color-red-100: #fed7d7;
  --color-red-200: #feb2b2;
  --color-red-300: #fc8181;
  --color-red-400: #f56565;
  --color-red-500: #e53e3e;
  --color-red-600: #c53030;
  --color-red-700: #9b2c2c;
  --color-red-800: #822727;
  --color-red-900: #63171b;

  /* Green Scale */
  --color-green-50: #f0fdf4;
  --color-green-100: #dcfce7;
  --color-green-200: #bbf7d0;
  --color-green-300: #86efac;
  --color-green-400: #4ade80;
  --color-green-500: #22c55e;
  --color-green-600: #16a34a;
  --color-green-700: #15803d;
  --color-green-800: #166534;
  --color-green-900: #14532d;

  /* Semantic Theme Colors */
  --colors-primary: var(--color-navy-500);
  --colors-primary-lighter: var(--color-navy-400);
  --colors-primary-darker: var(--color-navy-600);
  --colors-primary-foreground: var(--white);

  --colors-secondary: var(--color-blue-500);
  --colors-secondary-lighter: var(--color-blue-400);
  --colors-secondary-darker: var(--color-blue-600);
  --colors-secondary-foreground: var(--white);

  --colors-accent: var(--color-blue-50);
  --colors-accent-foreground: var(--color-blue-900);
  --colors-muted: var(--color-navy-50);
  --colors-muted-foreground: var(--color-navy-500);

  --colors-background: var(--white);
  --colors-background-subtle: var(--color-navy-50);
  --colors-background-muted: var(--color-navy-100);

  --colors-destructive: var(--color-red-500);
  --colors-destructive-lighter: var(--color-red-400);
  --colors-destructive-darker: var(--color-red-600);
  --colors-destructive-foreground: var(--white);

  --colors-success: var(--color-green-500);
  --colors-success-lighter: var(--color-green-400);
  --colors-success-darker: var(--color-green-600);
  --colors-success-foreground: var(--white);

  /* Component-Specific Colors */

  /* Alert Component */
  --colors-alert-info-background: var(--color-blue-50);
  --colors-alert-info-foreground: var(--color-blue-900);
  --colors-alert-error-background: var(--color-red-50);
  --colors-alert-error-foreground: var(--color-red-900);
  --colors-alert-success-background: var(--color-green-50);
  --colors-alert-success-foreground: var(--color-green-900);

  /* Card Component */
  --colors-card-background: var(--colors-background);
  --colors-card-foreground: var(--colors-primary);
  --colors-card-border: var(--colors-muted);
  --colors-card-hover: var(--colors-background-subtle);

  /* Form Components */
  --colors-form-background: var(--colors-background);
  --colors-form-foreground: var(--colors-primary);
  --colors-form-placeholder: var(--colors-muted-foreground);
  --colors-form-border: var(--colors-muted);
  --colors-form-focus: var(--colors-primary);
  --colors-form-error: var(--colors-destructive);
  --colors-form-success: var(--colors-success);

  /* Input Component */
  --colors-input-border: var(--colors-form-border);
  --colors-input-background: var(--colors-form-background);
  --colors-input-foreground: var(--colors-form-foreground);
  --colors-input-placeholder: var(--colors-form-placeholder);
  --colors-input-focus: var(--colors-form-focus);

  /* Label Component */
  --colors-label-foreground: var(--colors-primary);
  --colors-label-error: var(--colors-destructive);
  --colors-label-disabled: var(--colors-muted-foreground);

  /* Select Component */
  --colors-select-border: var(--colors-form-border);
  --colors-select-background: var(--colors-form-background);
  --colors-select-foreground: var(--colors-form-foreground);
  --colors-select-placeholder: var(--colors-form-placeholder);
  --colors-select-focus: var(--colors-form-focus);

  /* Navigation Menu Component */
  --colors-nav-background: var(--colors-background);
  --colors-nav-border: var(--colors-muted);
  --colors-nav-item-hover: var(--colors-accent);
  --colors-nav-item-active: var(--colors-accent);
  --colors-nav-item-foreground: var(--colors-primary);
}

================
File: src/app/layout.tsx
================
// Path: neural_nexus_frontend/src/app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";
import TrackingProvider from "@/components/providers/TrackingProvider";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Neural Nexus Strategies",
  description: "Data and AI Consulting Services",
  icons: {
    icon: "/icon.svg",
    shortcut: "/icon.svg",
    apple: "/icon.svg",
  },
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <TrackingProvider>
          <div className="min-h-screen flex flex-col">
            <Header />
            <main className="flex-grow">{children}</main>
            <Footer />
          </div>
        </TrackingProvider>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
// Path: neural_nexus_frontend/src/app/page.tsx
import { Suspense } from "react";
import dynamic from "next/dynamic";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import Script from "next/script";
import type { Metadata } from "next";

// Dynamic imports for client components
const NewsletterBanner = dynamic(
  () => import("@/components/marketing/newsletter/NewsletterBanner"),
  {
    ssr: false,
    loading: () => <div className="animate-pulse h-32 bg-primary-50" />,
  },
);

const FeaturedInsight = dynamic(
  () => import("@/components/marketing/home/featured-insight"),
  {
    ssr: false,
    loading: () => <div className="animate-pulse h-48 bg-gray-100" />,
  },
);

const EnhancedFeaturesSection = dynamic(
  () => import("@/components/marketing/home/enhanced-features-section"),
  {
    ssr: false,
    loading: () => <div className="animate-pulse h-96 bg-gray-50" />,
  },
);

const AnimatedMetrics = dynamic(
  () => import("@/components/marketing/home/AnimatedMetrics"),
  {
    ssr: false,
    loading: () => (
      <div className="animate-pulse h-24 bg-gray-100 rounded-lg" />
    ),
  },
);

const GeometricPatterns = dynamic(
  () => import("@/components/marketing/home/GeometricPatterns"),
  {
    ssr: false,
    loading: () => <div className="animate-pulse h-full bg-primary-50" />,
  },
);

const BookDiscoveryButton = dynamic(
  () =>
    import("@/components/features/booking/BookDiscoveryButton").then(
      (mod) => mod.BookDiscoveryButton,
    ),
  {
    ssr: false,
    loading: () => (
      <div className="animate-pulse h-12 w-48 bg-primary-100 rounded-md" />
    ),
  },
);

export const metadata: Metadata = {
  title: "Neural Nexus Strategies | Expert Data Leadership & AI Innovation",
  description:
    "Transform your organization with strategic data leadership and AI innovation. Expert Fractional CDO services, data strategy consulting, and AI implementation guidance.",
  openGraph: {
    type: "website",
    locale: "en_US",
    url: "https://neuralnexusstrategies.ai",
    siteName: "Neural Nexus Strategies",
    title: "Expert Data Leadership & AI Innovation | Neural Nexus Strategies",
    description:
      "Transform your organization with strategic data leadership. Fractional CDO services, data strategy, and AI implementation for forward-thinking enterprises.",
  },
  twitter: {
    card: "summary_large_image",
    title: "Expert Data Leadership & AI Innovation",
    description:
      "Transform your organization with strategic data leadership and AI innovation.",
  },
  alternates: {
    canonical: "https://neuralnexusstrategies.ai",
  },
};

// Force dynamic rendering for fresh content
export const fetchCache = "force-dynamic";

const schemaData = {
  organization: {
    "@context": "https://schema.org",
    "@type": "Organization",
    name: "Neural Nexus Strategies",
    url: "https://neuralnexusstrategies.ai",
    description:
      "Expert data leadership and AI innovation consulting for forward-thinking enterprises.",
    contactPoint: {
      "@type": "ContactPoint",
      contactType: "customer support",
      availableLanguage: ["English"],
    },
  },
  website: {
    "@context": "https://schema.org",
    "@type": "WebSite",
    name: "Neural Nexus Strategies",
    url: "https://neuralnexusstrategies.ai",
  },
};

export default function Home() {
  return (
    <>
      <Script
        id="schema-organization"
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(schemaData.organization),
        }}
      />
      <Script
        id="schema-website"
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(schemaData.website),
        }}
      />
      <main className="min-h-screen relative bg-gradient-to-br from-primary-50 via-white to-secondary-50">
        {/* Container for patterns with specific z-index */}
        <div className="absolute inset-0 overflow-hidden z-0">
          <Suspense
            fallback={<div className="animate-pulse h-full bg-primary-50" />}
          >
            <GeometricPatterns />
          </Suspense>
        </div>

        {/* Content container with higher z-index */}
        <div className="relative z-10">
          <div className="container mx-auto px-4 pt-24 pb-16 md:pt-32 md:pb-24">
            <div className="max-w-4xl mx-auto text-center">
              <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold text-gray-900 mb-6">
                Transform Your Organization with{" "}
                <span className="text-primary hover:text-primary-darker">
                  Expert Data Leadership
                </span>
              </h1>
              <p className="text-lg md:text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
                Strategic data leadership and AI innovation for forward-thinking
                enterprises. Get expert guidance without the full-time executive
                cost.
              </p>
              <Suspense
                fallback={
                  <div className="animate-pulse h-24 bg-gray-100 rounded-lg mb-8" />
                }
              >
                <AnimatedMetrics />
              </Suspense>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Suspense
                  fallback={
                    <div className="animate-pulse h-12 w-48 bg-primary-100 rounded-md" />
                  }
                >
                  <BookDiscoveryButton size="lg" variant="default" />
                </Suspense>
                <Button variant="default" size="lg" asChild>
                  <Link href="/services">Explore Services</Link>
                </Button>
              </div>
            </div>
          </div>
          <Suspense
            fallback={<div className="animate-pulse h-32 bg-primary-50" />}
          >
            <NewsletterBanner />
          </Suspense>
          <Suspense
            fallback={<div className="animate-pulse h-48 bg-gray-100" />}
          >
            <FeaturedInsight />
          </Suspense>
          <Suspense
            fallback={<div className="animate-pulse h-96 bg-gray-50" />}
          >
            <EnhancedFeaturesSection />
          </Suspense>
        </div>
      </main>
    </>
  );
}

================
File: src/components/_lib/types.ts
================
// Path: src/components/_lib/types.ts
import { ComponentPropsWithoutRef, ElementType, ReactNode } from "react";

export interface BaseProps {
  className?: string;
  children?: ReactNode;
}

/**
 * HTML element props without ref
 */
export type BaseElementProps<T extends keyof JSX.IntrinsicElements> =
  ComponentPropsWithoutRef<T>;

/**
 * Common variant props used across components
 */
export interface VariantProps {
  variant?:
    | "default"
    | "outline"
    | "ghost"
    | "link"
    | "primary"
    | "secondary"
    | "destructive";
  size?: "default" | "sm" | "md" | "lg" | "xl";
}

/**
 * Base props for form field components
 */
export interface BaseFieldProps extends BaseProps {
  label?: string;
  error?: string;
  required?: boolean;
  disabled?: boolean;
  description?: string;
  id?: string;
  name?: string;
}

/**
 * Base props for layout components
 */
export interface BaseLayoutProps extends BaseProps {
  as?: keyof JSX.IntrinsicElements;
  id?: string;
  padding?: boolean;
  maxWidth?: "sm" | "md" | "lg" | "xl" | "full";
}

/**
 * Base props for card components
 */
export interface BaseCardProps extends BaseProps {
  title?: string;
  description?: string;
  footer?: ReactNode;
  image?: {
    src: string;
    alt: string;
  };
  onClick?: () => void;
  href?: string;
  elevated?: boolean;
}

/**
 * Base props for button components
 * Extends existing ButtonProps while adding new features
 */
export interface BaseButtonProps
  extends BaseElementProps<"button">,
    VariantProps {
  isLoading?: boolean;
  leftIcon?: ReactNode;
  rightIcon?: ReactNode;
  fullWidth?: boolean;
  asChild?: boolean;
}

/**
 * Base props for navigation items
 */
export interface BaseNavigationItem {
  href: string;
  label: string;
  icon?: ReactNode;
  isExternal?: boolean;
  isActive?: boolean;
}

/**
 * Base props for form components
 */
export interface BaseFormProps extends BaseProps {
  onSubmit: (data: any) => Promise<void> | void;
  isLoading?: boolean;
  submitLabel?: string;
  resetLabel?: string;
  showReset?: boolean;
}

/**
 * Base props for section components
 */
export interface BaseSectionProps extends BaseLayoutProps {
  title?: string;
  subtitle?: string;
  backgroundVariant?: "default" | "alternate" | "primary";
}

/**
 * Base props for input components
 */
export interface BaseInputProps
  extends BaseElementProps<"input">,
    BaseFieldProps {
  type?: "text" | "email" | "password" | "number" | "tel" | "url" | "search";
  placeholder?: string;
}

/**
 * Base props for select components
 */
export interface BaseSelectProps extends BaseFieldProps {
  options: Array<{
    value: string | number;
    label: string;
  }>;
  placeholder?: string;
}

================
File: src/components/about/AboutContent.tsx
================
// Path: neural_nexus_frontend/src/components/about/AboutContent.tsx
"use client";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { CldImage } from "next-cloudinary";
import { BookDiscoveryButton } from "@/components/features/booking/BookDiscoveryButton";
import { Linkedin } from "lucide-react";

// Animation variants
const fadeIn = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: { duration: 0.6, ease: "easeOut" },
  },
};

const staggerContainer = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.2,
      delayChildren: 0.3,
    },
  },
};

const scaleIn = {
  hidden: { scale: 0.8, opacity: 0 },
  visible: {
    scale: 1,
    opacity: 1,
    transition: { duration: 0.6, ease: "easeOut" },
  },
};

// Values data
const values = [
  {
    icon: "🎯",
    title: "Excellence",
    description:
      "We strive for excellence in every engagement, delivering measurable value and tangible results to our clients.",
  },
  {
    icon: "🤝",
    title: "Partnership",
    description:
      "We work as true partners with our clients, ensuring long-term success through deep collaboration and shared goals.",
  },
  {
    icon: "💡",
    title: "Innovation",
    description:
      "We stay at the forefront of data and AI technologies to bring cutting-edge solutions to our clients.",
  },
  {
    icon: "🔒",
    title: "Trust",
    description:
      "We build lasting relationships based on transparency, integrity, and consistent delivery of value.",
  },
  {
    icon: "📊",
    title: "Data-Driven",
    description:
      "We practice what we preach, making decisions based on data and measurable outcomes.",
  },
  {
    icon: "🚀",
    title: "Impact",
    description:
      "We focus on transformative solutions that create lasting positive change for our clients.",
  },
];

export default function AboutContent() {
  return (
    <div className="flex flex-col">
      {/* Hero Section with fade in animation */}
      <motion.section
        initial="hidden"
        animate="visible"
        variants={fadeIn}
        className="pt-24 pb-16 bg-gradient-to-b from-primary-50 to-white"
      >
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto text-center">
            <motion.h1
              variants={fadeIn}
              className="text-4xl md:text-5xl font-bold text-gray-900 mb-6"
            >
              Transforming Organizations Through Data Leadership
            </motion.h1>
            <motion.p variants={fadeIn} className="text-xl text-gray-600 mb-8">
              Neural Nexus Strategies combines deep expertise in data science,
              AI, and executive leadership to help organizations thrive in the
              data-driven economy.
            </motion.p>
          </div>
        </div>
      </motion.section>

      {/* Mission Section with stagger effect */}
      <motion.section
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, margin: "-100px" }}
        variants={staggerContainer}
        className="py-16"
      >
        <div className="container mx-auto px-4">
          <div className="max-w-3xl mx-auto">
            <div className="grid gap-8">
              <motion.div variants={fadeIn}>
                <h2 className="text-3xl font-bold text-gray-900 mb-4">
                  Our Mission
                </h2>
                <p className="text-gray-600">
                  We empower organizations to leverage data and AI for strategic
                  advantage, ensuring they not only survive but thrive in an
                  increasingly data-driven world.
                </p>
              </motion.div>
              <motion.div variants={fadeIn}>
                <h2 className="text-3xl font-bold text-gray-900 mb-4">
                  Our Vision
                </h2>
                <p className="text-gray-600">
                  To be the trusted partner for organizations seeking to
                  transform their operations through data leadership.
                </p>
              </motion.div>
            </div>
          </div>
        </div>
      </motion.section>

      {/* Leadership Team Section with scale animation */}
      <motion.section
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, margin: "-100px" }}
        variants={staggerContainer}
        className="py-16 bg-gray-50"
      >
        <div className="container mx-auto px-4">
          <motion.h2
            variants={fadeIn}
            className="text-3xl font-bold text-center text-gray-900 mb-12"
          >
            Our Leadership Team
          </motion.h2>
          <div className="grid md:grid-cols-2 gap-12 max-w-5xl mx-auto">
            {/* Whit Walters */}
            <motion.div
              variants={scaleIn}
              className="flex flex-col items-center text-center"
            >
              <motion.div
                whileHover={{ scale: 1.05 }}
                transition={{ type: "spring", stiffness: 300 }}
                className="w-48 h-48 rounded-full mb-6 overflow-hidden relative"
              >
                <CldImage
                  width={384} // Doubled from 192 to get higher resolution
                  height={384} // Doubled from 192 to get higher resolution
                  src="Full_Res-33_Master_lpbddp"
                  alt="Whit Walters"
                  className="w-full h-full object-cover"
                  priority
                  format="webp" // Specify format
                  quality={100} // Maximum quality
                />
              </motion.div>
              <h3 className="text-2xl font-bold text-gray-900 mb-2">
                Whit Walters
              </h3>
              <p className="text-primary-600 font-medium mb-4">
                CEO, Co-Founder & Chief Data Officer
              </p>
              <p className="text-gray-600 mb-4">
                With extensive experience in data strategy and organizational
                transformation, Whit leads Neural Nexus Strategies' mission to
                help organizations leverage data for strategic advantage.
              </p>
              <a
                href="https://www.linkedin.com/in/whitwalters/"
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center gap-2 text-primary-600 hover:text-primary-700 transition-colors"
              >
                <Linkedin size={20} />
                <span>Connect on LinkedIn</span>
              </a>
            </motion.div>

            {/* Jay Swartz */}
            <motion.div
              variants={scaleIn}
              className="flex flex-col items-center text-center"
            >
              <motion.div
                whileHover={{ scale: 1.05 }}
                transition={{ type: "spring", stiffness: 300 }}
                className="w-48 h-48 rounded-full mb-6 overflow-hidden relative"
              >
                <CldImage
                  width={192}
                  height={192}
                  src="JaySwartz2017_bqznnf"
                  alt="Jay Swartz"
                  className="w-full h-full object-cover"
                  priority
                />
              </motion.div>
              <h3 className="text-2xl font-bold text-gray-900 mb-2">
                Jay Swartz
              </h3>
              <p className="text-primary-600 font-medium mb-4">
                Chief Data Scientist & Co-Founder
              </p>
              <p className="text-gray-600 mb-4">
                A pioneer in applied AI and machine learning, Jay brings deep
                technical expertise and practical experience in implementing AI
                solutions across industries.
              </p>
              <a
                href="https://www.linkedin.com/in/jaywswartz/"
                target="_blank"
                rel="noopener noreferrer"
                className="inline-flex items-center gap-2 text-primary-600 hover:text-primary-700 transition-colors"
              >
                <Linkedin size={20} />
                <span>Connect on LinkedIn</span>
              </a>
            </motion.div>
          </div>
        </div>
      </motion.section>
      {/* Values Section with stagger effect */}
      <motion.section
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, margin: "-100px" }}
        variants={staggerContainer}
        className="py-16"
      >
        <div className="container mx-auto px-4">
          <motion.h2
            variants={fadeIn}
            className="text-3xl font-bold text-center text-gray-900 mb-12"
          >
            Our Values
          </motion.h2>
          <div className="grid md:grid-cols-3 gap-8 max-w-5xl mx-auto">
            {values.map((value, index) => (
              <motion.div
                key={index}
                variants={scaleIn}
                whileHover={{ y: -10 }}
                className="text-center"
              >
                <div className="w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">{value.icon}</span>
                </div>
                <h3 className="text-xl font-bold text-gray-900 mb-2">
                  {value.title}
                </h3>
                <p className="text-gray-600">{value.description}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </motion.section>

      {/* CTA Section with fade in */}
      <motion.section
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true }}
        variants={fadeIn}
        className="py-16 bg-primary-600"
      >
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold text-white mb-6">
            Ready to Transform Your Organization?
          </h2>
          <p className="text-xl text-primary-100 mb-8 max-w-2xl mx-auto">
            Let's discuss how our team can help you achieve your data and AI
            goals.
          </p>
          <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
            <BookDiscoveryButton
              size="lg"
              className="bg-white text-primary-600 hover:bg-primary-50"
            />
          </motion.div>
        </div>
      </motion.section>
    </div>
  );
}

================
File: src/components/about/CloudinaryTest.tsx
================
// Path: neural_nexus_frontend/src/components/about/CloudinaryTest.tsx
"use client";
import { CldImage } from "next-cloudinary";
import React, { useEffect } from "react";

export default function CloudinaryTest() {
  useEffect(() => {
    console.log("CloudinaryTest component mounted");
    console.log(
      "Cloudinary cloud name:",
      process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,
    );
  }, []);

  return (
    <div className="p-4 border-4 border-red-500">
      <h2>Cloudinary Test Component</h2>
      <div className="relative w-[400px] h-[400px]">
        <CldImage
          width={400}
          height={400}
          src={"v1736727174/JaySwartz2017_bqznnf"}
          alt="Test image"
          onError={(e: any) => {
            console.error("Cloudinary Image Error:", e);
          }}
          onLoad={() => {
            console.log("Cloudinary Image Loaded Successfully");
          }}
        />
      </div>
      <p className="mt-4">Status: Loading Cloudinary Image...</p>
    </div>
  );
}

================
File: src/components/about/ImageTest.tsx
================
// Path: neural_nexus_frontend/src/components/about/ImageTest.tsx
"use client";
import Image from "next/image";
import { useEffect } from "react";

export default function ImageTest() {
  useEffect(() => {
    console.log("=====================================");
    console.log("ImageTest component mounted");
    console.log("Environment:", process.env.NODE_ENV);
    console.log("=====================================");
  }, []);

  const handleImageError = (e: any) => {
    console.error("=====================================");
    console.error("Image Error Details:");
    console.error("Event:", e);
    console.error("=====================================");
  };

  return (
    <div
      className="p-4 border-4 border-red-500 m-4"
      style={{ backgroundColor: "lightgray" }}
    >
      <h2 className="text-xl font-bold mb-4">Image Test Component</h2>
      <p>If you can see this text, the component is rendering</p>
      <div className="relative w-[400px] h-[400px] bg-blue-200">
        <p>This is the image container</p>
        <Image
          src="https://res.cloudinary.com/dkjqgwlob/image/upload/v1736727174/JaySwartz2017_bqznnf.jpg"
          alt="Jay Swartz"
          fill
          sizes="400px"
          style={{ objectFit: "cover" }}
          onError={handleImageError}
          onLoad={() => console.log("Image loaded successfully")}
        />
      </div>
    </div>
  );
}

================
File: src/components/analytics/GoogleAnalytics.tsx
================
// Path: neural_nexus_frontend/src/components/analytics/GoogleAnalytics.tsx

import Script from "next/script";

const GoogleAnalytics = () => {
  return (
    <>
      <Script
        strategy="afterInteractive"
        src="https://www.googletagmanager.com/gtag/js?id=G-6MV9BW7RG6"
      />
      <Script
        id="google-analytics"
        strategy="afterInteractive"
        dangerouslySetInnerHTML={{
          __html: `
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', 'G-6MV9BW7RG6');
          `,
        }}
      />
    </>
  );
};

export default GoogleAnalytics;

================
File: src/components/calculators/AIROICalculator.tsx
================
// src/components/calculators/AIROICalculator.tsx
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";

interface ROIInputs {
    revenue: number;
    employees: number;
    processHours: number;
    dataQuality: number;
    hourlyRate: number;
    implementationCost: number;
}

interface ROIResults {
    annualSavings: number;
    revenueIncrease: number;
    productivityGains: number;
    qualityImprovements: number;
    totalBenefit: number;
    roi: number;
    paybackPeriods: number;
}

export default function AIROICalculator() {
    const [inputs, setInputs] = useState<ROIInputs>({
        revenue: 1000000,
        employees: 100,
        processHours: 1000,
        dataQuality: 70,
        hourlyRate: 50,
        implementationCost: 75000,
    });

    const [results, setResults] = useState<ROIResults | null>(null);

    const calculateROI = () => {
        // Process Automation Savings
        const automationSavings = inputs.processHours * inputs.hourlyRate * 0.3; // Assume 30% process efficiency gain

        // Revenue Impact
        const revenueIncrease = inputs.revenue * 0.05; // Assume 5% revenue increase through AI insights

        // Productivity Gains
        const productivityGains =
            inputs.employees * inputs.hourlyRate * 160 * 0.15; // Assume 15% productivity increase

        // Data Quality Improvements
        const qualityImprovements =
            ((100 - inputs.dataQuality) / 100) * inputs.revenue * 0.02; // Impact of improved data quality

        const totalBenefit =
            automationSavings +
            revenueIncrease +
            productivityGains +
            qualityImprovements;

        const roi =
            ((totalBenefit - inputs.implementationCost) /
                inputs.implementationCost) *
            100;

        const paybackPeriods = inputs.implementationCost / (totalBenefit / 12);

        setResults({
            annualSavings: automationSavings,
            revenueIncrease,
            productivityGains,
            qualityImprovements,
            totalBenefit,
            roi,
            paybackPeriods,
        });
    };

    const formatCurrency = (value: number) => {
        return new Intl.NumberFormat("en-US", {
            style: "currency",
            currency: "USD",
            maximumFractionDigits: 0,
        }).format(value);
    };

    return (
        <div className="max-w-4xl mx-auto p-4">
            <Card>
                <CardHeader>
                    <CardTitle>AI ROI Calculator</CardTitle>
                    <CardDescription>
                        Estimate the potential return on investment for your AI
                        initiatives
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="grid md:grid-cols-2 gap-8">
                        {/* Input Section */}
                        <div className="space-y-6">
                            <h3 className="font-semibold text-lg">
                                Organization Details
                            </h3>

                            <div className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Annual Revenue
                                    </label>
                                    <input
                                        type="number"
                                        value={inputs.revenue}
                                        onChange={(e) =>
                                            setInputs({
                                                ...inputs,
                                                revenue: Number(e.target.value),
                                            })
                                        }
                                        className="w-full rounded-md border border-gray-300 px-3 py-2"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Number of Employees
                                    </label>
                                    <input
                                        type="number"
                                        value={inputs.employees}
                                        onChange={(e) =>
                                            setInputs({
                                                ...inputs,
                                                employees: Number(
                                                    e.target.value,
                                                ),
                                            })
                                        }
                                        className="w-full rounded-md border border-gray-300 px-3 py-2"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Annual Manual Process Hours
                                    </label>
                                    <input
                                        type="number"
                                        value={inputs.processHours}
                                        onChange={(e) =>
                                            setInputs({
                                                ...inputs,
                                                processHours: Number(
                                                    e.target.value,
                                                ),
                                            })
                                        }
                                        className="w-full rounded-md border border-gray-300 px-3 py-2"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Current Data Quality Score (%)
                                    </label>
                                    <input
                                        type="number"
                                        value={inputs.dataQuality}
                                        onChange={(e) =>
                                            setInputs({
                                                ...inputs,
                                                dataQuality: Number(
                                                    e.target.value,
                                                ),
                                            })
                                        }
                                        className="w-full rounded-md border border-gray-300 px-3 py-2"
                                        min="0"
                                        max="100"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Average Hourly Rate
                                    </label>
                                    <input
                                        type="number"
                                        value={inputs.hourlyRate}
                                        onChange={(e) =>
                                            setInputs({
                                                ...inputs,
                                                hourlyRate: Number(
                                                    e.target.value,
                                                ),
                                            })
                                        }
                                        className="w-full rounded-md border border-gray-300 px-3 py-2"
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Estimated Implementation Cost
                                    </label>
                                    <input
                                        type="number"
                                        value={inputs.implementationCost}
                                        onChange={(e) =>
                                            setInputs({
                                                ...inputs,
                                                implementationCost: Number(
                                                    e.target.value,
                                                ),
                                            })
                                        }
                                        className="w-full rounded-md border border-gray-300 px-3 py-2"
                                    />
                                </div>

                                <Button
                                    onClick={calculateROI}
                                    className="w-full mt-4"
                                >
                                    Calculate ROI
                                </Button>
                            </div>
                        </div>

                        {/* Results Section */}
                        <div className="space-y-6">
                            <h3 className="font-semibold text-lg">
                                Projected Returns
                            </h3>

                            {results && (
                                <div className="space-y-6">
                                    <div className="grid grid-cols-2 gap-4">
                                        <Card className="p-4">
                                            <p className="text-sm text-gray-600">
                                                Annual ROI
                                            </p>
                                            <p className="text-2xl font-bold text-success-600">
                                                {results.roi.toFixed(1)}%
                                            </p>
                                        </Card>
                                        <Card className="p-4">
                                            <p className="text-sm text-gray-600">
                                                Payback Period
                                            </p>
                                            <p className="text-2xl font-bold text-success-600">
                                                {results.paybackPeriods.toFixed(
                                                    1,
                                                )}{" "}
                                                months
                                            </p>
                                        </Card>
                                    </div>

                                    <div className="space-y-3">
                                        <h4 className="font-medium">
                                            Benefit Breakdown
                                        </h4>
                                        <div className="space-y-2">
                                            <div className="flex justify-between items-center">
                                                <span className="text-sm text-gray-600">
                                                    Process Automation Savings
                                                </span>
                                                <span className="font-medium">
                                                    {formatCurrency(
                                                        results.annualSavings,
                                                    )}
                                                </span>
                                            </div>
                                            <div className="flex justify-between items-center">
                                                <span className="text-sm text-gray-600">
                                                    Revenue Impact
                                                </span>
                                                <span className="font-medium">
                                                    {formatCurrency(
                                                        results.revenueIncrease,
                                                    )}
                                                </span>
                                            </div>
                                            <div className="flex justify-between items-center">
                                                <span className="text-sm text-gray-600">
                                                    Productivity Gains
                                                </span>
                                                <span className="font-medium">
                                                    {formatCurrency(
                                                        results.productivityGains,
                                                    )}
                                                </span>
                                            </div>
                                            <div className="flex justify-between items-center">
                                                <span className="text-sm text-gray-600">
                                                    Quality Improvements
                                                </span>
                                                <span className="font-medium">
                                                    {formatCurrency(
                                                        results.qualityImprovements,
                                                    )}
                                                </span>
                                            </div>
                                            <div className="border-t pt-2 mt-2">
                                                <div className="flex justify-between items-center">
                                                    <span className="text-sm font-medium">
                                                        Total Annual Benefit
                                                    </span>
                                                    <span className="font-bold text-success-600">
                                                        {formatCurrency(
                                                            results.totalBenefit,
                                                        )}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div className="bg-gray-50 p-4 rounded-lg">
                                        <h4 className="font-medium mb-2">
                                            Next Steps
                                        </h4>
                                        <p className="text-sm text-gray-600 mb-4">
                                            Based on your inputs, AI
                                            implementation could provide
                                            significant returns. Schedule a
                                            consultation to discuss a detailed
                                            implementation plan.
                                        </p>
                                        <Button asChild>
                                            <a href="/book-call">
                                                Schedule Consultation
                                            </a>
                                        </Button>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
}

================
File: src/components/composite/content/content-card/content-card.test.tsx
================
// src/components/composite/content/content-card.test.tsx
import { render, screen, fireEvent } from "@testing-library/react";
import { ContentCard } from "./index";

describe("ContentCard", () => {
  const defaultProps = {
    title: "Test Card",
  };

  it("renders basic card with title", () => {
    render(<ContentCard {...defaultProps} />);
    expect(screen.getByText("Test Card")).toBeInTheDocument();
  });

  it("renders description when provided", () => {
    render(<ContentCard {...defaultProps} description="Test description" />);
    expect(screen.getByText("Test description")).toBeInTheDocument();
  });

  it("renders image with correct aspect ratio", () => {
    const image = {
      src: "/test-image.jpg",
      alt: "Test image",
      aspectRatio: "square" as const,
    };
    render(<ContentCard {...defaultProps} image={image} />);
    const img = screen.getByAltText("Test image");
    expect(img).toBeInTheDocument();
    expect(img.parentElement).toHaveClass("aspect-square");
  });

  it("renders as a link when href is provided", () => {
    render(<ContentCard {...defaultProps} href="/test-link" />);
    const link = screen.getByRole("link");
    expect(link).toHaveAttribute("href", "/test-link");
  });

  it("applies correct variant styles", () => {
    const { container } = render(
      <ContentCard {...defaultProps} variant="elevated" />,
    );
    const cardElement = container.querySelector(".shadow-lg");
    expect(cardElement).toBeInTheDocument();
  });

  it("shows loading state", () => {
    const { container } = render(<ContentCard {...defaultProps} isLoading />);
    const loadingElement = container.querySelector(".animate-pulse");
    expect(loadingElement).toBeInTheDocument();
  });

  it("renders footer when provided", () => {
    render(<ContentCard {...defaultProps} footer={<div>Test footer</div>} />);
    expect(screen.getByText("Test footer")).toBeInTheDocument();
  });

  it("handles click events", () => {
    const onClick = jest.fn();
    render(<ContentCard {...defaultProps} onClick={onClick} />);
    fireEvent.click(screen.getByText("Test Card"));
    expect(onClick).toHaveBeenCalled();
  });

  it("renders actions", () => {
    render(
      <ContentCard {...defaultProps} actions={<button>Test action</button>} />,
    );
    expect(
      screen.getByRole("button", { name: "Test action" }),
    ).toBeInTheDocument();
  });

  it("disables hover effect when specified", () => {
    const { container } = render(
      <ContentCard {...defaultProps} hover={false} />,
    );
    expect(container.firstChild).not.toHaveClass("hover:border-border/80");
  });

  it("renders custom children", () => {
    render(
      <ContentCard {...defaultProps}>
        <div>Custom content</div>
      </ContentCard>,
    );
    expect(screen.getByText("Custom content")).toBeInTheDocument();
  });
});

================
File: src/components/composite/content/content-card/index.tsx
================
// Path: src/components/composite/content/content-card/index.tsx
"use client";

import Link from "next/link";
import { cn } from "@/lib/utils";
import { Card } from "@/components/ui/card";
import type { ContentCardProps, CardAspectRatio } from "./types";

const aspectRatioClasses: Record<CardAspectRatio, string> = {
  square: "aspect-square",
  video: "aspect-video",
  wide: "aspect-[2/1]",
};

const variantClasses = {
  default: "bg-card",
  bordered: "border-2",
  elevated: "shadow-lg hover:shadow-xl transition-shadow",
};

export const ContentCard = ({
  title,
  description,
  image,
  actions,
  href,
  variant = "default",
  isLoading,
  footer,
  hover = true,
  onClick,
  className,
  children,
  ...props
}: ContentCardProps) => {
  const content = (
    <Card
      className={cn(
        "overflow-hidden",
        variantClasses[variant],
        hover && !isLoading && "hover:border-border/80",
        isLoading && "animate-pulse",
        className,
      )}
      {...props}
    >
      {image && (
        <div
          className={cn(
            "relative overflow-hidden",
            // Access aspectRatio from the image prop
            aspectRatioClasses[image.aspectRatio || "video"], // Added fallback to 'video'
          )}
        >
          <img
            src={image.src}
            alt={image.alt}
            className="object-cover w-full h-full"
          />
        </div>
      )}

      <div className="p-6">
        <h3 className="text-lg font-semibold leading-tight tracking-tight">
          {title}
        </h3>

        {description && (
          <p className="mt-2 text-sm text-muted-foreground line-clamp-3">
            {description}
          </p>
        )}

        {children && <div className="mt-4">{children}</div>}

        {actions && (
          <div className="mt-6 flex items-center gap-4">{actions}</div>
        )}
      </div>

      {footer && <div className="border-t p-4 bg-muted/50">{footer}</div>}
    </Card>
  );

  if (href) {
    return (
      <Link href={href} onClick={onClick} className="block">
        {content}
      </Link>
    );
  }

  return <div onClick={onClick}>{content}</div>;
};

export default ContentCard;

================
File: src/components/composite/content/content-card/types.ts
================
import { BaseProps } from "@/components/_lib/types";
import { ReactNode } from "react";

export interface ContentCardProps extends BaseProps {
  /**
   * Title of the card
   */
  title: string;

  /**
   * Optional description
   */
  description?: string;

  /**
   * Optional image properties
   */
  image?: {
    src: string;
    alt: string;
    aspectRatio?: "square" | "video" | "wide";
  };

  /**
   * Optional actions to display at the bottom
   */
  actions?: ReactNode;

  /**
   * Optional link to wrap the card
   */
  href?: string;

  /**
   * Visual variant of the card
   */
  variant?: "default" | "bordered" | "elevated";

  /**
   * Loading state
   */
  isLoading?: boolean;

  /**
   * Optional footer content
   */
  footer?: ReactNode;

  /**
   * Optional hover effect
   */
  hover?: boolean;

  /**
   * Optional click handler
   */
  onClick?: () => void;
}

export type CardAspectRatio = "square" | "video" | "wide";

================
File: src/components/composite/content/section-header/index.tsx
================
"use client";

import { cn } from "@/lib/utils";
import type { SectionHeaderProps } from "./types";

const sizeClasses = {
  sm: {
    title: "text-lg font-semibold",
    subtitle: "text-sm",
    wrapper: "space-y-1",
  },
  md: {
    title: "text-2xl font-bold",
    subtitle: "text-base",
    wrapper: "space-y-2",
  },
  lg: {
    title: "text-3xl font-bold",
    subtitle: "text-lg",
    wrapper: "space-y-3",
  },
};

const alignmentClasses = {
  left: "text-left",
  center: "text-center",
  right: "text-right",
};

export const SectionHeader = ({
  title,
  subtitle,
  actions,
  size = "md",
  divider = false,
  align = "left",
  className,
  ...props
}: SectionHeaderProps) => {
  return (
    <div
      className={cn(
        "w-full",
        divider && "border-b border-border pb-4",
        className,
      )}
      {...props}
    >
      <div
        className={cn(
          "flex items-start justify-between gap-4",
          alignmentClasses[align],
        )}
      >
        <div
          className={cn(
            sizeClasses[size].wrapper,
            actions && align === "center" && "flex-1",
          )}
        >
          <h2
            className={cn(
              sizeClasses[size].title,
              "text-foreground tracking-tight",
            )}
          >
            {title}
          </h2>

          {subtitle && (
            <p
              className={cn(
                sizeClasses[size].subtitle,
                "text-muted-foreground",
              )}
            >
              {subtitle}
            </p>
          )}
        </div>

        {actions && (
          <div
            className={cn(
              "flex items-center gap-4",
              align === "center" && "flex-1 justify-end",
            )}
          >
            {actions}
          </div>
        )}
      </div>
    </div>
  );
};

export default SectionHeader;

================
File: src/components/composite/content/section-header/section-header.test.tsx
================
// section-header.test.tsx
import { render, screen } from "@testing-library/react";
import { SectionHeader } from "./index";

describe("SectionHeader", () => {
  const defaultProps = {
    title: "Test Section",
  };

  it("renders with basic props", () => {
    render(<SectionHeader {...defaultProps} />);
    expect(screen.getByText("Test Section")).toHaveClass("text-2xl");
  });

  it("renders subtitle when provided", () => {
    render(<SectionHeader {...defaultProps} subtitle="Test subtitle" />);
    expect(screen.getByText("Test subtitle")).toHaveClass(
      "text-muted-foreground",
    );
  });

  it("applies correct size classes", () => {
    const { rerender } = render(<SectionHeader {...defaultProps} size="sm" />);
    expect(screen.getByText("Test Section")).toHaveClass("text-lg");

    rerender(<SectionHeader {...defaultProps} size="lg" />);
    expect(screen.getByText("Test Section")).toHaveClass("text-3xl");
  });

  it("adds divider when specified", () => {
    const { container } = render(<SectionHeader {...defaultProps} divider />);
    expect(container.firstChild).toHaveClass("border-b");
  });

  it("applies correct alignment", () => {
    const { rerender } = render(
      <SectionHeader {...defaultProps} align="center" />,
    );
    expect(
      screen.getByText("Test Section").parentElement?.parentElement,
    ).toHaveClass("text-center");

    rerender(<SectionHeader {...defaultProps} align="right" />);
    expect(
      screen.getByText("Test Section").parentElement?.parentElement,
    ).toHaveClass("text-right");
  });

  it("renders actions", () => {
    render(
      <SectionHeader
        {...defaultProps}
        actions={<button>Test action</button>}
      />,
    );
    expect(
      screen.getByRole("button", { name: "Test action" }),
    ).toBeInTheDocument();
  });

  it("positions actions correctly with center alignment", () => {
    render(
      <SectionHeader
        {...defaultProps}
        align="center"
        actions={<button>Test action</button>}
      />,
    );
    const actionContainer = screen.getByRole("button", {
      name: "Test action",
    }).parentElement;
    expect(actionContainer).toHaveClass("flex-1", "justify-end");
  });

  it("applies custom className", () => {
    const { container } = render(
      <SectionHeader {...defaultProps} className="test-class" />,
    );
    expect(container.firstChild).toHaveClass("test-class");
  });

  it("maintains responsive text sizes", () => {
    const { container } = render(<SectionHeader {...defaultProps} size="md" />);
    const titleElement = screen.getByText("Test Section");
    expect(titleElement).toHaveClass("text-2xl", "font-bold", "tracking-tight");
  });

  it("handles long titles and subtitles", () => {
    render(
      <SectionHeader
        title="Very long title that should still be handled gracefully"
        subtitle="And an equally long subtitle that needs to be displayed properly"
      />,
    );
    expect(screen.getByText(/Very long title/)).toBeInTheDocument();
    expect(screen.getByText(/equally long subtitle/)).toBeInTheDocument();
  });
});

================
File: src/components/composite/content/section-header/types.ts
================
import { BaseProps } from "@/components/_lib/types";
import { ReactNode } from "react";

export interface SectionHeaderProps extends BaseProps {
  /**
   * Main title of the section
   */
  title: string;

  /**
   * Optional subtitle or description
   */
  subtitle?: string;

  /**
   * Optional actions to display on the right
   */
  actions?: ReactNode;

  /**
   * Size variant of the header
   */
  size?: "sm" | "md" | "lg";

  /**
   * Whether to show a divider below the header
   */
  divider?: boolean;

  /**
   * Alignment of the header content
   */
  align?: "left" | "center" | "right";
}

================
File: src/components/composite/form/form-field/examples.tsx
================
// src/components/composite/form/form-field/examples.tsx
import { useForm } from "react-hook-form";
import { FormField } from "./index";
import { Input } from "@/components/ui/input";
import { Form } from "@/components/ui/form";

export function SignupForm() {
  const form = useForm({
    defaultValues: {
      email: "",
      password: "",
      username: "takenuser", // Pre-filled to show error state
    },
  });

  return (
    <Form {...form}>
      <form>
        <FormField
          name="email"
          label="Email"
          required
          description="We'll never share your email"
        >
          <Input type="email" placeholder="Enter your email" />
        </FormField>

        <FormField
          name="password"
          label="Password"
          required
          description="Must be at least 8 characters"
        >
          <Input type="password" placeholder="Enter your password" />
        </FormField>

        <FormField
          name="username"
          label="Username"
          error="This username is already taken"
        >
          <Input placeholder="Choose a username" />
        </FormField>
      </form>
    </Form>
  );
}

================
File: src/components/composite/form/form-field/form-field.integration.test.tsx
================
// src/components/composite/form/form-field/form-field.integration.test.tsx
import { screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { SignupForm } from "./examples";
import { renderWithForm } from "@/test/utils/form";

describe("SignupForm Integration", () => {
  it("renders all form fields", () => {
    renderWithForm(<SignupForm />);
    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/username/i)).toBeInTheDocument();
  });

  it("shows required indicators", () => {
    renderWithForm(<SignupForm />);
    const requiredMarkers = screen.getAllByText("*");
    expect(requiredMarkers).toHaveLength(2); // Email and Password are required
  });

  it("shows field descriptions", () => {
    renderWithForm(<SignupForm />);
    expect(
      screen.getByText("We'll never share your email"),
    ).toBeInTheDocument();
    expect(
      screen.getByText("Must be at least 8 characters"),
    ).toBeInTheDocument();
  });

  it("displays error state", () => {
    renderWithForm(<SignupForm />);
    expect(
      screen.getByText("This username is already taken"),
    ).toBeInTheDocument();
  });
});

================
File: src/components/composite/form/form-field/form-field.test.tsx
================
//src/components/composite/form/form-field/form-field.test.tsx

import { screen } from "@testing-library/react";
import { FormField } from "./index";
import { Input } from "@/components/ui/input";
import { renderWithForm } from "@/test/utils/form";

describe("FormField", () => {
  it("renders with label and children", () => {
    renderWithForm(
      <FormField name="test" label="Email">
        <Input placeholder="Enter email" />
      </FormField>,
    );

    expect(screen.getByText("Email")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Enter email")).toBeInTheDocument();
  });

  it("shows required indicator when required prop is true", () => {
    renderWithForm(
      <FormField name="test" label="Username" required>
        <Input placeholder="Enter username" />
      </FormField>,
    );

    expect(screen.getByText("Username")).toBeInTheDocument();
    expect(screen.getByText("*")).toHaveClass("text-destructive");
  });

  it("displays error message when error prop is provided", () => {
    renderWithForm(
      <FormField name="test" label="Password" error="This field is required">
        <Input type="password" />
      </FormField>,
    );

    expect(screen.getByText("This field is required")).toHaveClass(
      "text-[var(--colors-form-error)]",
    );
  });

  it("renders description when provided", () => {
    const description = "Must be at least 8 characters";
    renderWithForm(
      <FormField name="test" label="Password" description={description}>
        <Input type="password" />
      </FormField>,
    );

    expect(screen.getByText(description)).toHaveClass(
      "text-[var(--colors-form-placeholder)]",
    );
  });

  it("passes className to wrapper element", () => {
    renderWithForm(
      <FormField name="test" label="Test" className="mt-4">
        <Input />
      </FormField>,
    );

    expect(screen.getByTestId("form-field")).toHaveClass("mt-4");
  });

  it("applies error styles to label when error is present", () => {
    renderWithForm(
      <FormField name="test" label="Test" error="Error message">
        <Input />
      </FormField>,
    );

    expect(screen.getByText("Test")).toHaveClass("text-destructive");
  });
});

================
File: src/components/composite/form/form-field/index.tsx
================
"use client";

import React, { useId } from "react";
import { cn } from "@/lib/utils";
import { FormFieldProps } from "./types";
import {
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
} from "@/components/ui/form";

export const FormField: React.FC<FormFieldProps> = ({
  label,
  error,
  required,
  disabled,
  description,
  helperText,
  children,
  className,
  showRequiredIndicator = true,
  id: customId,
  ...props
}) => {
  const generatedId = useId();
  const id = customId ?? generatedId;

  return (
    <FormItem
      className={cn("w-full", className)}
      data-testid="form-field"
      {...props}
    >
      {label && (
        <FormLabel htmlFor={id} className={cn(error && "text-destructive")}>
          {label}
          {required && showRequiredIndicator && (
            <span className="text-destructive ml-1">*</span>
          )}
        </FormLabel>
      )}
      <FormControl>
        {React.cloneElement(children, {
          id,
          "aria-describedby": description ? `${id}-description` : undefined,
          "aria-invalid": error ? "true" : undefined,
          disabled,
          ...children.props,
        })}
      </FormControl>
      {description && <FormDescription>{description}</FormDescription>}
      {helperText && !error && (
        <p className="text-sm text-muted-foreground mt-1">{helperText}</p>
      )}
      {error && <FormMessage>{error}</FormMessage>}
    </FormItem>
  );
};

export default FormField;

================
File: src/components/composite/form/form-field/types.ts
================
import { BaseFieldProps } from "@/components/_lib/types";
import { InputProps } from "@/components/ui/input";
import { SelectProps } from "@/components/ui/select";
import { TextareaProps } from "@/components/ui/textarea";

export type FormFieldInputElement = InputProps | SelectProps | TextareaProps;

export interface FormFieldProps extends BaseFieldProps {
  /**
   * The form field input element (Input, Select, or Textarea)
   */
  children: React.ReactElement<FormFieldInputElement>;

  /**
   * Optional helper text to display below the field
   */
  helperText?: string;

  /**
   * Whether to show the required asterisk
   * @default false
   */
  showRequiredIndicator?: boolean;
}

================
File: src/components/composite/form/form-section/index.tsx
================
"use client";

import { cn } from "@/lib/utils";
import type { FormSectionProps } from "./types";

const spacingClasses = {
  tight: "space-y-2",
  normal: "space-y-4",
  loose: "space-y-6",
};

export const FormSection = ({
  title,
  description,
  divider = true,
  fieldSpacing = "normal",
  className,
  children,
  ...props
}: FormSectionProps) => {
  return (
    <div
      className={cn("py-6", divider && "border-t border-border", className)}
      {...props}
    >
      <div className="mb-6">
        <h3 className="text-lg font-medium leading-6 text-foreground">
          {title}
        </h3>
        {description && (
          <p className="mt-1 text-sm text-muted-foreground">{description}</p>
        )}
      </div>

      <div className={cn(spacingClasses[fieldSpacing])}>{children}</div>
    </div>
  );
};

export default FormSection;

================
File: src/components/composite/form/form-section/types.ts
================
import { BaseProps } from "@/components/_lib/types";

export interface FormSectionProps extends BaseProps {
  /**
   * Title of the form section
   */
  title: string;

  /**
   * Optional description text
   */
  description?: string;

  /**
   * Whether to show a visual separator above the section
   */
  divider?: boolean;

  /**
   * Optional custom spacing between fields
   */
  fieldSpacing?: "tight" | "normal" | "loose";
}

================
File: src/components/composite/form/form-submit/index.tsx
================
"use client";

import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import type { FormSubmitProps } from "./types";

const alignmentClasses = {
  left: "justify-start",
  center: "justify-center",
  right: "justify-end",
};

export const FormSubmit = ({
  submitText = "Submit",
  resetText = "Reset",
  showReset = false,
  isSubmitting = false,
  onReset,
  align = "left",
  stackOnMobile = true,
  className,
  ...props
}: FormSubmitProps) => {
  return (
    <div
      className={cn(
        "flex gap-4",
        stackOnMobile ? "flex-col sm:flex-row" : "flex-row",
        alignmentClasses[align],
        className,
      )}
      {...props}
    >
      <Button type="submit" disabled={isSubmitting}>
        {isSubmitting ? "Submitting..." : submitText}
      </Button>

      {showReset && (
        <Button
          type="button"
          variant="outline"
          onClick={onReset}
          disabled={isSubmitting}
        >
          {resetText}
        </Button>
      )}
    </div>
  );
};

export default FormSubmit;

================
File: src/components/composite/form/form-submit/types.ts
================
import { BaseProps } from "@/components/_lib/types";

export interface FormSubmitProps extends BaseProps {
  /**
   * Text to display on the submit button
   */
  submitText?: string;

  /**
   * Text to display on the reset button
   */
  resetText?: string;

  /**
   * Whether to show the reset button
   */
  showReset?: boolean;

  /**
   * Whether the form is currently submitting
   */
  isSubmitting?: boolean;

  /**
   * Callback when reset is clicked
   */
  onReset?: () => void;

  /**
   * Position of the buttons
   */
  align?: "left" | "center" | "right";

  /**
   * Whether to stack buttons vertically on mobile
   */
  stackOnMobile?: boolean;
}

================
File: src/components/composite/navigation/nav-link/index.tsx
================
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import { ExternalLink } from "lucide-react";
import { cn } from "@/lib/utils";
import type { NavLinkProps } from "./types";

const variantClasses = {
  default: "text-foreground hover:text-foreground/80",
  subtle: "text-muted-foreground hover:text-foreground",
  ghost: "text-muted-foreground/60 hover:text-muted-foreground",
};

export const NavLink = ({
  href,
  label,
  isActive,
  variant = "default",
  icon,
  isExternal,
  description,
  className,
  ...props
}: NavLinkProps) => {
  const pathname = usePathname();
  const isCurrentPath = isActive ?? pathname === href;

  const content = (
    <>
      <div className="flex items-center gap-2">
        {icon && <span className="h-4 w-4">{icon}</span>}
        <span>{label}</span>
        {isExternal && <ExternalLink className="h-3 w-3 ml-1" />}
      </div>
      {description && (
        <p className="text-sm text-muted-foreground">{description}</p>
      )}
    </>
  );

  const linkClasses = cn(
    "flex flex-col gap-1 rounded-md px-3 py-2 transition-colors",
    variantClasses[variant],
    isCurrentPath && "bg-accent text-accent-foreground",
    "hover:bg-accent/50",
    className,
  );

  if (isExternal) {
    return (
      <a
        href={href}
        target="_blank"
        rel="noopener noreferrer"
        className={linkClasses}
        {...props}
      >
        {content}
      </a>
    );
  }

  return (
    <Link href={href} className={linkClasses} {...props}>
      {content}
    </Link>
  );
};

export default NavLink;

================
File: src/components/composite/navigation/nav-link/nav-link.test.tsx
================
import { render, screen } from "@testing-library/react";
import { Home } from "lucide-react";
import { NavLink } from "./index";

// Mock next/navigation
jest.mock("next/navigation", () => ({
  usePathname: () => "/test-path",
}));

describe("NavLink", () => {
  it("renders basic link correctly", () => {
    render(<NavLink href="/test" label="Test Link" />);

    const link = screen.getByText("Test Link");
    expect(link).toBeInTheDocument();
    expect(link.closest("a")).toHaveAttribute("href", "/test");
  });

  it("renders icon when provided", () => {
    render(
      <NavLink
        href="/test"
        label="Test Link"
        icon={<Home data-testid="icon" />}
      />,
    );

    expect(screen.getByTestId("icon")).toBeInTheDocument();
  });

  it("shows active state", () => {
    render(<NavLink href="/test" label="Test Link" isActive />);

    expect(screen.getByText("Test Link").closest("a")).toHaveClass("bg-accent");
  });

  it("renders description when provided", () => {
    render(
      <NavLink href="/test" label="Test Link" description="Test Description" />,
    );

    expect(screen.getByText("Test Description")).toBeInTheDocument();
  });

  it("handles external links", () => {
    render(
      <NavLink href="https://example.com" label="External Link" isExternal />,
    );

    const link = screen.getByText("External Link").closest("a");
    expect(link).toHaveAttribute("target", "_blank");
    expect(link).toHaveAttribute("rel", "noopener noreferrer");
  });

  it("applies variant styles", () => {
    const { rerender } = render(
      <NavLink href="/test" label="Test Link" variant="subtle" />,
    );

    expect(screen.getByText("Test Link").closest("a")).toHaveClass(
      "text-muted-foreground",
    );

    rerender(<NavLink href="/test" label="Test Link" variant="ghost" />);

    expect(screen.getByText("Test Link").closest("a")).toHaveClass(
      "text-muted-foreground/60",
    );
  });

  it("accepts additional className", () => {
    render(<NavLink href="/test" label="Test Link" className="custom-class" />);

    expect(screen.getByText("Test Link").closest("a")).toHaveClass(
      "custom-class",
    );
  });
});

================
File: src/components/composite/navigation/nav-link/types.ts
================
import { BaseProps } from "@/components/_lib/types";

export interface NavLinkProps extends BaseProps {
  /**
   * The URL the link points to
   */
  href: string;

  /**
   * The text or content to display
   */
  label: string | React.ReactNode;

  /**
   * Whether the link is currently active
   */
  isActive?: boolean;

  /**
   * Visual variant of the link
   */
  variant?: "default" | "subtle" | "ghost";

  /**
   * Optional icon to display before the label
   */
  icon?: React.ReactNode;

  /**
   * Whether this is an external link
   */
  isExternal?: boolean;

  /**
   * Optional description or subtitle
   */
  description?: string;
}

================
File: src/components/composite/navigation/nav-menu/index.tsx
================
//src/components/composite/navigation/nav-menu/index.tsx
// Path: src/components/composite/navigation/nav-menu/index.tsx
"use client";

import * as React from "react";
import Link from "next/link";
import { ExternalLink } from "lucide-react";
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuList,
  NavigationMenuTrigger,
} from "@/components/ui/navigation-menu";
import { cn } from "@/lib/utils";
import type { NavMenuProps, NavMenuItem } from "./types";

type ListItemProps = {
  item: NavMenuItem;
  showIcons?: boolean;
  className?: string;
};

function renderContent(props: ListItemProps) {
  const { className, item, showIcons } = props;
  return (
    <div
      className={cn(
        "block select-none space-y-1 rounded-md p-3 leading-none",
        item.disabled && "pointer-events-none opacity-50",
        className,
      )}
    >
      <div className="flex items-center gap-2">
        {showIcons && item.icon && <span className="h-4 w-4">{item.icon}</span>}
        <span className="text-sm font-medium leading-none">{item.label}</span>
        {item.isExternal && <ExternalLink className="h-3 w-3" />}
      </div>
      {item.description && (
        <p className="line-clamp-2 text-sm leading-snug text-muted-foreground">
          {item.description}
        </p>
      )}
    </div>
  );
}

const ListItem: React.FC<ListItemProps> = (props) => {
  const content = renderContent(props);
  const { item } = props;

  if (!item.href) {
    return (
      <button
        onClick={item.onClick}
        className={cn(
          "w-full text-left",
          item.disabled && "cursor-not-allowed",
        )}
        disabled={item.disabled}
      >
        {content}
      </button>
    );
  }

  if (item.isExternal) {
    return React.createElement("a", {
      href: item.href,
      target: "_blank",
      rel: "noopener noreferrer",
      className: cn("cursor-pointer", item.disabled && "cursor-not-allowed"),
      children: content,
    });
  }

  return React.createElement(Link, {
    href: item.href,
    className: cn("cursor-pointer", item.disabled && "cursor-not-allowed"),
    children: content,
  });
};

function NavMenu(props: NavMenuProps) {
  const {
    trigger,
    items,
    side = "bottom",
    align = "center",
    defaultOpen,
    showIcons = true,
    className,
    ...rest
  } = props;

  return React.createElement(
    NavigationMenu,
    {
      defaultValue: defaultOpen ? "visible" : undefined,
      className,
      ...rest,
    },
    React.createElement(
      NavigationMenuList,
      null,
      React.createElement(
        NavigationMenuItem,
        null,
        React.createElement(NavigationMenuTrigger, null, trigger),
        React.createElement(
          NavigationMenuContent,
          null,
          React.createElement(
            "ul",
            {
              className: "grid w-[400px] gap-1 p-4 md:w-[500px] md:grid-cols-2",
            },
            items.map((item) =>
              React.createElement(
                "li",
                { key: item.label },
                React.createElement(ListItem, { item, showIcons }),
              ),
            ),
          ),
        ),
      ),
    ),
  );
}

// Add named export alongside default export
export { NavMenu };
export default NavMenu;

================
File: src/components/composite/navigation/nav-menu/nav-menu.test.tsx
================
// src/components/composite/navigation/nav-menu/nav-menu.test.tsx
import React from "react";
import { render, screen, waitFor, within } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { Home, Info } from "lucide-react";
import { NavMenu } from "./index";
import { ThemeProvider } from "@/components/theme-provider";

const mockItems = [
  {
    label: "Home",
    href: "/",
    icon: <Home className="h-4 w-4" data-testid="home-icon" />,
    description: "Go to home page",
  },
  {
    label: "About",
    href: "/about",
    icon: <Info className="h-4 w-4" data-testid="about-icon" />,
    description: "Learn more about us",
    isExternal: true,
  },
  {
    label: "Click Me",
    onClick: jest.fn(),
    description: "Button item",
  },
];

describe("NavMenu Component", () => {
  const renderNavMenu = (props = {}) => {
    return render(
      <ThemeProvider>
        <NavMenu trigger="Menu" items={mockItems} {...props} />
      </ThemeProvider>,
    );
  };

  it("renders the trigger button", () => {
    renderNavMenu();
    expect(screen.getByText("Menu")).toBeInTheDocument();
  });

  it("shows menu items when trigger is clicked", async () => {
    const user = userEvent.setup();
    renderNavMenu();

    const trigger = screen.getByText("Menu");
    await user.click(trigger);

    await waitFor(() => {
      mockItems.forEach((item) => {
        expect(screen.getByText(item.label)).toBeInTheDocument();
        if (item.description) {
          expect(screen.getByText(item.description)).toBeInTheDocument();
        }
      });
    });
  });

  it("renders external links with external icon", async () => {
    const user = userEvent.setup();
    renderNavMenu();

    await user.click(screen.getByText("Menu"));

    await waitFor(() => {
      const externalItem = mockItems.find((item) => item.isExternal);
      const externalLink = screen.getByText(externalItem!.label).closest("a");
      expect(externalLink).toHaveAttribute("target", "_blank");
      expect(externalLink).toHaveAttribute("rel", "noopener noreferrer");
    });
  });

  it("renders internal links correctly", async () => {
    const user = userEvent.setup();
    renderNavMenu();

    await user.click(screen.getByText("Menu"));

    await waitFor(() => {
      const internalItem = mockItems.find(
        (item) => item.href && !item.isExternal,
      );
      const internalLink = screen.getByText(internalItem!.label).closest("a");
      expect(internalLink).toHaveAttribute("href", internalItem!.href);
      expect(internalLink).not.toHaveAttribute("target");
    });
  });

  it("handles button items with onClick", async () => {
    const user = userEvent.setup();
    renderNavMenu();

    await user.click(screen.getByText("Menu"));

    await waitFor(async () => {
      const buttonItem = mockItems.find((item) => item.onClick);
      const button = screen.getByText(buttonItem!.label);
      await user.click(button);
      expect(buttonItem!.onClick).toHaveBeenCalled();
    });
  });

  it("shows icons when showIcons is true", async () => {
    const user = userEvent.setup();
    renderNavMenu({ showIcons: true });

    await user.click(screen.getByText("Menu"));

    await waitFor(() => {
      // Look for SVG elements with specific classes
      const homeIcon = screen.getByTestId("home-icon");
      const infoIcon = screen.getByTestId("about-icon");
      expect(homeIcon).toBeInTheDocument();
      expect(infoIcon).toBeInTheDocument();
    });
  });

  it("hides icons when showIcons is false", async () => {
    const user = userEvent.setup();
    renderNavMenu({ showIcons: false });

    await user.click(screen.getByText("Menu"));

    await waitFor(() => {
      // Check that no icon containers are present
      const iconContainers = screen.queryAllByTestId(/^.*-icon$/);
      expect(iconContainers).toHaveLength(0);
    });
  });
});

================
File: src/components/composite/navigation/nav-menu/types.ts
================
// src/components/composite/navigation/nav-menu/types.ts
import { MouseEventHandler } from "react";
import { NavigationMenuProps as RadixNavigationMenuProps } from "@radix-ui/react-navigation-menu";

export interface NavMenuItem {
  label: string;
  href?: string;
  icon?: React.ReactNode;
  description?: string;
  isExternal?: boolean;
  disabled?: boolean;
  onClick?: MouseEventHandler<HTMLButtonElement | HTMLAnchorElement>;
}

export interface NavMenuProps
  extends Omit<RadixNavigationMenuProps, "children"> {
  trigger: React.ReactNode;
  items: NavMenuItem[];
  side?: "top" | "right" | "bottom" | "left";
  align?: "start" | "center" | "end";
  defaultOpen?: boolean;
  showIcons?: boolean;
  className?: string;
}

================
File: src/components/contact/ContactForm.tsx
================
// src/components/contact/ContactForm.tsx
"use client";
import { useState, useEffect } from "react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { tracking, DeviceFingerprint } from "@/lib/tracking";
import { DeviceInfo, UserIdentity } from "@/lib/tracking/types";
import { cn } from "@/lib/utils";

// Add API endpoint configuration
const API_ENDPOINT = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";

type FormData = {
  firstName: string;
  lastName: string;
  email: string;
  company: string;
  phone: string;
  message: string;
};

type FormErrors = {
  [key in keyof FormData]?: string;
};

type TrackingData = {
  deviceInfo: DeviceInfo | null;
  identity: UserIdentity | null;
  sessionId: string | null;
};

export default function ContactForm() {
  const [formData, setFormData] = useState<FormData>({
    firstName: "",
    lastName: "",
    email: "",
    company: "",
    phone: "",
    message: "",
  });

  const [trackingData, setTrackingData] = useState<TrackingData>({
    deviceInfo: null,
    identity: null,
    sessionId: null,
  });

  const [errors, setErrors] = useState<FormErrors>({});
  const [status, setStatus] = useState<
    "idle" | "validating" | "submitting" | "success" | "error"
  >("idle");
  const [feedback, setFeedback] = useState<{
    type: "success" | "error" | "info" | null;
    message: string;
  }>({ type: null, message: "" });

  // Initialize tracking data when component mounts
  useEffect(() => {
    const initializeTracking = async () => {
      try {
        await tracking.initialize();
        const deviceFP = DeviceFingerprint.getInstance();
        const deviceInfo = await deviceFP.getDeviceInfo();

        setTrackingData({
          deviceInfo,
          identity: null,
          sessionId: null,
        });
      } catch (error) {
        console.error("Failed to initialize tracking:", error);
      }
    };

    initializeTracking();
  }, []);

  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};
    let isValid = true;

    // Show validation in progress
    setStatus("validating");

    // First Name validation
    if (!formData.firstName.trim()) {
      newErrors.firstName = "First name is required";
      isValid = false;
    }

    // Last Name validation
    if (!formData.lastName.trim()) {
      newErrors.lastName = "Last name is required";
      isValid = false;
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!formData.email.trim()) {
      newErrors.email = "Email is required";
      isValid = false;
    } else if (!emailRegex.test(formData.email)) {
      newErrors.email = "Please enter a valid email address";
      isValid = false;
    }

    // Message validation
    if (!formData.message.trim()) {
      newErrors.message = "Message is required";
      isValid = false;
    } else if (formData.message.length < 10) {
      newErrors.message = "Message must be at least 10 characters long";
      isValid = false;
    }

    // Phone validation (optional but must be valid if provided)
    if (formData.phone.trim() && !/^[\d\s\-+()]*$/.test(formData.phone)) {
      newErrors.phone = "Please enter a valid phone number";
      isValid = false;
    }

    setErrors(newErrors);
    setStatus("idle");
    return isValid;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      tracking.trackEvent("form_validation_failed", {
        form: "contact",
        errors: Object.keys(errors),
      });
      setFeedback({
        type: "error",
        message: "Please correct the errors before submitting.",
      });
      return;
    }

    setStatus("submitting");
    setFeedback({ type: null, message: "" });

    try {
      tracking.trackEvent("form_submission_started", {
        form: "contact",
      });

      const response = await fetch(`${API_ENDPOINT}/api/leads/contact-form/`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          ...formData,
          tracking: {
            deviceId: trackingData.deviceInfo?.deviceId,
            deviceInfo: trackingData.deviceInfo,
            identity: trackingData.identity,
            sessionId: trackingData.sessionId,
          },
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Something went wrong");
      }

      tracking.trackEvent("form_submission_success", {
        form: "contact",
      });

      // If we have an email, identify the user
      if (formData.email) {
        tracking.identifyUser(formData.email, {
          firstName: formData.firstName,
          lastName: formData.lastName,
          company: formData.company,
        });
      }

      setStatus("success");
      setFeedback({
        type: "success",
        message: "Thank you for your message. We'll be in touch soon!",
      });
      setFormData({
        firstName: "",
        lastName: "",
        email: "",
        company: "",
        phone: "",
        message: "",
      });
    } catch (error) {
      tracking.trackEvent("form_submission_failed", {
        form: "contact",
        error: error instanceof Error ? error.message : "Unknown error",
      });

      setStatus("error");
      setFeedback({
        type: "error",
        message:
          error instanceof Error
            ? error.message
            : "There was an error sending your message. Please try again.",
      });
    }
  };

  return (
    <form
      className="bg-white p-6 rounded-lg shadow-sm space-y-6"
      onSubmit={handleSubmit}
    >
      {feedback.type && (
        <Alert
          variant={feedback.type === "error" ? "destructive" : "default"}
          className={cn(
            feedback.type === "success" &&
              "border-green-500 text-green-700 bg-green-50",
            feedback.type === "info" &&
              "border-blue-500 text-blue-700 bg-blue-50",
          )}
        >
          <AlertDescription>{feedback.message}</AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* First Name Field */}
        <div className="relative">
          <label
            htmlFor="firstName"
            className="block text-sm font-medium text-gray-700"
          >
            First Name *
          </label>
          <input
            type="text"
            id="firstName"
            name="firstName"
            value={formData.firstName}
            onChange={(e) => {
              setFormData((prev) => ({
                ...prev,
                firstName: e.target.value,
              }));
              if (errors.firstName) {
                setErrors((prev) => ({
                  ...prev,
                  firstName: undefined,
                }));
              }
            }}
            className={`mt-1 block w-full rounded-md border
                            ${errors.firstName ? "border-red-500" : "border-gray-300"}
                            px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500
                        `}
            required
          />
          {errors.firstName && (
            <p className="mt-1 text-sm text-red-600">{errors.firstName}</p>
          )}
        </div>

        {/* Last Name Field */}
        <div className="relative">
          <label
            htmlFor="lastName"
            className="block text-sm font-medium text-gray-700"
          >
            Last Name *
          </label>
          <input
            type="text"
            id="lastName"
            name="lastName"
            value={formData.lastName}
            onChange={(e) => {
              setFormData((prev) => ({
                ...prev,
                lastName: e.target.value,
              }));
              if (errors.lastName) {
                setErrors((prev) => ({
                  ...prev,
                  lastName: undefined,
                }));
              }
            }}
            className={`mt-1 block w-full rounded-md border
                            ${errors.lastName ? "border-red-500" : "border-gray-300"}
                            px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500
                        `}
            required
          />
          {errors.lastName && (
            <p className="mt-1 text-sm text-red-600">{errors.lastName}</p>
          )}
        </div>
      </div>

      {/* Email Field */}
      <div className="relative">
        <label
          htmlFor="email"
          className="block text-sm font-medium text-gray-700"
        >
          Email *
        </label>
        <input
          type="email"
          id="email"
          name="email"
          value={formData.email}
          onChange={(e) => {
            setFormData((prev) => ({
              ...prev,
              email: e.target.value,
            }));
            if (errors.email) {
              setErrors((prev) => ({
                ...prev,
                email: undefined,
              }));
            }
          }}
          className={`mt-1 block w-full rounded-md border
                        ${errors.email ? "border-red-500" : "border-gray-300"}
                        px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500
                    `}
          required
        />
        {errors.email && (
          <p className="mt-1 text-sm text-red-600">{errors.email}</p>
        )}
      </div>

      {/* Company Field */}
      <div className="relative">
        <label
          htmlFor="company"
          className="block text-sm font-medium text-gray-700"
        >
          Company
        </label>
        <input
          type="text"
          id="company"
          name="company"
          value={formData.company}
          onChange={(e) =>
            setFormData((prev) => ({
              ...prev,
              company: e.target.value,
            }))
          }
          className="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500"
        />
      </div>

      {/* Phone Field */}
      <div className="relative">
        <label
          htmlFor="phone"
          className="block text-sm font-medium text-gray-700"
        >
          Phone (optional)
        </label>
        <input
          type="tel"
          id="phone"
          name="phone"
          value={formData.phone}
          onChange={(e) => {
            setFormData((prev) => ({
              ...prev,
              phone: e.target.value,
            }));
            if (errors.phone) {
              setErrors((prev) => ({
                ...prev,
                phone: undefined,
              }));
            }
          }}
          className={`mt-1 block w-full rounded-md border
                        ${errors.phone ? "border-red-500" : "border-gray-300"}
                        px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500
                    `}
        />
        {errors.phone && (
          <p className="mt-1 text-sm text-red-600">{errors.phone}</p>
        )}
      </div>

      {/* Message Field */}
      <div className="relative">
        <label
          htmlFor="message"
          className="block text-sm font-medium text-gray-700"
        >
          Message *
        </label>
        <textarea
          id="message"
          name="message"
          value={formData.message}
          onChange={(e) => {
            setFormData((prev) => ({
              ...prev,
              message: e.target.value,
            }));
            if (errors.message) {
              setErrors((prev) => ({
                ...prev,
                message: undefined,
              }));
            }
          }}
          rows={4}
          className={`mt-1 block w-full rounded-md border
                        ${errors.message ? "border-red-500" : "border-gray-300"}
                        px-3 py-2 focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500
                    `}
          required
        />
        {errors.message && (
          <p className="mt-1 text-sm text-red-600">{errors.message}</p>
        )}
      </div>

      <button
        type="submit"
        disabled={status === "submitting"}
        className={`w-full ${
          status === "submitting"
            ? "bg-blue-400 cursor-not-allowed"
            : "bg-blue-600 hover:bg-blue-700"
        } text-white px-4 py-2 rounded-md transition-colors duration-200
                focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`}
      >
        {status === "submitting" ? (
          <span className="flex items-center justify-center">
            <svg
              className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              ></circle>
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
            Sending...
          </span>
        ) : (
          "Send Message"
        )}
      </button>
    </form>
  );
}

================
File: src/components/contact/ContactInfo.tsx
================
// src/components/contact/ContactInfo.tsx
export default function ContactInfo() {
  return (
    <div className="bg-white p-6 rounded-lg shadow-sm">
      <h2 className="text-2xl font-bold text-gray-900 mb-6">Get in Touch</h2>

      <div className="space-y-4">
        <div>
          <h3 className="text-lg font-semibold text-gray-900">Location</h3>
          <p className="text-gray-600">Virtual Office - Northern Colorado</p>
        </div>

        <div>
          <h3 className="text-lg font-semibold text-gray-900">Email</h3>
          <a
            href="mailto:wwalters@neuralnexusstrategies.ai"
            className="text-blue-600 hover:text-blue-800"
          >
            wwalters@neuralnexusstrategies.ai
          </a>
        </div>

        <div>
          <h3 className="text-lg font-semibold text-gray-900">Hours</h3>
          <p className="text-gray-600">
            Monday - Friday: 9:00 AM - 5:00 PM MST
          </p>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/contact/FAQ.tsx
================
// src/components/contact/FAQ.tsx
import Link from "next/link";

export default function FAQ() {
    const faqs = [
        {
            question: "What services do you offer?",
            answer: (
                <>
                    We provide{" "}
                    <Link
                        href="/services/fractional-cdo"
                        className="text-blue-600 hover:text-blue-800"
                    >
                        Fractional CDO Services
                    </Link>
                    ,{" "}
                    <Link
                        href="/services/data-strategy"
                        className="text-blue-600 hover:text-blue-800"
                    >
                        Data Strategy Consulting
                    </Link>
                    , and{" "}
                    <Link
                        href="/services/ai-readiness"
                        className="text-blue-600 hover:text-blue-800"
                    >
                        AI Readiness Assessments
                    </Link>{" "}
                    to help organizations leverage their data assets
                    effectively.
                </>
            ),
        },
        {
            question: "How does the virtual consultation process work?",
            answer: "We begin with a discovery call to understand your needs, followed by a detailed assessment of your current data landscape. All meetings are conducted virtually via secure video conferencing.",
        },
        {
            question: "What industries do you serve?",
            answer: "We work with organizations across various industries, including healthcare, manufacturing, financial services, and technology companies of all sizes.",
        },
        {
            question: "How long does a typical engagement last?",
            answer: "Engagement lengths vary based on your needs. Fractional CDO services are typically ongoing relationships, while strategy consulting projects usually range from 2-6 months.",
        },
    ];

    return (
        <div className="bg-white p-6 rounded-lg shadow-sm">
            <h2 className="text-3xl font-bold text-gray-900 mb-8">
                Frequently Asked Questions
            </h2>
            <div className="space-y-6">
                {faqs.map((faq, index) => (
                    <div key={index}>
                        <h3 className="text-lg font-semibold text-gray-900 mb-2">
                            {faq.question}
                        </h3>
                        <div className="text-gray-600">{faq.answer}</div>
                    </div>
                ))}
            </div>
        </div>
    );
}

================
File: src/components/diagnostic/api-test.tsx
================
// Path: neural_nexus_frontend/src/components/diagnostic/api-test.tsx

"use client";

import { useState, useEffect } from "react";

interface EndpointStatus {
  endpoint: string;
  status: "loading" | "success" | "error";
  error?: string;
}

export default function APITest() {
  const [statuses, setStatuses] = useState<EndpointStatus[]>([]);

  const endpoints = [
    "/api/blog/posts/",
    "/api/case-studies/",
    "/api/services/",
  ];

  useEffect(() => {
    const testEndpoints = async () => {
      const results = await Promise.all(
        endpoints.map(async (endpoint) => {
          try {
            const response = await fetch(endpoint);
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            return {
              endpoint,
              status: "success" as const,
            };
          } catch (error) {
            return {
              endpoint,
              status: "error" as const,
              error: error instanceof Error ? error.message : "Unknown error",
            };
          }
        }),
      );
      setStatuses(results);
    };

    testEndpoints();
  }, []);

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4">API Endpoint Status</h2>
      <div className="space-y-4">
        {statuses.map((status) => (
          <div key={status.endpoint} className="p-4 rounded-lg border">
            <p className="font-medium">{status.endpoint}</p>
            <p
              className={`mt-2 ${
                status.status === "success"
                  ? "text-green-600"
                  : status.status === "error"
                    ? "text-red-600"
                    : "text-yellow-600"
              }`}
            >
              Status: {status.status}
            </p>
            {status.error && (
              <p className="mt-2 text-sm text-red-600">Error: {status.error}</p>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}

================
File: src/components/examples/signup-form.tsx
================
"use client";

import { useState } from "react";
import { FormSection } from "@/components/composite/form/form-section";
import { FormField } from "@/components/composite/form/form-field";
import { FormSubmit } from "@/components/composite/form/form-submit";
import { Input } from "@/components/ui/input";
import { useFormValidation, FormData } from "@/hooks/use-form-validation";

export function SignupForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useFormValidation();

  const onSubmit = async (data: FormData) => {
    setIsSubmitting(true);
    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1500));
      console.log("Form submitted:", data);
      alert("Form submitted successfully!");
      reset();
    } catch (error) {
      console.error("Error submitting form:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className="w-full max-w-[600px] rounded-lg border p-6 shadow-sm"
    >
      <FormSection
        title="Create Account"
        description="Please fill out your information to get started"
        divider={false}
      >
        <FormField label="Full Name" required error={errors.name?.message}>
          <Input {...register("name")} placeholder="Enter your full name" />
        </FormField>

        <FormField
          label="Email"
          required
          error={errors.email?.message}
          description="We'll never share your email"
        >
          <Input
            {...register("email")}
            type="email"
            placeholder="Enter your email"
          />
        </FormField>
      </FormSection>

      <FormSection
        title="Security"
        description="Choose a strong password for your account"
      >
        <FormField
          label="Password"
          required
          error={errors.password?.message}
          description="Must be at least 8 characters with uppercase, lowercase, and numbers"
        >
          <Input
            {...register("password")}
            type="password"
            placeholder="Choose a password"
          />
        </FormField>

        <FormField
          label="Confirm Password"
          required
          error={errors.confirmPassword?.message}
        >
          <Input
            {...register("confirmPassword")}
            type="password"
            placeholder="Confirm your password"
          />
        </FormField>
      </FormSection>

      <FormSubmit
        submitText="Create Account"
        showReset
        isSubmitting={isSubmitting}
        onReset={() => reset()}
        align="right"
        className="mt-6"
      />
    </form>
  );
}

================
File: src/components/features/booking/BookDiscoveryButton.tsx
================
// src/components/features/booking/BookDiscoveryButton.tsx
// Path: src/components/features/booking/BookDiscoveryButton.tsx
"use client";
import dynamic from "next/dynamic";
import { Button, ButtonProps } from "@/components/ui/button";

const Script = dynamic(() => import("next/script"), {
  ssr: false,
});

export function BookDiscoveryButton(props: ButtonProps) {
  return (
    <>
      <Script
        src="https://assets.calendly.com/assets/external/widget.js"
        onError={(e) => console.error("Calendly script failed to load:", e)}
        onLoad={() => console.log("Calendly script loaded successfully")}
      />
      <Button
        {...props}
        onClick={() => {
          try {
            window.open(
              "https://calendly.com/wwalters-neuralnexusstrategies",
              "_blank",
            );
          } catch (error) {
            console.error("Failed to open Calendly:", error);
          }
        }}
      >
        Book Discovery Call
      </Button>
    </>
  );
}

================
File: src/components/features/booking/BookDiscoveryCall.tsx
================
// src/components/features/booking/BookDiscoveryCall.tsx
"use client";

import { useEffect } from "react";
import { Button, ButtonProps } from "@/components/ui/button";

interface BookDiscoveryButtonProps extends Omit<ButtonProps, "onClick"> {
  calendlyUrl?: string;
  text?: string;
}

export function BookDiscoveryButton({
  text = "Book Discovery Call",
  calendlyUrl = "https://calendly.com/neuralnexus/discovery",
  variant = "default",
  size = "lg",
  className,
  ...props
}: BookDiscoveryButtonProps) {
  useEffect(() => {
    const loadCalendly = async () => {
      const head = document.querySelector("head");
      if (!document.getElementById("calendly-script")) {
        const script = document.createElement("script");
        script.id = "calendly-script";
        script.src = "https://assets.calendly.com/assets/external/widget.js";
        head?.appendChild(script);
      }
    };
    loadCalendly();
  }, []);

  const openCalendly = () => {
    if ((window as any).Calendly) {
      (window as any).Calendly.initPopupWidget({ url: calendlyUrl });
    }
  };

  return (
    <Button
      onClick={openCalendly}
      variant={variant}
      size={size}
      className={className}
      {...props}
    >
      {text}
    </Button>
  );
}

================
File: src/components/features/calculators/ROICalculator/index.tsx
================
// src/components/features/calculators/ROICalculator/index.tsx
import React, { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { cn } from "@/lib/utils";
import { ROICalculatorProps, ROIFormData } from "./types";

export const ROICalculator: React.FC<ROICalculatorProps> = ({
  onCalculate,
  className,
}) => {
  const [formData, setFormData] = useState<ROIFormData>({
    investment: 0,
    returns: 0,
  });
  const [roi, setRoi] = useState<number | null>(null);

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const { investment, returns } = formData;

    if (investment > 0) {
      const calculatedRoi = ((returns - investment) / investment) * 100;
      setRoi(calculatedRoi);
      onCalculate?.(calculatedRoi);
    }
  };

  const handleInputChange =
    (field: keyof ROIFormData) => (e: React.ChangeEvent<HTMLInputElement>) => {
      setFormData((prev) => ({
        ...prev,
        [field]: Number(e.target.value),
      }));
    };

  return (
    <div className={cn("w-full max-w-md space-y-6", className)}>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="investment">Initial Investment</Label>
          <Input
            id="investment"
            type="number"
            value={formData.investment}
            onChange={handleInputChange("investment")}
            placeholder="Enter initial investment"
            min="0"
            required
            aria-describedby="investment-description"
          />
          <p
            id="investment-description"
            className="text-sm text-muted-foreground"
          >
            Enter the amount you plan to invest
          </p>
        </div>

        <div className="space-y-2">
          <Label htmlFor="returns">Expected Returns</Label>
          <Input
            id="returns"
            type="number"
            value={formData.returns}
            onChange={handleInputChange("returns")}
            placeholder="Enter expected returns"
            min="0"
            required
            aria-describedby="returns-description"
          />
          <p id="returns-description" className="text-sm text-muted-foreground">
            Enter the expected total return amount
          </p>
        </div>

        <Button type="submit" className="w-full">
          Calculate ROI
        </Button>

        {roi !== null && (
          <div
            className="mt-6 p-4 rounded-lg bg-muted"
            role="status"
            aria-live="polite"
          >
            <p className="text-lg font-semibold">ROI: {roi.toFixed(2)}%</p>
            <p className="text-sm text-muted-foreground">
              Based on an investment of ${formData.investment} with expected
              returns of ${formData.returns}
            </p>
          </div>
        )}
      </form>
    </div>
  );
};

export default ROICalculator;

================
File: src/components/features/calculators/ROICalculator/roi-calculator.styles.ts
================
// src/components/features/calculators/roi-calculator/roi-calculator.styles.ts
import styled from "styled-components";

export const StyledCalculator = styled.div`
  display: flex;
  flex-direction: column;
  gap: var(--spacing-4);
  width: 100%;
  max-width: 480px;
`;

export const ResultDisplay = styled.div`
  padding: var(--spacing-4);
  background: var(--color-navy-50);
  border-radius: var(--radius-md);
  margin-top: var(--spacing-4);
`;

export const FieldGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: var(--spacing-2);
`;

================
File: src/components/features/calculators/ROICalculator/roi-calculator.test.tsx
================
// src/components/features/calculators/ROICalculator/roi-calculator.test.tsx
import React from "react";
import { render, screen, waitFor } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { ThemeProvider } from "@/components/theme-provider";
import { ROICalculator } from "./index";

const renderWithTheme = (ui: React.ReactElement) => {
  return render(
    <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
      {ui}
    </ThemeProvider>,
  );
};

describe("ROICalculator", () => {
  it("renders all form elements correctly", () => {
    renderWithTheme(<ROICalculator />);

    expect(screen.getByLabelText(/initial investment/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/expected returns/i)).toBeInTheDocument();
    expect(
      screen.getByRole("button", { name: /calculate roi/i }),
    ).toBeInTheDocument();
  });

  it("calculates ROI correctly", async () => {
    const user = userEvent.setup();
    const onCalculate = jest.fn();
    renderWithTheme(<ROICalculator onCalculate={onCalculate} />);

    await user.type(screen.getByLabelText(/initial investment/i), "1000");
    await user.type(screen.getByLabelText(/expected returns/i), "1500");
    await user.click(screen.getByRole("button", { name: /calculate roi/i }));

    await waitFor(() => {
      expect(screen.getByText(/ROI: 50.00%/)).toBeInTheDocument();
      expect(onCalculate).toHaveBeenCalledWith(50);
    });
  });

  it("handles form validation", async () => {
    const user = userEvent.setup();
    renderWithTheme(<ROICalculator />);

    // Try to submit without filling in the form
    await user.click(screen.getByRole("button", { name: /calculate roi/i }));
    expect(screen.queryByRole("status")).not.toBeInTheDocument();

    // Enter invalid investment (0)
    await user.type(screen.getByLabelText(/initial investment/i), "0");
    await user.type(screen.getByLabelText(/expected returns/i), "100");
    await user.click(screen.getByRole("button", { name: /calculate roi/i }));
    expect(screen.queryByRole("status")).not.toBeInTheDocument();
  });

  it("updates calculation when inputs change", async () => {
    const user = userEvent.setup();
    renderWithTheme(<ROICalculator />);

    // Initial calculation
    await user.type(screen.getByLabelText(/initial investment/i), "1000");
    await user.type(screen.getByLabelText(/expected returns/i), "1500");
    await user.click(screen.getByRole("button", { name: /calculate roi/i }));

    expect(screen.getByText(/ROI: 50.00%/)).toBeInTheDocument();

    // Update values
    await user.clear(screen.getByLabelText(/initial investment/i));
    await user.clear(screen.getByLabelText(/expected returns/i));
    await user.type(screen.getByLabelText(/initial investment/i), "2000");
    await user.type(screen.getByLabelText(/expected returns/i), "3000");
    await user.click(screen.getByRole("button", { name: /calculate roi/i }));

    await waitFor(() => {
      expect(screen.getByText(/ROI: 50.00%/)).toBeInTheDocument();
    });
  });
});

================
File: src/components/features/calculators/ROICalculator/types.ts
================
// Path: neural_nexus_frontend/src/components/features/calculators/ROICalculator/types.ts

export interface ROICalculatorProps {
  onCalculate?: (roi: number) => void;
  className?: string;
}

export interface ROIFormData {
  investment: number;
  returns: number;
}

================
File: src/components/landing-page/sections/CtaDownload.tsx
================
// src/components/landing-page/sections/CtaDownload.tsx
//
import { useState } from "react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { cn } from "@/lib/utils";

interface CtaDownloadProps {
  content: {
    headline: string;
    description: string;
    image: string;
    form: {
      title: string;
      fields: Array<{
        type: string;
        name: string;
        label: string;
        required: boolean;
      }>;
      submitText: string;
    };
  };
}

export function CtaDownload({ content }: CtaDownloadProps) {
  const [formData, setFormData] = useState<Record<string, string>>({});
  const [status, setStatus] = useState<
    "idle" | "submitting" | "success" | "error"
  >("idle");
  const [feedback, setFeedback] = useState<{
    type: "success" | "error" | "info" | null;
    message: string;
  }>({ type: null, message: "" });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus("submitting");
    setFeedback({ type: null, message: "" });

    try {
      const response = await fetch("/api/leads/resource-download/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Something went wrong");
      }

      setStatus("success");
      setFeedback({
        type: "success",
        message: "Your download is ready! Check your email for the guide.",
      });
      setFormData({});
    } catch (error) {
      setStatus("error");
      setFeedback({
        type: "error",
        message:
          error instanceof Error ? error.message : "Failed to process download",
      });
    }
  };

  return (
    <section className="bg-gray-50 py-16" id="download-form">
      <div className="container mx-auto px-4">
        <div className="grid md:grid-cols-2 gap-12 items-center">
          <div>
            <h2 className="text-3xl font-bold mb-4">{content.headline}</h2>
            <p className="text-lg text-gray-600 mb-6">{content.description}</p>
            <img
              src="/api/placeholder/400/600" // Using your placeholder API
              alt="Whitepaper Preview"
              className="rounded-lg shadow-md"
            />
          </div>
          <div className="bg-white p-8 rounded-lg shadow-md">
            <h3 className="text-2xl font-semibold mb-6">
              {content.form.title}
            </h3>

            {feedback.type && (
              <Alert
                variant={feedback.type === "error" ? "destructive" : "default"}
                className={cn(
                  "mb-6",
                  feedback.type === "success" &&
                    "border-green-500 text-green-700 bg-green-50",
                  feedback.type === "info" &&
                    "border-blue-500 text-blue-700 bg-blue-50",
                )}
              >
                <AlertDescription>{feedback.message}</AlertDescription>
              </Alert>
            )}

            <form onSubmit={handleSubmit} className="space-y-4">
              {content.form.fields.map((field, index) => (
                <div key={index}>
                  <label
                    htmlFor={field.name}
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    {field.label} {field.required && "*"}
                  </label>
                  <input
                    type={field.type}
                    id={field.name}
                    name={field.name}
                    required={field.required}
                    value={formData[field.name] || ""}
                    onChange={(e) =>
                      setFormData((prev) => ({
                        ...prev,
                        [field.name]: e.target.value,
                      }))
                    }
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-primary-500 focus:border-primary-500"
                  />
                </div>
              ))}
              <button
                type="submit"
                disabled={status === "submitting"}
                className={`w-full ${
                  status === "submitting"
                    ? "bg-primary-400"
                    : "bg-primary-600 hover:bg-primary-700"
                } text-white px-6 py-3 rounded-md transition-colors duration-200`}
              >
                {status === "submitting"
                  ? "Processing..."
                  : content.form.submitText}
              </button>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
}

================
File: src/components/landing-page/sections/Hero.tsx
================
// src/components/landing-page/sections/Hero.tsx
interface HeroProps {
  content: {
    headline: string;
    subheadline: string;
    image: string;
    cta: {
      text: string;
      action: string;
    };
  };
}

export function Hero({ content }: HeroProps) {
  return (
    <section className="bg-gradient-to-r from-primary-900 to-primary-800 text-white">
      <div className="container mx-auto px-4 py-16 md:py-24">
        <div className="grid md:grid-cols-2 gap-8 items-center">
          <div>
            <h1 className="text-4xl md:text-5xl font-bold mb-4">
              {content.headline}
            </h1>
            <p className="text-xl mb-8 text-gray-200">{content.subheadline}</p>
            <button
              onClick={() => {
                if (content.cta.action === "scroll-to-form") {
                  // Add smooth scroll to form
                  document.getElementById("download-form")?.scrollIntoView({
                    behavior: "smooth",
                  });
                }
              }}
              className="bg-white text-primary-900 px-8 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors"
            >
              {content.cta.text}
            </button>
          </div>
          <div>
            <img
              src="/api/placeholder/800/600" // Using your placeholder API
              alt="AI Readiness"
              className="rounded-lg shadow-lg"
            />
          </div>
        </div>
      </div>
    </section>
  );
}

================
File: src/components/landing-page/sections/ValueProps.tsx
================
// src/components/landing-page/sections/ValueProps.tsx
//
import { LineChart, ClipboardList, Shield } from "lucide-react";

// Map icon names to Lucide components
const iconMap = {
  "chart-line": LineChart,
  "clipboard-list": ClipboardList,
  "shield-check": Shield,
};

interface ValuePropsProps {
  content: {
    items: Array<{
      title: string;
      description: string;
      icon: string;
    }>;
  };
}

export function ValueProps({ content }: ValuePropsProps) {
  return (
    <section className="bg-white py-16">
      <div className="container mx-auto px-4">
        <div className="grid md:grid-cols-3 gap-8">
          {content.items.map((item, index) => {
            const Icon = iconMap[item.icon as keyof typeof iconMap];

            return (
              <div key={index} className="bg-gray-50 p-6 rounded-lg">
                <div className="text-primary-600 mb-4">
                  {Icon && <Icon size={24} />}
                </div>
                <h3 className="text-xl font-semibold mb-2">{item.title}</h3>
                <p className="text-gray-600">{item.description}</p>
              </div>
            );
          })}
        </div>
      </div>
    </section>
  );
}

================
File: src/components/landing-page/LandingPage.tsx
================
// src/components/landing-page/LandingPage.tsx
import { Hero } from "./sections/Hero";
import { ValueProps } from "./sections/ValueProps";
import { CtaDownload } from "./sections/CtaDownload";

interface LandingPageProps {
  content: {
    sections: Array<{
      type: string;
      content: any;
    }>;
    meta: {
      title: string;
      description: string;
    };
  };
}

export default function LandingPage({ content }: LandingPageProps) {
  return (
    <div className="min-h-screen">
      {content.sections.map((section, index) => {
        switch (section.type) {
          case "hero":
            return <Hero key={index} content={section.content} />;
          case "value-props":
            return <ValueProps key={index} content={section.content} />;
          case "cta-download":
            return <CtaDownload key={index} content={section.content} />;
          default:
            return null;
        }
      })}
    </div>
  );
}

================
File: src/components/layout/Footer.tsx
================
// Path: neural_nexus_frontend/src/components/layout/Footer.tsx
"use client";
import Link from "next/link";

export default function Footer() {
  return (
    <footer className="bg-gray-900 text-white">
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div>
            <h3 className="font-bold text-lg mb-4">Services</h3>
            <ul className="space-y-2">
              <li>
                <Link
                  href="/services/fractional-cdo"
                  className="hover:text-blue-400"
                >
                  Fractional CDO
                </Link>
              </li>
              <li>
                <Link
                  href="/services/data-strategy"
                  className="hover:text-blue-400"
                >
                  Data Strategy
                </Link>
              </li>
              <li>
                <Link
                  href="/services/ai-readiness"
                  className="hover:text-blue-400"
                >
                  AI Readiness
                </Link>
              </li>
            </ul>
          </div>
          <div>
            <h3 className="font-bold text-lg mb-4">Resources</h3>
            <ul className="space-y-2">
              <li>
                <Link href="/blog" className="hover:text-blue-400">
                  Blog
                </Link>
              </li>
              <li>
                <Link href="/case-studies" className="hover:text-blue-400">
                  Case Studies
                </Link>
              </li>
              <li>
                <Link href="/resources" className="hover:text-blue-400">
                  Downloads
                </Link>
              </li>
            </ul>
          </div>
          <div>
            <h3 className="font-bold text-lg mb-4">Company</h3>
            <ul className="space-y-2">
              <li>
                <Link href="/about" className="hover:text-blue-400">
                  About Us
                </Link>
              </li>
              <li>
                <Link href="/contact" className="hover:text-blue-400">
                  Contact Us
                </Link>
              </li>
              <li>
                <Link href="/careers" className="hover:text-blue-400">
                  Careers
                </Link>
              </li>
            </ul>
          </div>
        </div>
        <div className="border-t border-gray-800 mt-8 pt-8 text-center">
          <p>
            &copy; {new Date().getFullYear()} Neural Nexus Strategies. All
            rights reserved.
          </p>
        </div>
      </div>
    </footer>
  );
}

================
File: src/components/layout/Header.tsx
================
// Path: neural_nexus_frontend/src/components/layout/Header.tsx
"use client";
import Link from "next/link";
import { tracking } from "@/lib/tracking";

export default function Header() {
  return (
    <header className="w-full bg-background border-b border-muted">
      <nav className="container mx-auto px-4 py-4">
        <div className="flex justify-between items-center">
          <Link
            href="/"
            onClick={() =>
              tracking.trackEvent("navigation_click", {
                from: window.location.pathname,
                to: "/",
                component: "header_logo",
              })
            }
            className="font-bold text-xl text-primary"
          >
            Neural Nexus Strategies
          </Link>
          <div className="space-x-6">
            {[
              { href: "/", text: "Home" },
              { href: "/services", text: "Services" },
              { href: "/services/fractional-cdo", text: "Fractional CDO" },
              { href: "/blog", text: "Blog" },
              { href: "/about", text: "About" },
              { href: "/contact", text: "Contact" },
            ].map((link) => (
              <Link
                key={link.href}
                href={link.href}
                className="text-muted-foreground hover:text-primary transition-colors"
              >
                {link.text}
              </Link>
            ))}
          </div>
        </div>
      </nav>
    </header>
  );
}

================
File: src/components/layout/Layout.tsx
================
// Path: src/components/layout/Layout.tsx
import { ReactNode } from "react";
import Header from "./Header";
import Footer from "./Footer";

interface LayoutProps {
  children: ReactNode;
}

export default function Layout({ children }: LayoutProps) {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow">{children}</main>
      <Footer />
    </div>
  );
}

================
File: src/components/layout/navigation-menu.tsx
================
// src/components/layout/navigation-menu.tsx
"use client";

import * as React from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";
import { tracking } from "@/lib/tracking";
import { Alert } from "@/components/ui/alert";

interface Service {
  id: number;
  category: number;
  name: string;
  slug: string;
  package_type: string;
  description: string;
  base_price: string;
  duration: string;
  is_active: boolean;
  features: Array<{
    id: number;
    name: string;
    description: string;
    is_highlighted: boolean;
    order: number;
  }>;
  deliverables: Array<{
    id: number;
    name: string;
    description: string;
    timeline: string;
    order: number;
  }>;
}

interface ServiceResponse {
  count: number;
  next: string | null;
  previous: string | null;
  results: Service[];
}

// ... other imports
console.log("NEXT_PUBLIC_API_URL:", process.env.NEXT_PUBLIC_API_URL); // Debug environment variable

export default function NavigationMenu() {
  console.log("NavigationMenu component starting");

  const pathname = usePathname();
  const [services, setServices] = React.useState<Service[]>([]);
  const [isLoading, setIsLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);

  // Debug renders - move this after state initialization
  React.useEffect(() => {
    console.log("NavigationMenu state:", {
      servicesCount: services?.length || 0,
      isLoading,
      error,
    });
  }, [services, isLoading, error]);

  React.useEffect(() => {
    console.log("NavigationMenu fetch useEffect running");

    const fetchServices = async () => {
      console.log("Starting fetchServices");
      try {
        const apiUrl = `${process.env.NEXT_PUBLIC_API_URL}/api/services/`;
        console.log("Fetching from URL:", apiUrl);

        const response = await fetch(apiUrl, {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        });

        console.log("Response received:", {
          status: response.status,
          ok: response.ok,
          statusText: response.statusText,
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("Raw data received:", data);

        if (data && data.results && Array.isArray(data.results)) {
          console.log("Setting services with:", data.results.length, "items");
          setServices(data.results);
        } else {
          console.error("Invalid data structure:", data);
          throw new Error("Invalid data structure received");
        }
      } catch (err) {
        console.error("Error in fetchServices:", err);
        setError(
          err instanceof Error ? err.message : "Failed to load services",
        );
        setServices([]);
      } finally {
        console.log("Setting isLoading to false");
        setIsLoading(false);
      }
    };

    fetchServices().catch((err) => {
      console.error("Uncaught error in fetchServices:", err);
    });

    return () => {
      console.log("NavigationMenu fetch useEffect cleanup");
    };
  }, []);

  // Debug renders
  console.log("NavigationMenu render:", {
    servicesCount: services.length,
    isLoading,
    error,
  });

  // Add effect to log state changes
  React.useEffect(() => {
    console.log("Services state updated:", services);
  }, [services]);

  React.useEffect(() => {
    console.log("Loading state updated:", isLoading);
  }, [isLoading]);

  // Add debug render information
  console.log("Current services state:", services);
  console.log("isLoading:", isLoading);
  console.log("error:", error);

  return (
    <NavigationMenuPrimitive.Root>
      <NavigationMenuPrimitive.List className="flex items-center gap-6">
        <NavigationMenuPrimitive.Item>
          <Link
            href="/services"
            className={cn(
              "group flex items-center gap-1 hover:text-primary-600",
              pathname === "/services" && "text-primary-600",
            )}
          >
            Services
            <ChevronDown className="h-4 w-4 transition-transform group-hover:rotate-180" />
          </Link>
          <NavigationMenuPrimitive.Content className="absolute bg-white p-4 shadow-lg rounded-lg min-w-[240px]">
            {isLoading ? (
              <div className="p-4 text-center">Loading services...</div>
            ) : error ? (
              <Alert variant="destructive" className="mb-4">
                {error}
              </Alert>
            ) : services && services.length > 0 ? (
              <>
                {services.map((service) => (
                  <Link
                    key={service.id}
                    href={`/services/${service.slug}`}
                    className="block p-3 hover:bg-gray-50 rounded-md transition-colors"
                  >
                    <div className="font-medium">{service.name}</div>
                    {service.description && (
                      <div className="text-sm text-gray-600 mt-1">
                        {service.description}
                      </div>
                    )}
                  </Link>
                ))}
                <div className="border-t mt-2 pt-2">
                  <Link
                    href="/services"
                    className="block p-3 text-primary-600 hover:bg-gray-50 rounded-md transition-colors"
                  >
                    View All Services →
                  </Link>
                </div>
              </>
            ) : (
              <div className="p-4 text-center">No services available</div>
            )}
          </NavigationMenuPrimitive.Content>
        </NavigationMenuPrimitive.Item>
        {/* ... rest of your navigation items ... */}
      </NavigationMenuPrimitive.List>
    </NavigationMenuPrimitive.Root>
  );
}

================
File: src/components/marketing/blog/blog-analytics.tsx
================
// src/components/marketing/blog/blog-analytics.tsx

"use client";

import { usePathname, useSearchParams } from "next/navigation";
import { useEffect } from "react";

interface AnalyticsEvent {
  category: string;
  action: string;
  label?: string;
  value?: number;
}

interface PageView {
  path: string;
  search?: string;
  title?: string;
}

export function BlogAnalytics() {
  const pathname = usePathname();
  const searchParams = useSearchParams();

  useEffect(() => {
    if (pathname) {
      trackPageView({
        path: pathname,
        search: searchParams?.toString() ?? "", // Add null check with default empty string
        title: "Blog",
      });
    }
  }, [pathname, searchParams]);

  return null;
}

// Renamed from trackEvent to trackAnalyticsEvent to avoid conflict
function trackPageView({ path, search, title }: PageView) {
  if (typeof window !== "undefined") {
    window.gtag?.("event", "page_view", {
      page_path: path,
      page_search: search,
      page_title: title,
    });
  }
}

// Moved to separate analytics utility file
// src/lib/analytics/index.ts
export function trackBlogEvent({
  category,
  action,
  label,
  value,
}: AnalyticsEvent) {
  if (typeof window !== "undefined") {
    window.gtag?.("event", action, {
      event_category: category,
      event_label: label,
      value: value,
    });
  }
}

================
File: src/components/marketing/blog/blog-breadcrumb.tsx
================
// src/components/marketing/blog/blog-breadcrumb.tsx

import * as React from "react";
import Link from "next/link";
import { ChevronRight, Home } from "lucide-react";
import { cn } from "@/lib/utils";

interface BreadcrumbItem {
    label: string;
    href?: string;
}

interface BlogBreadcrumbProps {
    items: BreadcrumbItem[];
    className?: string;
}

export function BlogBreadcrumb({ items, className }: BlogBreadcrumbProps) {
    return (
        <nav
            aria-label="Breadcrumb"
            className={cn("flex items-center space-x-2 text-sm", className)}
        >
            <Link
                href="/"
                className="text-gray-500 hover:text-primary-600 transition-colors"
            >
                <Home className="h-4 w-4" />
                <span className="sr-only">Home</span>
            </Link>

            <ChevronRight className="h-4 w-4 text-gray-400" />

            <Link
                href="/blog"
                className="text-gray-500 hover:text-primary-600 transition-colors"
            >
                Blog
            </Link>

            {items.map((item, index) => (
                <React.Fragment key={item.label}>
                    <ChevronRight className="h-4 w-4 text-gray-400" />
                    {item.href ? (
                        <Link
                            href={item.href}
                            className="text-gray-500 hover:text-primary-600 transition-colors"
                        >
                            {item.label}
                        </Link>
                    ) : (
                        <span className="text-gray-900 font-medium">
                            {item.label}
                        </span>
                    )}
                </React.Fragment>
            ))}
        </nav>
    );
}

================
File: src/components/marketing/blog/blog-card.tsx
================
// src/components/marketing/blog/blog-card.tsx
// Path: src/components/marketing/blog/blog-card.tsx

"use client";

import Link from "next/link";
import { formatDate } from "@/lib/utils";
import { BlogPost } from "@/types/blog"; // Updated import path
import { cn } from "@/lib/utils";
import { BlogImage } from "./blog-image";
import { trackBlogEvent } from "@/lib/analytics";
import { useState } from "react";

interface BlogCardProps {
  post: BlogPost;
  featured?: boolean;
}

export function BlogCard({ post, featured = false }: BlogCardProps) {
  const [hasImageError, setHasImageError] = useState(false);

  const handleImageError = () => {
    setHasImageError(true);
    trackBlogEvent({
      action: "error",
      category: "post",
      label: "image_load_failed",
      metadata: {
        postId: post.id,
        postTitle: post.title,
        imageUrl: post.featured_image?.url,
      },
    });
  };

  const handleClick = () => {
    trackBlogEvent({
      action: "click",
      category: "post",
      label: post.title,
      metadata: {
        postId: post.id,
        category: post.category?.name || "Uncategorized",
        featured,
      },
    });
  };

  const publicationDate = post.published_at || post.created_at;
  const formattedDate = formatDate(publicationDate);

  return (
    <article
      className={cn(
        "group relative flex flex-col bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow",
        featured && "md:col-span-2",
      )}
    >
      {/* Image Section */}
      {post.featured_image && !hasImageError && (
        <Link
          href={`/blog/${post.slug}`}
          className="relative aspect-video overflow-hidden"
          onClick={handleClick}
        >
          <BlogImage
            image={post.featured_image}
            className="object-cover w-full h-full group-hover:scale-105 transition-transform duration-300"
            priority={featured}
            onError={handleImageError}
          />
        </Link>
      )}

      {/* Content Section */}
      <div className="flex flex-col p-6">
        {/* Meta Information */}
        <div className="flex items-center text-sm text-gray-600 mb-3">
          <span className="text-primary-600 font-medium">
            {post.category?.name || "Uncategorized"}
          </span>
          <span className="mx-2">•</span>
          <time dateTime={publicationDate}>{formattedDate}</time>
          {post.estimated_read_time > 0 && (
            <>
              <span className="mx-2">•</span>
              <span>{post.estimated_read_time} min read</span>
            </>
          )}
        </div>

        {/* Title */}
        <Link
          href={`/blog/${post.slug}`}
          className="group"
          onClick={handleClick}
        >
          <h3 className="text-xl font-semibold text-gray-900 mb-2 group-hover:text-primary-600 transition-colors">
            {post.title}
          </h3>
        </Link>

        {/* Excerpt */}
        <p className="text-gray-600 mb-4 line-clamp-2">{post.excerpt}</p>

        {/* Footer / Call to Action */}
        <div className="mt-auto pt-4">
          <Link
            href={`/blog/${post.slug}`}
            className="inline-flex items-center text-primary-600 font-medium group-hover:text-primary-700"
            onClick={handleClick}
          >
            Read More
            <svg
              className="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M9 5l7 7-7 7"
              />
            </svg>
          </Link>
        </div>
      </div>
    </article>
  );
}

================
File: src/components/marketing/blog/blog-error-boundary.tsx
================
// src/components/marketing/blog/blog-error-boundary.tsx

"use client";

import { Component, ErrorInfo, ReactNode } from "react";
import { Button } from "@/components/ui/button";
import { trackError } from "@/lib/analytics";

interface Props {
    children: ReactNode;
    fallback?: ReactNode;
}

interface State {
    hasError: boolean;
    error?: Error;
}

export class BlogErrorBoundary extends Component<Props, State> {
    public state: State = {
        hasError: false,
    };

    public static getDerivedStateFromError(error: Error): State {
        return { hasError: true, error };
    }

    public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
        console.error("Blog error:", error, errorInfo);
        trackError({
            error,
            errorInfo,
            component: "Blog",
            location: window.location.href,
        });
    }

    private handleRetry = () => {
        this.setState({ hasError: false });
        window.location.reload();
    };

    public render() {
        if (this.state.hasError) {
            return (
                this.props.fallback || (
                    <div className="p-6 bg-white rounded-lg shadow-sm">
                        <h2 className="text-xl font-semibold text-gray-900 mb-2">
                            Something went wrong
                        </h2>
                        <p className="text-gray-600 mb-4">
                            We're having trouble loading this content.
                        </p>
                        <Button onClick={this.handleRetry}>Try Again</Button>
                    </div>
                )
            );
        }

        return this.props.children;
    }
}

================
File: src/components/marketing/blog/blog-image.tsx
================
// src/components/marketing/blog/blog-image.tsx

"use client";

import Image from "next/image";
import { useState } from "react";
import { ImageAsset } from "@/types/blog";
import { cn } from "@/lib/utils";

interface BlogImageProps {
    image: ImageAsset;
    className?: string;
    priority?: boolean;
    onLoad?: () => void;
    onError?: () => void;
}

export function BlogImage({
    image,
    className,
    priority = false,
    onLoad,
    onError,
}: BlogImageProps) {
    const [isLoading, setIsLoading] = useState(true);

    return (
        <div className="relative overflow-hidden">
            <Image
                src={image.url}
                alt={image.altText || ""}
                width={image.width}
                height={image.height}
                className={cn(
                    "duration-700 ease-in-out",
                    isLoading
                        ? "grayscale blur-2xl scale-110"
                        : "grayscale-0 blur-0 scale-100",
                    className,
                )}
                onLoadingComplete={() => {
                    setIsLoading(false);
                    onLoad?.();
                }}
                onError={onError}
                priority={priority}
                quality={90}
            />
            {isLoading && (
                <div className="absolute inset-0 bg-gray-100 animate-pulse" />
            )}
        </div>
    );
}

================
File: src/components/marketing/blog/blog-list.tsx
================
// src/components/marketing/blog/blog-list.tsx
// Path: src/components/marketing/blog/blog-list.tsx

import React, { Fragment } from "react";
import { getBlogPosts } from "@/lib/api/blog";
import { BlogCard } from "./blog-card";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";
import Link from "next/link";
import { BlogPost, BlogListResponse } from "@/types/blog"; // Updated import

interface BlogListProps {
  page: number;
  category?: string;
  tag?: string;
  search?: string;
}

export async function BlogList({ page, category, tag, search }: BlogListProps) {
  try {
    const response = await getBlogPosts({
      page,
      category,
      tag,
      search,
      per_page: 10,
    });

    const posts = Array.isArray(response) ? response : response.data;
    const totalItems = Array.isArray(response)
      ? response.length
      : response.pagination.total;
    const totalPages = Array.isArray(response)
      ? Math.ceil(response.length / 10)
      : Math.ceil(response.pagination.total / response.pagination.per_page);

    if (posts.length === 0) {
      return (
        <div className="text-center py-12">
          <h2 className="text-2xl font-semibold text-gray-900 mb-4">
            No posts found
          </h2>
          <p className="text-gray-600 mb-8">
            {search && `No articles matching "${search}"`}
            {category && !search && `No articles in category "${category}"`}
            {tag && !search && !category && `No articles with tag "${tag}"`}
            {!search && !category && !tag && "No articles available"}
          </p>
          <Button variant="outline" asChild>
            <Link href="/blog">View all posts</Link>
          </Button>
        </div>
      );
    }

    return (
      <div className="space-y-8">
        {/* Search Results Header */}
        {search && (
          <div className="mb-8">
            <h2 className="text-2xl font-semibold text-gray-900">
              Search Results: "{search}"
            </h2>
            <p className="text-gray-600 mt-2">
              Found {totalItems} {totalItems === 1 ? "article" : "articles"}
            </p>
          </div>
        )}

        {/* Grid of Blog Posts */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {posts.map((post, index) => (
            <BlogCard
              key={post.id}
              post={post}
              featured={
                index === 0 && page === 1 && !search && !category && !tag
              }
            />
          ))}
        </div>

        {/* Pagination */}
        {totalPages > 1 && (
          <nav
            className="flex justify-center items-center gap-2 py-8"
            aria-label="Blog pagination"
          >
            {/* Previous Page */}
            {page > 1 && (
              <Link
                href={{
                  pathname: "/blog",
                  query: {
                    ...(category && { category }),
                    ...(tag && { tag }),
                    ...(search && { search }),
                    page: page - 1,
                  },
                }}
                className="inline-flex"
              >
                <Button variant="outline" className="gap-2">
                  <ChevronLeft className="h-4 w-4" />
                  Previous
                </Button>
              </Link>
            )}

            {/* Page Numbers */}
            <div className="flex gap-2">
              {Array.from({ length: totalPages }, (_, i) => i + 1)
                .filter(
                  (p) => p === 1 || p === totalPages || Math.abs(p - page) <= 1,
                )
                .map((p, index, array) => (
                  <Fragment key={p}>
                    {index > 0 && array[index - 1] !== p - 1 && (
                      <span className="px-2 text-gray-500">...</span>
                    )}
                    <Link
                      href={{
                        pathname: "/blog",
                        query: {
                          ...(category && {
                            category,
                          }),
                          ...(tag && { tag }),
                          ...(search && { search }),
                          page: p,
                        },
                      }}
                      className="inline-flex"
                    >
                      <Button
                        variant={page === p ? "default" : "outline"}
                        aria-current={page === p ? "page" : undefined}
                      >
                        {p}
                      </Button>
                    </Link>
                  </Fragment>
                ))}
            </div>

            {/* Next Page */}
            {page < totalPages && (
              <Link
                href={{
                  pathname: "/blog",
                  query: {
                    ...(category && { category }),
                    ...(tag && { tag }),
                    ...(search && { search }),
                    page: page + 1,
                  },
                }}
                className="inline-flex"
              >
                <Button variant="outline" className="gap-2">
                  Next
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </Link>
            )}
          </nav>
        )}
      </div>
    );
  } catch (error) {
    console.error("Error in BlogList:", error);
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">Unable to load blog posts</p>
      </div>
    );
  }
}

================
File: src/components/marketing/blog/blog-loading.tsx
================
// src/components/marketing/blog/blog-loading.tsx

import { Card, CardContent } from "@/components/ui/card";

export function BlogLoading() {
    return (
        <div className="space-y-8">
            {/* Search Skeleton */}
            <div className="w-full h-10 bg-gray-100 rounded-md animate-pulse" />

            {/* Posts Grid Skeleton */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {Array.from({ length: 6 }).map((_, index) => (
                    <Card key={index} className="overflow-hidden">
                        <CardContent className="p-0">
                            {/* Image Skeleton */}
                            <div className="aspect-video bg-gray-100 animate-pulse" />

                            {/* Content Skeleton */}
                            <div className="p-6 space-y-4">
                                {/* Meta Info Skeleton */}
                                <div className="flex gap-2">
                                    <div className="h-4 w-20 bg-gray-100 rounded animate-pulse" />
                                    <div className="h-4 w-4 bg-gray-100 rounded animate-pulse" />
                                    <div className="h-4 w-24 bg-gray-100 rounded animate-pulse" />
                                </div>

                                {/* Title Skeleton */}
                                <div className="h-6 w-3/4 bg-gray-100 rounded animate-pulse" />

                                {/* Excerpt Skeleton */}
                                <div className="space-y-2">
                                    <div className="h-4 w-full bg-gray-100 rounded animate-pulse" />
                                    <div className="h-4 w-5/6 bg-gray-100 rounded animate-pulse" />
                                </div>

                                {/* Footer Skeleton */}
                                <div className="h-4 w-24 bg-gray-100 rounded animate-pulse" />
                            </div>
                        </CardContent>
                    </Card>
                ))}
            </div>

            {/* Pagination Skeleton */}
            <div className="flex justify-center gap-2 py-8">
                {Array.from({ length: 3 }).map((_, index) => (
                    <div
                        key={index}
                        className="h-10 w-10 bg-gray-100 rounded animate-pulse"
                    />
                ))}
            </div>
        </div>
    );
}

================
File: src/components/marketing/blog/blog-search.tsx
================
// src/components/marketing/blog/blog-search.tsx

"use client";

import { useRouter, useSearchParams } from "next/navigation";
import { useTransition } from "react";
import { Input } from "@/components/ui/input";
import { Search as SearchIcon } from "lucide-react";

export function BlogSearch() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isPending, startTransition] = useTransition();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const searchTerm = formData.get("search") as string;

    if (searchTerm.trim()) {
      startTransition(() => {
        // Add null check for searchParams
        const params = new URLSearchParams(searchParams?.toString() ?? "");
        params.set("search", searchTerm.trim());
        params.delete("page");

        console.log("Searching with term:", searchTerm.trim());
        router.push(`/blog?${params.toString()}`);
      });
    }
  };

  return (
    <form onSubmit={handleSubmit} className="relative">
      <Input
        name="search"
        type="search"
        placeholder="Search articles..."
        // Add null check for searchParams.get
        defaultValue={searchParams?.get("search") ?? ""}
        className="pl-10"
        aria-label="Search articles"
      />
      <button
        type="submit"
        className="absolute left-3 top-2.5"
        aria-label="Search"
      >
        <SearchIcon
          className={`h-5 w-5 ${
            isPending ? "text-primary-500" : "text-gray-400"
          }`}
        />
      </button>
      {isPending && (
        <div className="absolute right-3 top-2.5">
          <div className="animate-spin h-5 w-5 border-2 border-primary-500 rounded-full border-t-transparent" />
        </div>
      )}
    </form>
  );
}

================
File: src/components/marketing/blog/blog-sidebar.tsx
================
// src/components/marketing/blog/blog-sidebar.tsx

import Link from "next/link";
import { getBlogPosts, getCategories } from "@/lib/api/blog";
import {
  Category,
  BlogPost,
  BlogListResponse,
  CategoryListResponse,
} from "@/types/blog";

export async function BlogSidebar() {
  try {
    console.log("Fetching sidebar data...");

    const [postsResponse, categoriesResponse] = await Promise.all([
      getBlogPosts({ page: 1, per_page: 3 }).catch((error) => {
        console.error("Error fetching recent posts:", error);
        return {
          data: [] as BlogPost[],
          pagination: {
            total: 0,
            current_page: 1,
            total_pages: 0,
            per_page: 3,
          },
        } as BlogListResponse;
      }),
      getCategories().catch((error) => {
        console.error("Error fetching categories:", error);
        return {
          data: [] as Category[],
          pagination: {
            total: 0,
            current_page: 1,
            total_pages: 0,
            per_page: 10,
          },
        } as CategoryListResponse;
      }),
    ]);

    const categories = categoriesResponse.data || [];
    const posts = postsResponse.data || [];

    return (
      <aside className="space-y-8">
        {/* Categories */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">
            Categories
          </h2>
          {categories.length > 0 ? (
            <ul className="space-y-2">
              {categories.map((category: Category) => (
                <li key={`category-${category.id}`}>
                  <Link
                    href={`/blog?category=${category.slug}`}
                    className="text-gray-600 hover:text-primary-600"
                  >
                    {category.name}
                  </Link>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-gray-500">No categories available</p>
          )}
        </div>

        {/* Recent Posts */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">
            Recent Posts
          </h2>
          {posts.length > 0 ? (
            <ul className="space-y-4">
              {posts.map((post: BlogPost) => (
                <li key={`post-${post.id}`}>
                  <Link href={`/blog/${post.slug}`}>
                    <h3 className="text-gray-900 font-medium hover:text-primary-600">
                      {post.title}
                    </h3>
                  </Link>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-gray-500">No recent posts available</p>
          )}
        </div>
      </aside>
    );
  } catch (error) {
    console.error("BlogSidebar error:", error);
    return (
      <aside className="space-y-8">
        <div className="bg-white rounded-lg shadow-sm p-6">
          <p className="text-gray-500">Unable to load sidebar content</p>
        </div>
      </aside>
    );
  }
}

================
File: src/components/marketing/careers/CareersContent.tsx
================
// Path: neural_nexus_frontend/src/components/marketing/careers/CareersContent.tsx
"use client";

import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Send, Briefcase, Heart, Users, Sparkles, Gem } from "lucide-react";

interface ScrollLinkProps {
  href: string;
  children: React.ReactNode;
  className?: string;
}

const ScrollLink = ({ href, children, className }: ScrollLinkProps) => {
  const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {
    e.preventDefault();
    const element = document.querySelector(href);
    if (element) {
      element.scrollIntoView({ behavior: "smooth" });
    }
  };

  return (
    <a href={href} onClick={handleClick} className={className}>
      {children}
    </a>
  );
};

const benefits = [
  {
    icon: <Heart className="h-6 w-6" />,
    title: "Health & Wellness",
    description:
      "Comprehensive health benefits and wellness programs to keep you at your best.",
  },
  {
    icon: <Sparkles className="h-6 w-6" />,
    title: "Growth & Development",
    description:
      "Continuous learning opportunities and career development pathways.",
  },
  {
    icon: <Users className="h-6 w-6" />,
    title: "Flexible Work",
    description:
      "Remote-first culture with flexible hours and work-life balance.",
  },
  {
    icon: <Gem className="h-6 w-6" />,
    title: "Competitive Package",
    description:
      "Attractive compensation with equity options and performance bonuses.",
  },
];

const openPositions = [
  {
    id: 1,
    title: "Senior Data Scientist",
    department: "Data Science",
    location: "Remote",
    type: "Full-time",
    link: "/careers/senior-data-scientist",
  },
  {
    id: 2,
    title: "Data Strategy Consultant",
    department: "Consulting",
    location: "Remote",
    type: "Full-time",
    link: "/careers/data-strategy-consultant",
  },
  {
    id: 3,
    title: "AI Implementation Specialist",
    department: "Engineering",
    location: "Remote",
    type: "Full-time",
    link: "/careers/ai-implementation-specialist",
  },
];

export default function CareersContent() {
  return (
    <div className="flex flex-col">
      {/* Hero Section */}
      <section className="pt-24 pb-16 bg-gradient-to-b from-primary-50 to-white">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto text-center">
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
              Join Our Mission to Transform Data Leadership
            </h1>
            <p className="text-xl text-gray-600 mb-8">
              Be part of a team that's revolutionizing how organizations
              leverage data and AI. We're looking for passionate individuals who
              want to make a real impact.
            </p>
            {/* Replace the existing Button with this updated version */}
            <Button
              size="lg"
              className="bg-primary hover:bg-primary/90"
              asChild
            >
              <ScrollLink href="#positions">View Open Positions</ScrollLink>
            </Button>
          </div>
        </div>
      </section>

      {/* Benefits Section */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            Why Join Neural Nexus?
          </h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            {benefits.map((benefit, index) => (
              <div
                key={index}
                className="flex flex-col items-center text-center p-6"
              >
                <div className="w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center text-primary-600 mb-4">
                  {benefit.icon}
                </div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">
                  {benefit.title}
                </h3>
                <p className="text-gray-600">{benefit.description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Open Positions Section */}
      <section id="positions" className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            Open Positions
          </h2>
          <div className="max-w-4xl mx-auto space-y-6">
            {openPositions.map((position) => (
              <div
                key={position.id}
                className="bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 p-6"
              >
                <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
                  <div>
                    <h3 className="text-xl font-semibold text-gray-900">
                      {position.title}
                    </h3>
                    <div className="flex flex-wrap gap-2 mt-2">
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-gray-100 text-gray-800">
                        <Briefcase className="h-4 w-4 mr-1" />
                        {position.department}
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-primary-100 text-primary-800">
                        {position.location}
                      </span>
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-green-100 text-green-800">
                        {position.type}
                      </span>
                    </div>
                  </div>
                  <Button asChild>
                    <Link
                      href={position.link}
                      className="inline-flex items-center"
                    >
                      Apply Now
                      <Send className="ml-2 h-4 w-4" />
                    </Link>
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* No Positions Section */}
      <section className="py-16 bg-primary-600 text-white">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold mb-6">
            Don't See the Right Position?
          </h2>
          <p className="text-xl text-primary-100 mb-8 max-w-2xl mx-auto">
            We're always looking for talented individuals to join our team. Send
            us your resume and let us know how you can contribute.
          </p>
          <Button
            variant="outline"
            size="lg"
            className="bg-white text-primary-600 hover:bg-primary-50"
            asChild
          >
            <Link href="/contact">Get in Touch</Link>
          </Button>
        </div>
      </section>
    </div>
  );
}

================
File: src/components/marketing/case-studies/case-study-analytics.tsx
================
// src/components/marketing/case-studies/case-study-analytics.tsx
"use client";

import { usePathname, useSearchParams } from "next/navigation";
import { useEffect } from "react";
import { trackBlogEvent, type AnalyticsEvent } from "@/lib/analytics";

export function CaseStudyAnalytics() {
  const pathname = usePathname();
  const searchParams = useSearchParams();

  useEffect(() => {
    if (pathname) {
      // Add null check
      trackBlogEvent({
        category: "page_view",
        action: "view_case_studies",
        label: pathname, // Now we know pathname is string
        metadata: {
          path: pathname,
          search: searchParams?.toString() ?? "",
          title: "Case Studies",
        },
      });
    }
  }, [pathname, searchParams]);

  return null;
}

export function trackCaseStudyEvent({
  action,
  label,
  value,
  metadata,
}: Omit<AnalyticsEvent, "category">) {
  return trackBlogEvent({
    category: "case_study",
    action,
    label,
    value,
    metadata,
  });
}

function trackPageView({
  path,
  search,
  title,
}: {
  path: string;
  search: string;
  title?: string;
}) {
  if (typeof window !== "undefined") {
    window.gtag?.("event", "page_view", {
      page_path: path,
      page_search: search,
      page_title: title,
    });
  }
}

================
File: src/components/marketing/case-studies/case-study-card.tsx
================
// src/components/marketing/case-studies/case-study-card.tsx
"use client";

import Link from "next/link";
import { CaseStudy } from "@/lib/api/case-studies";
import { cn } from "@/lib/utils";
import { useState } from "react";
import { trackCaseStudyEvent } from "./case-study-analytics";

interface CaseStudyCardProps {
  caseStudy: CaseStudy;
  featured?: boolean;
}

export function CaseStudyCard({
  caseStudy,
  featured = false,
}: CaseStudyCardProps) {
  const [hasImageError, setHasImageError] = useState(false);

  const handleClick = () => {
    trackCaseStudyEvent({
      action: "click",
      label: caseStudy.title,
      metadata: {
        // Changed from properties to metadata
        category: "case_study",
        id: caseStudy.id,
        industry: caseStudy.industry,
        featured,
      },
    });
  };

  return (
    <article
      className={cn(
        "group relative flex flex-col bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow",
        featured && "md:col-span-2 lg:col-span-3",
      )}
    >
      {/* Image Section */}
      {caseStudy.featured_image && !hasImageError && (
        <Link
          href={`/case-studies/${caseStudy.slug}`}
          className="relative aspect-video overflow-hidden"
          onClick={handleClick}
        >
          <img
            src={caseStudy.featured_image}
            alt={caseStudy.title}
            className="object-cover w-full h-full group-hover:scale-105 transition-transform duration-300"
            onError={() => setHasImageError(true)}
          />
        </Link>
      )}

      {/* Content Section */}
      <div className="flex flex-col p-6">
        {/* Industry & Client */}
        <div className="flex items-center text-sm text-gray-600 mb-3">
          <span className="text-primary-600 font-medium">
            {caseStudy.industry}
          </span>
          <span className="mx-2">•</span>
          <span>{caseStudy.client_name}</span>
        </div>

        {/* Title */}
        <Link
          href={`/case-studies/${caseStudy.slug}`}
          className="group"
          onClick={handleClick}
        >
          <h3 className="text-xl font-semibold text-gray-900 mb-2 group-hover:text-primary-600 transition-colors">
            {caseStudy.title}
          </h3>
        </Link>

        {/* Excerpt */}
        <p className="text-gray-600 mb-4 line-clamp-3">
          {caseStudy.excerpt || caseStudy.challenge.split("\n")[0]}
        </p>

        {/* Results Preview */}
        {featured && caseStudy.results && (
          <div className="grid grid-cols-2 gap-4 mb-4">
            {Object.entries(caseStudy.results)
              .slice(0, 4)
              .map(([key, value]) => (
                <div key={key} className="bg-gray-50 p-3 rounded">
                  <p className="text-sm text-gray-500">{key}</p>
                  <p className="font-medium">{value}</p>
                </div>
              ))}
          </div>
        )}

        {/* Footer / Call to Action */}
        <div className="mt-auto pt-4">
          <Link
            href={`/case-studies/${caseStudy.slug}`}
            className="inline-flex items-center text-primary-600 font-medium hover:text-primary-700"
            onClick={handleClick}
          >
            View Case Study
            <svg
              className="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              aria-hidden="true"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M9 5l7 7-7 7"
              />
            </svg>
          </Link>
        </div>
      </div>
    </article>
  );
}

================
File: src/components/marketing/case-studies/case-study-error-boundary.tsx
================
// src/components/marketing/case-studies/case-study-error-boundary.tsx
"use client";

import { Component, ErrorInfo, ReactNode } from "react";
import { Button } from "@/components/ui/button";
import { trackError } from "@/lib/analytics"; // Update import path

interface Props {
  children: ReactNode;
  fallback?: ReactNode;
}

interface State {
  hasError: boolean;
  error?: Error;
}

export class CaseStudyErrorBoundary extends Component<Props, State> {
  public state: State = {
    hasError: false,
  };

  public static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }

  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error("Case Study error:", error, errorInfo);
    trackError({
      error,
      errorInfo,
      component: "CaseStudy",
      location: window.location.href,
    });
  }

  private handleRetry = () => {
    this.setState({ hasError: false });
    window.location.reload();
  };

  public render() {
    if (this.state.hasError) {
      return (
        this.props.fallback || (
          <div className="p-6 bg-white rounded-lg shadow-sm">
            <h2 className="text-xl font-semibold text-gray-900 mb-2">
              Something went wrong
            </h2>
            <p className="text-gray-600 mb-4">
              We're having trouble loading this content.
            </p>
            <Button onClick={this.handleRetry}>Try Again</Button>
          </div>
        )
      );
    }

    return this.props.children;
  }
}

================
File: src/components/marketing/case-studies/case-study-list.tsx
================
// src/components/marketing/case-studies/case-study-list.tsx
import { getCaseStudies } from "@/lib/api/case-studies";
import { CaseStudyCard } from "./case-study-card";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";
import Link from "next/link";

interface CaseStudyListProps {
  page: number;
  industry?: string;
  search?: string;
}

export async function CaseStudyList({
  page,
  industry,
  search,
}: CaseStudyListProps) {
  try {
    const caseStudies = await getCaseStudies({
      page,
      industry,
      search,
      per_page: 9,
    });

    if (caseStudies.length === 0) {
      return (
        <div className="text-center py-12">
          <h2 className="text-2xl font-semibold text-gray-900 mb-4">
            No case studies found
          </h2>
          <p className="text-gray-600 mb-8">
            {search && `No case studies matching "${search}"`}
            {industry && !search && `No case studies in industry "${industry}"`}
            {!search && !industry && "No case studies available"}
          </p>
          <Button variant="outline" asChild>
            <Link href="/case-studies">View all case studies</Link>
          </Button>
        </div>
      );
    }

    return (
      <div className="space-y-8">
        {/* Search Results Header */}
        {search && (
          <div className="mb-8">
            <h2 className="text-2xl font-semibold text-gray-900">
              Search Results: "{search}"
            </h2>
            <p className="text-gray-600 mt-2">
              Found {caseStudies.length} case studies
            </p>
          </div>
        )}

        {/* Grid of Case Studies */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {caseStudies.map((study, index) => (
            <CaseStudyCard
              key={study.id}
              caseStudy={study}
              featured={index === 0 && page === 1 && !search && !industry}
            />
          ))}
        </div>

        {/* Pagination will be added here */}
      </div>
    );
  } catch (error) {
    console.error("Error in CaseStudyList:", error);
    return (
      <div className="text-center py-8">
        <p className="text-gray-500">Unable to load case studies</p>
      </div>
    );
  }
}

================
File: src/components/marketing/case-studies/case-study-loading.tsx
================
// src/components/marketing/case-studies/case-study-loading.tsx
export function CaseStudyLoading() {
  return (
    <div className="space-y-8">
      {/* Search and Filter Skeleton */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="w-full h-10 bg-gray-100 rounded-md animate-pulse" />
        <div className="w-full h-10 bg-gray-100 rounded-md animate-pulse" />
      </div>

      {/* Grid Skeleton */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {Array.from({ length: 9 }).map((_, index) => (
          <div
            key={index}
            className="bg-white rounded-lg shadow-sm overflow-hidden"
          >
            {/* Image Skeleton */}
            <div className="aspect-video bg-gray-100 animate-pulse" />

            {/* Content Skeleton */}
            <div className="p-6 space-y-4">
              {/* Meta Info Skeleton */}
              <div className="flex gap-2">
                <div className="h-4 w-24 bg-gray-100 rounded animate-pulse" />
                <div className="h-4 w-4 bg-gray-100 rounded animate-pulse" />
                <div className="h-4 w-32 bg-gray-100 rounded animate-pulse" />
              </div>

              {/* Title Skeleton */}
              <div className="h-6 w-3/4 bg-gray-100 rounded animate-pulse" />

              {/* Excerpt Skeleton */}
              <div className="space-y-2">
                <div className="h-4 w-full bg-gray-100 rounded animate-pulse" />
                <div className="h-4 w-5/6 bg-gray-100 rounded animate-pulse" />
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Pagination Skeleton */}
      <div className="flex justify-center gap-2 py-8">
        {Array.from({ length: 3 }).map((_, index) => (
          <div
            key={index}
            className="h-10 w-10 bg-gray-100 rounded animate-pulse"
          />
        ))}
      </div>
    </div>
  );
}

================
File: src/components/marketing/case-studies/case-study-pagination.tsx
================
// src/components/marketing/case-studies/case-study-pagination.tsx
// Path: neural_nexus_frontend/src/components/marketing/case-studies/case-study-pagination.tsx
import React, { Fragment } from "react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { ChevronLeft, ChevronRight } from "lucide-react";

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  industry?: string;
  search?: string;
}

export function CaseStudyPagination({
  currentPage,
  totalPages,
  industry,
  search,
}: PaginationProps) {
  const createQueryString = (page: number) => {
    const params = new URLSearchParams();
    params.set("page", page.toString());
    if (industry) params.set("industry", industry);
    if (search) params.set("search", search);
    return params.toString();
  };

  return (
    <nav
      className="flex justify-center items-center gap-2 py-8"
      aria-label="Case studies pagination"
    >
      {/* Previous Page */}
      {currentPage > 1 && (
        <Link href={`/case-studies?${createQueryString(currentPage - 1)}`}>
          <Button variant="outline" className="gap-2">
            <ChevronLeft className="h-4 w-4" />
            Previous
          </Button>
        </Link>
      )}

      {/* Page Numbers */}
      <div className="flex gap-2">
        {Array.from({ length: totalPages }, (_, i) => i + 1)
          .filter(
            (p) =>
              p === 1 || p === totalPages || Math.abs(p - currentPage) <= 1,
          )
          .map((p, index, array) => (
            <Fragment key={p}>
              {index > 0 && array[index - 1] !== p - 1 && (
                <span className="px-2 text-gray-500">...</span>
              )}
              <Link href={`/case-studies?${createQueryString(p)}`}>
                <Button
                  variant={currentPage === p ? "default" : "outline"}
                  aria-current={currentPage === p ? "page" : undefined}
                >
                  {p}
                </Button>
              </Link>
            </Fragment>
          ))}
      </div>

      {/* Next Page */}
      {currentPage < totalPages && (
        <Link href={`/case-studies?${createQueryString(currentPage + 1)}`}>
          <Button variant="outline" className="gap-2">
            Next
            <ChevronRight className="h-4 w-4" />
          </Button>
        </Link>
      )}
    </nav>
  );
}

================
File: src/components/marketing/case-studies/case-study-search.tsx
================
// src/components/marketing/case-studies/case-study-search.tsx
// Path: neural_nexus_frontend/src/components/marketing/case-studies/case-study-search.tsx
"use client";

import { useRouter, useSearchParams } from "next/navigation";
import { useTransition } from "react";
import { Input } from "@/components/ui/input";
import { Search as SearchIcon } from "lucide-react";
import { trackCaseStudyEvent } from "./case-study-analytics";

const industries = [
  { value: "Healthcare", label: "Healthcare" },
  { value: "Manufacturing", label: "Manufacturing" },
  { value: "Financial Services", label: "Financial Services" },
];

export function CaseStudySearch() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isPending, startTransition] = useTransition();

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    const searchTerm = formData.get("search") as string;
    const industry = formData.get("industry") as string;

    startTransition(() => {
      // Track the search event
      trackCaseStudyEvent({
        action: "search",
        label: searchTerm,
        metadata: {
          category: "case_study",
          search_term: searchTerm,
          industry,
        },
      });

      const params = new URLSearchParams(searchParams?.toString() ?? "");

      if (searchTerm.trim()) {
        params.set("search", searchTerm.trim());
      } else {
        params.delete("search");
      }
      if (industry) {
        params.set("industry", industry);
      } else {
        params.delete("industry");
      }
      params.delete("page");

      router.push(`/case-studies?${params.toString()}`);
    });
  }; // Added missing closing brace here

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="relative">
          <Input
            name="search"
            type="search"
            placeholder="Search case studies..."
            defaultValue={searchParams?.get("search") ?? ""}
            className="pl-10"
            aria-label="Search case studies"
          />
          <SearchIcon className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" />
          {isPending && (
            <div className="absolute right-3 top-2.5">
              <div className="animate-spin h-5 w-5 border-2 border-primary-500 rounded-full border-t-transparent" />
            </div>
          )}
        </div>
        <select
          name="industry"
          defaultValue={searchParams?.get("industry") ?? ""}
          className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm"
          aria-label="Filter by industry"
        >
          <option value="">All Industries</option>
          {industries.map((industry) => (
            <option key={industry.value} value={industry.value}>
              {industry.label}
            </option>
          ))}
        </select>
      </div>
    </form>
  );
}

================
File: src/components/marketing/home/0ld_GeometricPatterns.tsx
================
// src/components/marketing/home/GeometricPatterns.tsx
"use client";

import { motion } from "framer-motion";

export default function GeometricPatterns() {
  return (
    <div className="absolute inset-0 overflow-hidden opacity-70 z-0">
      <motion.div
        className="absolute top-20 right-20 w-32 h-32 bg-primary-300 rounded-full"
        animate={{ rotate: 360 }}
        transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
      />
      <motion.div
        className="absolute top-40 left-1/4 w-16 h-16 bg-primary-200 rotate-45"
        animate={{ scale: [1, 1.2, 1] }}
        transition={{ duration: 5, repeat: Infinity }}
      />
      <motion.div
        className="absolute bottom-40 left-20 w-24 h-24 bg-secondary-300 rotate-45"
        animate={{ scale: [1, 1.2, 1], rotate: 45 }}
        transition={{ duration: 4, repeat: Infinity }}
      />
      <motion.div
        className="absolute bottom-20 right-1/3 w-20 h-20 bg-secondary-100 rounded-full"
        animate={{ y: [0, -20, 0] }}
        transition={{ duration: 6, repeat: Infinity }}
      />
      <motion.div
        className="absolute top-1/2 right-1/4 w-28 h-28 bg-primary-50 rotate-12"
        animate={{ rotate: [12, 45, 12] }}
        transition={{ duration: 8, repeat: Infinity }}
      />
    </div>
  );
}

================
File: src/components/marketing/home/AnimatedMetrics.tsx
================
// src/components/marketing/home/AnimatedMetrics.tsx
"use client";

import { useRef } from "react";
import { motion, useInView } from "framer-motion";
import CountUp from "react-countup";

const metrics = [
  {
    value: 40,
    symbol: "%",
    label: "Average Cost Reduction",
    suffix: true,
    color: "text-primary-600", // Add color
  },
  {
    value: 3,
    symbol: "x",
    label: "Faster Decision Making",
    suffix: false,
    color: "text-secondary-600",
  },
  {
    value: 85,
    symbol: "%",
    label: "Data Quality Improvement",
    suffix: true,
    color: "text-success-600",
  },
];

export default function AnimatedMetrics() {
  const ref = useRef(null);
  const isInView = useInView(ref, {
    once: true, // Changed from triggerOnce to once
    amount: 0.1, // Changed from threshold to amount
  });

  return (
    <motion.div
      ref={ref}
      className="grid grid-cols-1 md:grid-cols-3 gap-8 my-12"
    >
      {metrics.map((metric, index) => (
        <motion.div
          key={index}
          className="text-center p-6 rounded-lg bg-white/50 backdrop-blur-sm shadow-xl"
          whileHover={{ scale: 1.05 }}
          transition={{ type: "spring", stiffness: 300 }}
        >
          <div className={`text-5xl font-bold ${metric.color}`}>
            {isInView && (
              <CountUp
                end={metric.value}
                duration={2}
                suffix={metric.suffix ? metric.symbol : ""}
                prefix={!metric.suffix ? metric.symbol : ""}
              />
            )}
          </div>
          <p className="text-gray-700 mt-2 font-medium">{metric.label}</p>
        </motion.div>
      ))}
    </motion.div>
  );
}

================
File: src/components/marketing/home/enhanced-features-section.tsx
================
// src/components/marketing/home/enhanced-features-section.tsx

import { ArrowRight } from "lucide-react";
import Link from "next/link";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

interface FeatureCardProps {
  title: string;
  description: string;
  insight: string;
  href: string;
}

const FeatureCard = ({
  title,
  description,
  insight,
  href,
}: FeatureCardProps) => (
  <Card className="bg-white transition-shadow hover:shadow-lg h-full">
    <CardContent className="p-6 flex flex-col h-full">
      {/* Content container with flex-grow to push button to bottom */}
      <div className="flex-grow">
        <h3 className="text-xl font-semibold text-primary-600 mb-3">{title}</h3>
        <p className="text-gray-600 mb-4">{description}</p>
        <div className="border-t border-gray-100 pt-4">
          <div className="text-sm text-gray-800 font-medium mb-2">
            Latest Insight:
          </div>
          <p className="text-sm text-gray-600">{insight}</p>
        </div>
      </div>

      {/* Button container with consistent top margin */}
      <div className="mt-8">
        <Button className="w-full bg-primary hover:bg-primary/90" asChild>
          <Link href={href}>Learn More</Link>
        </Button>
      </div>
    </CardContent>
  </Card>
);

export default function EnhancedFeaturesSection() {
  const features = [
    {
      title: "Fractional CDO Services",
      description:
        "Expert data leadership without the cost of a full-time executive.",
      insight:
        "Organizations with fractional CDOs see 40% faster implementation of data initiatives",
      href: "/services/fractional-cdo",
    },
    {
      title: "Data Strategy Consulting",
      description:
        "Comprehensive data strategy development and implementation.",
      insight:
        "A well-defined data strategy can reduce operational costs by up to 25%",
      href: "/services/data-strategy",
    },
    {
      title: "AI Readiness",
      description: "Prepare your organization for successful AI adoption.",
      insight:
        "Companies with AI readiness assessments are 3x more likely to succeed in AI implementation",
      href: "/services/ai-readiness",
    },
  ];

  return (
    <section className="py-16 bg-gray-50">
      <div className="container mx-auto px-4">
        <div className="grid md:grid-cols-3 gap-8">
          {features.map((feature) => (
            <FeatureCard key={feature.title} {...feature} />
          ))}
        </div>
      </div>
    </section>
  );
}

================
File: src/components/marketing/home/featured-insight.tsx
================
// src/components/marketing/home/featured-insight.tsx

import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Lightbulb } from "lucide-react";

export default function FeaturedInsight() {
    return (
        <div className="bg-primary-50 border-y border-primary-100">
            <div className="container mx-auto px-4 py-4">
                <div className="flex items-center justify-between gap-4 flex-wrap">
                    <div className="flex items-center gap-3">
                        <Lightbulb className="h-5 w-5 text-primary-600" />
                        <span className="text-sm font-medium text-primary-900">
                            Latest Insight:
                        </span>
                        <span className="text-sm text-gray-600 md:line-clamp-1">
                            Why 76% of Fortune 500 companies are prioritizing
                            data leadership in 2024
                        </span>
                    </div>
                    <Button
                        variant="ghost"
                        size="sm"
                        className="text-primary-600 shrink-0"
                        asChild
                    >
                        <Link href="/blog/data-leadership-trends">
                            Read More
                        </Link>
                    </Button>
                </div>
            </div>
        </div>
    );
}

================
File: src/components/marketing/home/GeometricPatterns.tsx
================
// Path: neural_nexus_frontend/src/components/marketing/home/GeometricPatterns.tsx
"use client";

import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";

// Add interface for the point structure
interface Point {
  x: number;
  y: number;
  size: number;
  timing: number;
}

// Update the points array type
const INITIAL_POINTS: Point[] = [
  { x: 20, y: 20, size: 1.5, timing: 3 },
  { x: 40, y: 30, size: 1.2, timing: 2.5 },
  { x: 60, y: 20, size: 1.8, timing: 3.5 },
  { x: 80, y: 40, size: 1.3, timing: 2.8 },
  { x: 30, y: 60, size: 1.6, timing: 3.2 },
  { x: 50, y: 70, size: 1.4, timing: 2.7 },
  { x: 70, y: 60, size: 1.7, timing: 3.3 },
  { x: 90, y: 80, size: 1.5, timing: 2.9 },
];

export default function GeometricPatterns() {
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  // Add types to createPath parameters
  const createPath = (startPoint: Point, endPoint: Point) => {
    const distance = Math.sqrt(
      Math.pow(endPoint.x - startPoint.x, 2) +
        Math.pow(endPoint.y - startPoint.y, 2),
    );

    if (distance > 30) return null;

    return `M ${startPoint.x} ${startPoint.y} L ${endPoint.x} ${endPoint.y}`;
  };

  if (!isClient) {
    return <div className="absolute inset-0 h-screen overflow-hidden" />;
  }

  return (
    <div className="absolute inset-0 h-screen overflow-hidden">
      <svg
        className="w-full h-full opacity-[0.15]"
        viewBox="0 0 100 100"
        preserveAspectRatio="xMidYMid slice"
      >
        {/* Draw connections */}
        {INITIAL_POINTS.map((point, i) =>
          INITIAL_POINTS.slice(i + 1).map((endpoint, j) => {
            const path = createPath(point, endpoint);
            if (!path) return null;

            return (
              <motion.path
                key={`line-${i}-${j}`}
                d={path}
                stroke="currentColor"
                className="text-primary"
                strokeWidth="0.1"
                initial={{ pathLength: 0, opacity: 0 }}
                animate={{
                  pathLength: [0, 1],
                  opacity: [0, 0.3, 0],
                }}
                transition={{
                  duration: 3,
                  repeat: Infinity,
                  repeatDelay: i + j,
                  ease: "easeInOut",
                }}
              />
            );
          }),
        )}

        {/* Draw points */}
        {INITIAL_POINTS.map((point, index) => (
          <motion.circle
            key={`point-${index}`}
            cx={point.x}
            cy={point.y}
            r={point.size * 0.3}
            className="fill-primary"
            initial={{ opacity: 0.2 }}
            animate={{
              opacity: [0.2, 0.5, 0.2],
              scale: [1, 1.2, 1],
            }}
            transition={{
              duration: point.timing,
              repeat: Infinity,
              ease: "easeInOut",
            }}
          />
        ))}
      </svg>
    </div>
  );
}

================
File: src/components/marketing/newsletter/newsletter-content-end.tsx
================
// src/components/marketing/newsletter/newsletter-content-end.tsx

"use client";

import { useState } from "react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { env } from "@/config/env";

type NewsletterStatus = "idle" | "submitting" | "success" | "error";

export function NewsletterContentEnd() {
  const [formData, setFormData] = useState({
    firstName: "",
    email: "",
  });
  const [status, setStatus] = useState<NewsletterStatus>("idle");
  const [feedback, setFeedback] = useState<{
    type: "success" | "error" | "info" | null;
    message: string;
  }>({ type: null, message: "" });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus("submitting");
    setFeedback({ type: null, message: "" });

    try {
      const response = await fetch(
        `${env.NEXT_PUBLIC_API_URL}/api/leads/newsletter/subscribe/`, // Updated this line
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            ...formData,
            source: "content-end",
          }),
        },
      );

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Something went wrong");
      }

      setStatus("success");
      setFeedback({
        type: "success",
        message: "Thank you for subscribing! Check your email for updates.",
      });
      setFormData({ firstName: "", email: "" });
    } catch (error) {
      setStatus("error");
      setFeedback({
        type: "error",
        message:
          error instanceof Error
            ? error.message
            : "There was an error processing your subscription. Please try again.",
      });
    }
  };

  return (
    <Card className="max-w-xl mx-auto my-8 bg-primary-50 border-primary-100">
      <CardHeader className="space-y-1">
        <CardTitle className="text-xl text-center">
          Enjoy this content?
        </CardTitle>
        <CardDescription className="text-center">
          Subscribe to our newsletter for more insights on data leadership and
          AI innovation.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {feedback.type && (
          <Alert
            variant={feedback.type === "error" ? "destructive" : "default"}
            className={cn(
              "mb-4",
              feedback.type === "success" &&
                "border-green-500 text-green-700 bg-green-50",
              feedback.type === "info" &&
                "border-blue-500 text-blue-700 bg-blue-50",
            )}
          >
            <AlertDescription>{feedback.message}</AlertDescription>
          </Alert>
        )}

        <form
          onSubmit={handleSubmit}
          className="flex flex-col sm:flex-row gap-3"
        >
          <input
            type="text"
            placeholder="First Name"
            value={formData.firstName}
            onChange={(e) =>
              setFormData((prev) => ({
                ...prev,
                firstName: e.target.value,
              }))
            }
            className="flex-1 rounded-md border border-gray-300 px-4 py-2 focus:border-primary-500 focus:ring-1 focus:ring-primary-500"
            required
          />
          <input
            type="email"
            placeholder="Your email address"
            value={formData.email}
            onChange={(e) =>
              setFormData((prev) => ({
                ...prev,
                email: e.target.value,
              }))
            }
            className="flex-1 rounded-md border border-gray-300 px-4 py-2 focus:border-primary-500 focus:ring-1 focus:ring-primary-500"
            required
          />
          <Button
            type="submit"
            disabled={status === "submitting"}
            className="whitespace-nowrap"
          >
            {status === "submitting" ? "Subscribing..." : "Subscribe"}
          </Button>
        </form>

        <p className="text-xs text-gray-500 mt-3 text-center">
          We respect your privacy. Unsubscribe at any time.
        </p>
      </CardContent>
    </Card>
  );
}

================
File: src/components/marketing/newsletter/NewsletterBanner.tsx
================
// src/components/marketing/newsletter/NewsletterBanner.tsx

"use client";

import { useState } from "react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";

type NewsletterFormData = {
  firstName: string;
  email: string;
  source: string;
};

type NewsletterStatus = "idle" | "submitting" | "success" | "error";
type AlertType = "default" | "destructive" | "success"; // Added success variant

export default function NewsletterBanner() {
  const [formData, setFormData] = useState<NewsletterFormData>({
    firstName: "",
    email: "",
    source: "banner",
  });

  const [status, setStatus] = useState<NewsletterStatus>("idle");
  const [feedback, setFeedback] = useState<{
    type: AlertType | null;
    message: string;
  }>({ type: null, message: "" });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus("submitting");
    setFeedback({ type: null, message: "" });

    try {
      const response = await fetch(
        "http://localhost:8000/api/leads/newsletter/subscribe/",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        },
      );

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Something went wrong");
      }

      setStatus("success");
      setFeedback({
        type: "success",
        message: "Thank you for subscribing! Check your email for updates.",
      });
      setFormData({ firstName: "", email: "", source: "banner" });
    } catch (error) {
      setStatus("error");
      setFeedback({
        type: "destructive",
        message:
          error instanceof Error
            ? error.message
            : "There was an error processing your subscription. Please try again.",
      });
    }
  };

  return (
    <section className="bg-primary-50 border-y border-primary-100 py-12">
      <div className="container mx-auto px-4">
        <div className="max-w-3xl mx-auto text-center">
          <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-4">
            Stay Updated with Data & AI Insights
          </h2>
          <p className="text-gray-600 mb-6">
            Join our newsletter for the latest trends, best practices, and
            expert insights in data leadership and AI innovation.
          </p>

          {feedback.type && (
            <Alert
              variant={feedback.type === "success" ? "default" : "destructive"}
              className={cn(
                feedback.type === "success"
                  ? "bg-success-50 border-success-200"
                  : "bg-destructive-50 border-destructive-200",
              )}
            >
              <AlertDescription>{feedback.message}</AlertDescription>
            </Alert>
          )}

          <form
            onSubmit={handleSubmit}
            className="flex flex-col md:flex-row gap-3 max-w-2xl mx-auto"
          >
            <input
              type="text"
              placeholder="First Name"
              value={formData.firstName}
              onChange={(e) =>
                setFormData((prev) => ({
                  ...prev,
                  firstName: e.target.value,
                }))
              }
              className="flex-1 rounded-md border border-gray-300 px-4 py-2 focus:border-primary-500 focus:ring-1 focus:ring-primary-500"
              required
            />
            <input
              type="email"
              placeholder="Email Address"
              value={formData.email}
              onChange={(e) =>
                setFormData((prev) => ({
                  ...prev,
                  email: e.target.value,
                }))
              }
              className="flex-1 rounded-md border border-gray-300 px-4 py-2 focus:border-primary-500 focus:ring-1 focus:ring-primary-500"
              required
            />
            <Button
              type="submit"
              disabled={status === "submitting"}
              className="whitespace-nowrap"
            >
              {status === "submitting" ? "Subscribing..." : "Subscribe"}
            </Button>
          </form>

          <p className="text-sm text-gray-500 mt-4">
            We respect your privacy. Unsubscribe at any time.
          </p>
        </div>
      </div>
    </section>
  );
}

================
File: src/components/marketing/services/service-breadcrumb.tsx
================
// Path: neural_nexus_frontend/src/components/marketing/services/service-breadcrumb.tsx
"use client";

import * as React from "react";
import Link from "next/link";
import { ChevronRight, Home } from "lucide-react";
import { cn } from "@/lib/utils";

interface BreadcrumbItem {
  label: string;
  href?: string;
}

interface ServiceBreadcrumbProps {
  items: BreadcrumbItem[];
  className?: string;
}

export function ServiceBreadcrumb({
  items,
  className,
}: ServiceBreadcrumbProps) {
  return (
    <nav
      aria-label="Breadcrumb"
      className={cn("flex items-center space-x-2 text-sm", className)}
    >
      <Link
        href="/"
        className="text-gray-500 hover:text-primary-600 transition-colors"
      >
        <Home className="h-4 w-4" />
        <span className="sr-only">Home</span>
      </Link>

      <ChevronRight className="h-4 w-4 text-gray-400" />

      <Link
        href="/services"
        className="text-gray-500 hover:text-primary-600 transition-colors"
      >
        Services
      </Link>

      {items.map((item, index) => (
        <React.Fragment key={item.label}>
          <ChevronRight className="h-4 w-4 text-gray-400" />
          {item.href ? (
            <Link
              href={item.href}
              className="text-gray-500 hover:text-primary-600 transition-colors"
            >
              {item.label}
            </Link>
          ) : (
            <span className="text-gray-900 font-medium">{item.label}</span>
          )}
        </React.Fragment>
      ))}
    </nav>
  );
}

================
File: src/components/providers/TrackingProvider.tsx
================
// Path: neural_nexus_frontend/src/components/providers/TrackingProvider.tsx
"use client";

import { useEffect, useCallback, Suspense } from "react";
import { usePathname, useSearchParams } from "next/navigation";
import { tracking } from "@/lib/tracking";

function TrackingWrapper() {
  const pathname = usePathname();
  const searchParams = useSearchParams();

  const handlePageView = useCallback(() => {
    try {
      tracking.trackEvent("page_view", {
        page: pathname ?? "",
        query: searchParams ? Object.fromEntries(searchParams.entries()) : {},
        title: document.title,
        url: window.location.href,
        referrer: document.referrer,
        // Add useful GA4 parameters
        language: navigator.language,
        screen_resolution: `${window.screen.width}x${window.screen.height}`,
        viewport_size: `${window.innerWidth}x${window.innerHeight}`,
      });
    } catch (error) {
      console.warn("Failed to track page view:", error);
    }
  }, [pathname, searchParams]);

  useEffect(() => {
    const initializeTracking = async () => {
      try {
        await tracking.initialize();
      } catch (error) {
        console.warn("Tracking initialization error:", error);
        // Continue execution even if tracking fails
      }
    };

    initializeTracking();
  }, []);

  useEffect(() => {
    try {
      handlePageView();
    } catch (error) {
      console.warn("Page view tracking error:", error);
    }
  }, [handlePageView]);

  return null;
}

export default function TrackingProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      <Suspense fallback={null}>
        <TrackingWrapper />
      </Suspense>
      {children}
    </>
  );
}

================
File: src/components/services/ai-readiness/AIReadinessContent.tsx
================
// Path: neural_nexus_frontend/src/components/services/ai-readiness/AIReadinessContent.tsx
"use client";

import { Button } from "@/components/ui/button";
import Link from "next/link";
import AIROICalculator from "@/components/calculators/AIROICalculator";
import { BookDiscoveryButton } from "@/components/features/booking/BookDiscoveryButton";

const CheckIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    {...props}
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M5 13l4 4L19 7"
    />
  </svg>
);

const readinessDimensions = [
  {
    icon: "🎯",
    title: "Strategic Alignment",
    description: "Ensure AI initiatives support business objectives",
    checkpoints: [
      "Business goal alignment",
      "Use case prioritization",
      "ROI potential assessment",
      "Stakeholder buy-in",
    ],
  },
  {
    icon: "📊",
    title: "Data Readiness",
    description: "Evaluate your data infrastructure and quality",
    checkpoints: [
      "Data quality assessment",
      "Infrastructure evaluation",
      "Data governance",
      "Collection processes",
    ],
  },
  {
    icon: "👥",
    title: "Team Capabilities",
    description: "Assess and develop AI implementation skills",
    checkpoints: [
      "Skills assessment",
      "Training needs",
      "Organizational structure",
      "Culture readiness",
    ],
  },
  {
    icon: "🔧",
    title: "Technical Infrastructure",
    description: "Review your technical foundation for AI",
    checkpoints: [
      "Systems assessment",
      "Integration capabilities",
      "Security readiness",
      "Scalability evaluation",
    ],
  },
  {
    icon: "📈",
    title: "Process Maturity",
    description: "Evaluate operational readiness for AI",
    checkpoints: [
      "Process documentation",
      "Automation potential",
      "Change management",
      "Quality controls",
    ],
  },
  {
    icon: "⚖️",
    title: "Governance & Ethics",
    description: "Ensure responsible AI implementation",
    checkpoints: [
      "Ethical framework",
      "Risk assessment",
      "Compliance review",
      "Monitoring systems",
    ],
  },
];

const roadmapSteps = [
  {
    title: "Assessment",
    description:
      "Comprehensive evaluation of your organization's AI readiness across all critical dimensions.",
    deliverables: [
      "Readiness scorecard",
      "Gap analysis",
      "Risk assessment",
      "Opportunity mapping",
    ],
  },
  {
    title: "Planning",
    description:
      "Develop a detailed implementation strategy and roadmap based on assessment findings.",
    deliverables: [
      "Implementation roadmap",
      "Resource planning",
      "Budget estimation",
      "Timeline development",
    ],
  },
  {
    title: "Foundation",
    description:
      "Build the necessary foundation for successful AI implementation.",
    deliverables: [
      "Data infrastructure",
      "Team training",
      "Process optimization",
      "Governance framework",
    ],
  },
  {
    title: "Implementation",
    description: "Execute AI initiatives with careful monitoring and support.",
    deliverables: [
      "Pilot projects",
      "Scale planning",
      "Success metrics",
      "Performance monitoring",
    ],
  },
];

const programs = [
  {
    name: "Readiness Assessment",
    price: "$10,000",
    duration: "2 weeks",
    description:
      "Evaluate your organization's AI readiness and identify opportunities",
    features: [
      "AI capability assessment",
      "Use case identification",
      "Technical review",
      "Basic roadmap",
      "Executive summary",
    ],
    featured: false,
  },
  {
    name: "Implementation Planning",
    price: "$35,000",
    duration: "4 weeks",
    description:
      "Comprehensive assessment and detailed implementation planning",
    features: [
      "Everything in Assessment",
      "Detailed use case analysis",
      "Technical requirements",
      "Data readiness review",
      "Implementation roadmap",
      "ROI analysis",
      "Team workshop",
    ],
    featured: true,
  },
  {
    name: "Full Launch Program",
    price: "$75,000",
    duration: "8 weeks",
    description: "End-to-end support from assessment through implementation",
    features: [
      "Everything in Planning",
      "Vendor selection support",
      "Pilot project design",
      "Team training program",
      "Change management plan",
      "60-day launch support",
      "Success monitoring",
    ],
    featured: false,
  },
];

export default function AIReadinessContent() {
  return (
    <div className="flex flex-col">
      {/* Hero Section */}
      <section className="pt-24 pb-16 bg-gradient-to-b from-success-50 to-white">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <div className="inline-block px-4 py-2 bg-success-100 text-success-700 rounded-full text-sm font-medium mb-6">
              AI Readiness Assessment & Implementation
            </div>
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
              Prepare Your Organization for
              <span className="text-success-600"> AI Success</span>
            </h1>
            <p className="text-xl text-gray-600 mb-8">
              Navigate your AI journey with confidence. From readiness
              assessment to implementation, we ensure your organization is
              prepared for successful AI adoption.
            </p>
            <div className="flex flex-col sm:flex-row gap-4">
              <BookDiscoveryButton size="lg" variant="default" />
              <Button variant="outline" size="lg" asChild>
                <Link href="#packages">View Programs</Link>
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Rest of the sections */}
      {/* Readiness Dimensions Section */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-4">
            Comprehensive AI Readiness Assessment
          </h2>
          <p className="text-center text-gray-600 mb-12 max-w-2xl mx-auto">
            Our assessment framework evaluates your organization across six
            critical dimensions to ensure successful AI implementation.
          </p>
          <div className="grid md:grid-cols-3 gap-8">
            {readinessDimensions.map((dimension, index) => (
              <div
                key={index}
                className="bg-white p-6 rounded-lg shadow-sm border border-gray-100"
              >
                <div className="w-12 h-12 bg-success-100 rounded-lg flex items-center justify-center mb-4">
                  <span className="text-2xl">{dimension.icon}</span>
                </div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">
                  {dimension.title}
                </h3>
                <p className="text-gray-600 mb-4">{dimension.description}</p>
                <ul className="space-y-2">
                  {dimension.checkpoints.map((checkpoint, idx) => (
                    <li key={idx} className="flex items-start">
                      <CheckIcon className="w-5 h-5 text-success-600 mr-2 mt-0.5" />
                      <span className="text-gray-600">{checkpoint}</span>
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Implementation Roadmap */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            Your Path to AI Success
          </h2>
          <div className="max-w-5xl mx-auto">
            {roadmapSteps.map((step, index) => (
              <div
                key={index}
                className="flex flex-col md:flex-row gap-8 mb-12 last:mb-0"
              >
                <div className="md:w-1/3">
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-success-100 rounded-full flex items-center justify-center text-success-600 font-bold">
                      {index + 1}
                    </div>
                    <h3 className="text-xl font-semibold text-gray-900">
                      {step.title}
                    </h3>
                  </div>
                </div>
                <div className="md:w-2/3">
                  <p className="text-gray-600 mb-4">{step.description}</p>
                  <ul className="grid grid-cols-2 gap-2">
                    {step.deliverables.map((deliverable, idx) => (
                      <li key={idx} className="flex items-center text-gray-600">
                        <CheckIcon className="w-5 h-5 text-success-600 mr-2" />
                        {deliverable}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Programs Section */}
      <section id="packages" className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            AI Readiness Programs
          </h2>
          <div className="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto">
            {programs.map((program, index) => (
              <div
                key={index}
                className={`
                  rounded-lg p-8
                  flex flex-col
                  h-full
                  ${program.featured ? "border-2 border-success-600 shadow-lg" : "border border-gray-200"}
                `}
              >
                <div className="text-center mb-6">
                  <h3 className="text-2xl font-bold text-gray-900 mb-2">
                    {program.name}
                  </h3>
                  <div className="text-3xl font-bold text-success-600 mb-2">
                    {program.price}
                  </div>
                  <p className="text-sm text-gray-600 mb-4">
                    {program.duration}
                  </p>
                  <p className="text-gray-600">{program.description}</p>
                </div>
                <ul className="space-y-4 mb-8 flex-grow">
                  {program.features.map((feature, featureIndex) => (
                    <li key={featureIndex} className="flex items-start">
                      <CheckIcon className="w-5 h-5 text-success-600 mr-2 mt-0.5" />
                      <span className="text-gray-600">{feature}</span>
                    </li>
                  ))}
                </ul>
                <div className="mt-auto">
                  <BookDiscoveryButton
                    size="lg"
                    variant="default"
                    className="w-full"
                  />
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* ROI Calculator Section */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-4">
            Calculate Your AI ROI
          </h2>
          <p className="text-center text-gray-600 mb-12 max-w-2xl mx-auto">
            Use our calculator to estimate the potential return on investment
            for your AI initiatives.
          </p>
          <AIROICalculator />
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-success-600">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold text-white mb-6">
            Start Your AI Journey Today
          </h2>
          <p className="text-xl text-success-100 mb-8 max-w-2xl mx-auto">
            Get a comprehensive assessment of your organization's AI readiness
            and a clear roadmap for successful implementation.
          </p>
          <BookDiscoveryButton
            size="lg"
            variant="outline"
            className="bg-background text-success-600 hover:bg-background/90"
          />
        </div>
      </section>
    </div>
  );
}

================
File: src/components/services/data-strategy/DataStrategyContent.tsx
================
// Path: neural_nexus_frontend/src/components/services/data-strategy/DataStrategyContent.tsx
"use client";

import { Button } from "@/components/ui/button";
import Link from "next/link";
import { BookDiscoveryButton } from "@/components/features/booking/BookDiscoveryButton";

// Move the CheckIcon component to the top level
const CheckIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    {...props}
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M5 13l4 4L19 7"
    />
  </svg>
);

// Define the data structure types
interface SolutionType {
  icon: React.ReactNode;
  title: string;
  description: string;
  features: string[];
}

interface PackageType {
  name: string;
  price: string;
  duration: string;
  description: string;
  features: string[];
  featured: boolean;
}

// Separate the data
const solutions: SolutionType[] = [
  {
    icon: <span className="text-2xl">📊</span>,
    title: "Data Maturity Assessment",
    description:
      "Evaluate your current capabilities and identify opportunities",
    features: [
      "Technology stack evaluation",
      "Process assessment",
      "Team capabilities review",
      "Gap analysis",
    ],
  },
  {
    icon: <span className="text-2xl">🎯</span>,
    title: "Strategy Development",
    description: "Create a comprehensive data strategy aligned with your goals",
    features: [
      "Business alignment",
      "Technology roadmap",
      "Governance framework",
      "ROI modeling",
    ],
  },
  {
    icon: <span className="text-2xl">⚡</span>,
    title: "Implementation Support",
    description: "Hands-on guidance through execution",
    features: [
      "Project planning",
      "Vendor selection",
      "Team training",
      "Change management",
    ],
  },
];

const packages: PackageType[] = [
  {
    name: "Quick Start Assessment",
    price: "$15,000",
    duration: "2 weeks",
    description: "Perfect for organizations starting their data journey",
    features: [
      "Data maturity assessment",
      "Current state analysis",
      "Gap identification",
      "High-level recommendations",
      "Executive presentation",
    ],
    featured: false,
  },
  {
    name: "Strategic Roadmap",
    price: "$45,000",
    duration: "6 weeks",
    description:
      "Comprehensive strategy development and implementation planning",
    features: [
      "Everything in Quick Start",
      "Detailed future state design",
      "Implementation roadmap",
      "ROI analysis",
      "Executive workshop",
      "30-day follow-up support",
    ],
    featured: true,
  },
  {
    name: "Full Transformation",
    price: "$95,000",
    duration: "12 weeks",
    description: "Complete strategy and implementation support",
    features: [
      "Everything in Strategic Roadmap",
      "Change management strategy",
      "Team structure design",
      "Vendor evaluation",
      "90-day implementation support",
      "Custom training program",
    ],
    featured: false,
  },
];

// Create smaller, focused components
const SolutionCard = ({ solution }: { solution: SolutionType }) => (
  <div className="bg-white p-6 rounded-lg shadow-sm">
    <div className="w-12 h-12 bg-innovation-100 rounded-lg flex items-center justify-center mb-4">
      {solution.icon}
    </div>
    <h3 className="text-xl font-semibold text-gray-900 mb-2">
      {solution.title}
    </h3>
    <p className="text-gray-600 mb-4">{solution.description}</p>
    <ul className="space-y-2">
      {solution.features.map((feature, idx) => (
        <li key={idx} className="flex items-start">
          <CheckIcon className="w-5 h-5 text-innovation-600 mr-2 mt-0.5" />
          <span className="text-gray-600">{feature}</span>
        </li>
      ))}
    </ul>
  </div>
);

const PackageCard = ({ pkg }: { pkg: PackageType }) => (
  <div
    className={`
      rounded-lg p-8
      flex flex-col
      h-full
      ${pkg.featured ? "border-2 border-innovation-600 shadow-lg" : "border border-gray-200"}
    `}
  >
    <div className="text-center mb-6">
      <h3 className="text-2xl font-bold text-gray-900 mb-2">{pkg.name}</h3>
      <div className="text-3xl font-bold text-innovation-600 mb-2">
        {pkg.price}
      </div>
      <p className="text-sm text-gray-600 mb-4">{pkg.duration}</p>
      <p className="text-gray-600">{pkg.description}</p>
    </div>
    <ul className="space-y-4 mb-8 flex-grow">
      {pkg.features.map((feature, idx) => (
        <li key={idx} className="flex items-start">
          <CheckIcon className="w-5 h-5 text-innovation-600 mr-2 mt-0.5" />
          <span className="text-gray-600">{feature}</span>
        </li>
      ))}
    </ul>
    <div className="mt-auto">
      <BookDiscoveryButton size="lg" variant="default" className="w-full" />
    </div>
  </div>
);

export default function DataStrategyContent() {
  return (
    <div className="flex flex-col">
      {/* Hero Section */}
      <section className="pt-24 pb-16 bg-gradient-to-b from-innovation-50 to-white">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <div className="inline-block px-4 py-2 bg-innovation-100 text-innovation-700 rounded-full text-sm font-medium mb-6">
              Data Strategy Consulting
            </div>
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
              Build a Data Strategy That
              <span className="text-innovation-600"> Drives Results</span>
            </h1>
            <p className="text-xl text-gray-600 mb-8">
              Transform your organization with a comprehensive data strategy
              that aligns with your business objectives. From assessment to
              implementation, we guide you every step of the way.
            </p>
            <div className="flex flex-col sm:flex-row gap-4">
              <BookDiscoveryButton size="lg" variant="default" />
              <Button variant="outline" size="lg" asChild>
                <Link href="#packages">View Packages</Link>
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Solutions Section */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            Our Solutions
          </h2>
          <div className="grid md:grid-cols-3 gap-8">
            {solutions.map((solution, index) => (
              <SolutionCard key={index} solution={solution} />
            ))}
          </div>
        </div>
      </section>

      {/* Packages Section */}
      <section id="packages" className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            Choose Your Package
          </h2>
          <div className="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto">
            {packages.map((pkg, index) => (
              <PackageCard key={index} pkg={pkg} />
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-innovation-600">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold text-white mb-6">
            Ready to Build Your Data Strategy?
          </h2>
          <p className="text-xl text-innovation-100 mb-8 max-w-2xl mx-auto">
            Book a consultation to discuss how we can help you develop and
            implement a data strategy that drives real business value.
          </p>
          <BookDiscoveryButton
            size="lg"
            variant="default"
            className="bg-white text-innovation-600 hover:bg-innovation-50"
          />
        </div>
      </section>
    </div>
  );
}

================
File: src/components/services/fractional-cdo/FractionalCDOContent.tsx
================
// Path: neural_nexus_frontend/src/components/services/fractional-cdo/FractionalCDOContent.tsx
"use client";

import { Button } from "@/components/ui/button";
import { BookDiscoveryButton } from "@/components/features/booking/BookDiscoveryButton";
import Link from "next/link";

const CheckIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    {...props}
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M5 13l4 4L19 7"
    />
  </svg>
);

const benefits = [
  {
    icon: <span className="text-2xl">💡</span>,
    title: "Executive Expertise",
    description:
      "Get C-level data leadership experience without the full-time executive cost.",
  },
  {
    icon: <span className="text-2xl">🚀</span>,
    title: "Strategic Guidance",
    description:
      "Develop and execute data strategies aligned with your business objectives.",
  },
  {
    icon: <span className="text-2xl">⚡</span>,
    title: "Flexible Engagement",
    description:
      "Scale services up or down based on your organization's needs.",
  },
];

const services = [
  {
    icon: <span className="text-2xl">📊</span>,
    title: "Strategic Planning",
    description:
      "Develop comprehensive data strategies aligned with business objectives.",
  },
  {
    icon: <span className="text-2xl">👥</span>,
    title: "Team Development",
    description: "Build and mentor high-performing data teams.",
  },
  {
    icon: <span className="text-2xl">🛠️</span>,
    title: "Technology Selection",
    description: "Evaluate and select the right tools and platforms.",
  },
  {
    icon: <span className="text-2xl">📈</span>,
    title: "Performance Metrics",
    description: "Define and track KPIs to measure data initiative success.",
  },
];

const pricingPlans = [
  {
    name: "Essentials",
    price: "5,000",
    description: "Perfect for growing companies starting their data journey",
    features: [
      "Managed Service for strategic data advisory",
      "Monthly data strategy review",
      "Quarterly roadmap updates",
      "Email support",
      "Basic KPI dashboard",
    ],
    featured: false,
  },
  {
    name: "Professional",
    price: "10,000",
    description: "Ideal for companies serious about data transformation",
    features: [
      "Managed Service for strategic data advisory",
      "Bi-weekly strategy sessions",
      "Monthly board meeting prep",
      "Priority support",
      "Advanced KPI tracking",
      "Team hiring support",
    ],
    featured: true,
  },
  {
    name: "Enterprise",
    price: "20,000",
    description: "For organizations where data is a critical strategic asset",
    features: [
      "Managed Service for strategic data advisory",
      "Weekly strategy sessions",
      "24/7 emergency support",
      "Custom analytics dashboards",
      "Full vendor management",
      "Crisis management support",
    ],
    featured: false,
  },
];

export default function FractionalCDOContent() {
  return (
    <div className="flex flex-col">
      {/* Hero Section */}
      <section className="pt-24 pb-16 bg-gradient-to-b from-primary-50 to-white">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto">
            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
              Fractional Chief Data Officer Services
            </h1>
            <p className="text-xl text-gray-600 mb-8">
              Enterprise-grade data leadership without the cost of a full-time
              executive. Get strategic guidance, implementation expertise, and
              ongoing support.
            </p>
            <div className="inline-flex flex-col sm:flex-row gap-4 justify-center w-full">
              <BookDiscoveryButton size="lg" variant="default" />
            </div>
          </div>
        </div>
      </section>

      {/* Benefits Section */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            Why Choose a Fractional CDO?
          </h2>
          <div className="grid md:grid-cols-3 gap-8">
            {benefits.map((benefit, index) => (
              <div
                key={index}
                className="flex flex-col items-start p-6 bg-white rounded-lg shadow-sm"
              >
                <div className="w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mb-4">
                  {benefit.icon}
                </div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">
                  {benefit.title}
                </h3>
                <p className="text-gray-600">{benefit.description}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Services Overview */}
      <section className="py-16 bg-gray-50">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            What You Get
          </h2>
          <div className="grid md:grid-cols-2 gap-8">
            {services.map((service, index) => (
              <div key={index} className="flex gap-4">
                <div className="w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center flex-shrink-0">
                  {service.icon}
                </div>
                <div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">
                    {service.title}
                  </h3>
                  <p className="text-gray-600">{service.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Pricing Section */}
      <section id="pricing" className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            Simple, Transparent Pricing
          </h2>
          <div className="grid md:grid-cols-3 gap-8 max-w-5xl mx-auto">
            {pricingPlans.map((plan, index) => (
              <div
                key={index}
                className={`
                  rounded-lg p-8
                  flex flex-col
                  h-full
                  ${plan.featured ? "border-2 border-primary-600 shadow-lg" : "border border-gray-200"}
                `}
              >
                <div className="text-center mb-6">
                  <h3 className="text-2xl font-bold text-gray-900 mb-2">
                    {plan.name}
                  </h3>
                  <div className="text-4xl font-bold text-primary-600 mb-2">
                    ${plan.price}
                    <span className="text-base font-normal text-gray-600">
                      /month
                    </span>
                  </div>
                  <p className="text-gray-600">{plan.description}</p>
                </div>
                <ul className="space-y-4 mb-8 flex-grow">
                  {plan.features.map((feature, featureIndex) => (
                    <li
                      key={featureIndex}
                      className="flex items-center text-gray-600"
                    >
                      <CheckIcon className="w-5 h-5 text-primary-600 mr-2" />
                      {feature}
                    </li>
                  ))}
                </ul>
                <div className="mt-auto">
                  <BookDiscoveryButton
                    size="lg"
                    variant="default"
                    className="w-full"
                  />
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-primary-600">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl font-bold text-white mb-6">
            Ready to Transform Your Data Strategy?
          </h2>
          <p className="text-xl text-primary-100 mb-8 max-w-2xl mx-auto">
            Schedule a discovery call to discuss how our Fractional CDO services
            can help your organization leverage data for strategic advantage.
          </p>
          <BookDiscoveryButton
            size="lg"
            variant="outline"
            className="bg-background text-primary-600 hover:bg-background/90"
          />
        </div>
      </section>
    </div>
  );
}

================
File: src/components/services/ServicesContent.tsx
================
// Path: neural_nexus_frontend/src/components/services/ServicesContent.tsx
"use client";

import { Suspense } from "react";
import dynamic from "next/dynamic";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import Link from "next/link";

// Dynamic import for the breadcrumb
const ServiceBreadcrumb = dynamic(
  () =>
    import("@/components/marketing/services/service-breadcrumb").then(
      (mod) => mod.ServiceBreadcrumb,
    ),
  {
    ssr: false,
    loading: () => <div className="h-8 bg-gray-100 rounded animate-pulse" />,
  },
);

interface Feature {
  id: number;
  name: string;
  description: string;
  is_highlighted: boolean;
  order: number;
}

interface Deliverable {
  id: number;
  name: string;
  description: string;
  timeline: string;
  order: number;
}

interface Service {
  id: number;
  category: number;
  name: string;
  slug: string;
  package_type: "ESSENTIALS" | "PROFESSIONAL" | "ENTERPRISE";
  description: string;
  base_price: string;
  duration: string;
  is_active: boolean;
  features: Feature[];
  deliverables: Deliverable[];
}

interface ServiceResponse {
  count: number;
  next: string | null;
  previous: string | null;
  results: Service[];
}

export default function ServicesContent() {
  const [services, setServices] = useState<Service[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const getPackageTypeColor = (type: string) => {
    switch (type) {
      case "ESSENTIALS":
        return "bg-blue-100 text-blue-800";
      case "PROFESSIONAL":
        return "bg-purple-100 text-purple-800";
      case "ENTERPRISE":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const formatPrice = (price: string) => {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
      minimumFractionDigits: 0,
    }).format(parseFloat(price));
  };

  useEffect(() => {
    const fetchServices = async () => {
      try {
        const apiUrl = process.env.NEXT_PUBLIC_API_URL;
        console.log("Attempting to fetch from:", apiUrl);

        if (!apiUrl) {
          throw new Error("API URL is not configured");
        }

        const response = await fetch(`${apiUrl}/api/services/`, {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
          mode: "cors",
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("Received data:", data);
        setServices(data.results);
        setLoading(false);
      } catch (err) {
        console.error("Error details:", err);
        setError(
          err instanceof Error ? err.message : "Failed to load services",
        );
        setLoading(false);
      }
    };

    fetchServices();
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50">
        <div className="text-xl">Loading services...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50">
        <div className="text-red-500">
          <p>Error loading services:</p>
          <p>{error}</p>
        </div>
      </div>
    );
  }

  return (
    <main className="min-h-screen bg-gradient-to-br from-primary-50 via-white to-secondary-50">
      <div className="container mx-auto px-4 py-12">
        <Suspense
          fallback={<div className="h-8 bg-gray-100 rounded animate-pulse" />}
        >
          <ServiceBreadcrumb
            items={[{ label: "All Services" }]}
            className="mb-8"
          />
        </Suspense>

        <div className="max-w-4xl mx-auto text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-6">
            Our Services
          </h1>
          <p className="text-lg md:text-xl text-gray-600">
            Transform your organization with our comprehensive data and AI
            solutions
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {services.map((service) => (
            <div
              key={service.id}
              className="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300 flex flex-col"
            >
              <div className="p-6 flex flex-col h-full">
                <div className="flex justify-between items-start mb-4">
                  <h2 className="text-xl font-bold text-gray-900">
                    {service.name}
                  </h2>
                  <span
                    className={`${getPackageTypeColor(
                      service.package_type,
                    )} px-3 py-1 rounded-full text-sm font-medium`}
                  >
                    {service.package_type}
                  </span>
                </div>

                <div className="mb-4">
                  <div className="text-3xl font-bold text-gray-900">
                    {formatPrice(service.base_price)}
                  </div>
                  <div className="text-gray-500">
                    Duration: {service.duration}
                  </div>
                </div>

                <p className="text-gray-600 mb-6">{service.description}</p>

                <div className="mb-6 flex-grow">
                  <h3 className="font-semibold text-gray-900 mb-2">
                    Key Features
                  </h3>
                  <ul className="space-y-2">
                    {service.features.map((feature) => (
                      <li key={feature.id} className="flex items-start">
                        <svg
                          className="h-5 w-5 text-primary mr-2 mt-0.5"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M5 13l4 4L19 7"
                          />
                        </svg>
                        <span className="text-gray-600">{feature.name}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                <div className="mb-6 flex-grow">
                  <h3 className="font-semibold text-gray-900 mb-2">
                    Deliverables
                  </h3>
                  <ul className="space-y-2">
                    {service.deliverables.map((deliverable) => (
                      <li key={deliverable.id} className="text-gray-600">
                        <div className="font-medium">{deliverable.name}</div>
                        <div className="text-sm text-gray-500">
                          Timeline: {deliverable.timeline}
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>

                <div className="mt-auto">
                  <Button
                    asChild
                    variant="default"
                    size="lg"
                    className="w-full"
                  >
                    <Link href={`/services/${service.slug}`}>Learn More</Link>
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </main>
  );
}

================
File: src/components/test/TrackingTest.tsx
================
// src/components/test/TrackingTest.tsx
"use client";

import { useState, useEffect } from "react";
import { tracking } from "@/lib/tracking";
import { DeviceInfo } from "@/lib/tracking/types";

export default function TrackingTest() {
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo | null>(null);
  const [events, setEvents] = useState<any[]>([]);

  useEffect(() => {
    async function initTest() {
      await tracking.initialize();
      // Changed this line to use new public method
      const info = await tracking.getDeviceInfo();
      setDeviceInfo(info);

      tracking.trackEvent("test_event", {
        testData: "Testing tracking system",
      });
    }

    initTest();
  }, []);

  return (
    <div className="p-6 m-4 border rounded bg-white shadow">
      <h2 className="text-xl font-bold mb-4">Tracking Test Results</h2>

      <div className="mb-4">
        <h3 className="font-semibold">Device Information:</h3>
        {deviceInfo ? (
          <pre className="bg-gray-100 p-4 rounded mt-2 overflow-auto">
            {JSON.stringify(deviceInfo, null, 2)}
          </pre>
        ) : (
          <p>Loading device info...</p>
        )}
      </div>

      <div className="mb-4">
        <button
          onClick={() => {
            tracking.trackEvent("button_click", {
              buttonId: "test_button",
              timestamp: new Date().toISOString(),
            });
          }}
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
        >
          Test Track Event
        </button>
      </div>
    </div>
  );
}

================
File: src/components/ui/alert/alert.test.tsx
================
// File: src/components/ui/alert/alert.test.tsx
import { render, screen } from '@testing-library/react';
import { Alert, AlertDescription } from './index';

describe('Alert', () => {
  it('renders with default variant', () => {
    render(<Alert>Test alert</Alert>);
    const alert = screen.getByRole('alert');
    expect(alert).toHaveClass('bg-[var(--colors-alert-info-background)]');
    expect(alert).toHaveClass('text-[var(--colors-alert-info-foreground)]');
    expect(alert).toHaveTextContent('Test alert');
  });

  it('renders with destructive variant', () => {
    render(<Alert variant="destructive">Error alert</Alert>);
    const alert = screen.getByRole('alert');
    expect(alert).toHaveClass('bg-[var(--colors-alert-error-background)]');
    expect(alert).toHaveClass('text-[var(--colors-alert-error-foreground)]');
  });

  it('renders with success variant', () => {
    render(<Alert variant="success">Success alert</Alert>);
    const alert = screen.getByRole('alert');
    expect(alert).toHaveClass('bg-[var(--colors-alert-success-background)]');
    expect(alert).toHaveClass('text-[var(--colors-alert-success-foreground)]');
  });

  it('applies additional className when provided', () => {
    render(<Alert className="custom-class">Test alert</Alert>);
    const alert = screen.getByRole('alert');
    expect(alert).toHaveClass('custom-class');
  });

  it('renders AlertDescription correctly', () => {
    render(
      <Alert>
        Alert text
        <AlertDescription>Description text</AlertDescription>
      </Alert>
    );
    expect(screen.getByText('Description text')).toHaveClass('mt-1');
  });
});

================
File: src/components/ui/alert/index.tsx
================
// File: src/components/ui/alert/index.tsx
import { cn } from "@/lib/utils";
import { AlertProps, AlertDescriptionProps } from "./types";

export function Alert({
  children,
  variant = "default",
  className,
}: AlertProps) {
  const baseStyles = "rounded-lg p-4 mb-4 text-sm";

  const variantStyles = {
    default:
      "bg-[var(--colors-alert-info-background)] text-[var(--colors-alert-info-foreground)]",
    destructive:
      "bg-[var(--colors-alert-error-background)] text-[var(--colors-alert-error-foreground)]",
    success:
      "bg-[var(--colors-alert-success-background)] text-[var(--colors-alert-success-foreground)]",
  };

  return (
    <div
      className={cn(baseStyles, variantStyles[variant], className)}
      role="alert"
    >
      {children}
    </div>
  );
}

export function AlertDescription({
  children,
  className,
}: AlertDescriptionProps) {
  return <div className={cn("mt-1", className)}>{children}</div>;
}

export default Alert;

================
File: src/components/ui/alert/types.ts
================
// File: src/components/ui/alert/types.ts
import { BaseProps } from "@/components/_lib/types";

export type AlertVariant = "default" | "destructive" | "success";

export interface AlertProps extends BaseProps {
  /**
   * The content of the alert
   */
  children: React.ReactNode;
  
  /**
   * The variant of the alert
   * @default "default"
   */
  variant?: AlertVariant;
}

export interface AlertDescriptionProps extends BaseProps {
  /**
   * The content of the alert description
   */
  children: React.ReactNode;
}

================
File: src/components/ui/button/index.tsx
================
///neural_nexus_frontend/src/components/ui/button/index.tsx
"use client";

import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cn } from "@/lib/utils";

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  asChild?: boolean;
  variant?: "default" | "outline" | "destructive" | "ghost";
  size?: "default" | "sm" | "lg";
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      className,
      variant = "default",
      size = "default",
      asChild = false,
      ...props
    },
    ref,
  ) => {
    const Comp = asChild ? Slot : "button";
    const baseStyles =
      "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50";

    const variants = {
      default: "bg-primary text-foreground hover:bg-primary/90",
      outline:
        "bg-background text-primary border border-primary hover:bg-primary hover:text-foreground",
      destructive:
        "bg-destructive text-destructive-foreground hover:bg-destructive/90",
      ghost: "hover:bg-accent hover:text-accent-foreground",
    };

    const sizes = {
      default: "h-10 px-4 py-2",
      sm: "h-9 px-3 rounded-md",
      lg: "h-11 px-8 rounded-md",
    };

    return (
      <Comp
        className={cn(baseStyles, variants[variant], sizes[size], className)}
        ref={ref}
        {...props}
      />
    );
  },
);
Button.displayName = "Button";

export { Button };

================
File: src/components/ui/button/types.ts
================
// Path: src/components/ui/button/types.ts
import { VariantProps } from "class-variance-authority";

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "default" | "outline" | "destructive" | "ghost" | "white";
  size?: "default" | "sm" | "lg" | "icon";
  asChild?: boolean;
}

================
File: src/components/ui/card/card.test.tsx
================
// File: src/components/ui/card/card.test.tsx
import { render, screen } from "@testing-library/react";
import {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
} from "./index";

describe("Card Components", () => {
  describe("Card", () => {
    it("renders with default styles", () => {
      render(<Card>Card Content</Card>);
      const card = screen.getByText("Card Content");
      expect(card).toHaveClass("bg-[var(--colors-card-background)]");
      expect(card).toHaveClass("border-[var(--colors-card-border)]");
    });

    it("applies clickable styles when clickable prop is true", () => {
      render(<Card clickable>Clickable Card</Card>);
      expect(screen.getByText("Clickable Card")).toHaveClass("cursor-pointer");
    });

    it("disables hover effects when disableHover is true", () => {
      render(<Card disableHover>No Hover Card</Card>);
      const card = screen.getByText("No Hover Card");
      expect(card).not.toHaveClass("hover:bg-[var(--colors-card-hover)]");
    });
  });

  describe("CardHeader", () => {
    it("renders with default padding", () => {
      render(<CardHeader>Header Content</CardHeader>);
      expect(screen.getByText("Header Content")).toHaveClass("p-6");
    });

    it("renders with compact padding when compact prop is true", () => {
      render(<CardHeader compact>Compact Header</CardHeader>);
      expect(screen.getByText("Compact Header")).toHaveClass("p-4");
    });
  });

  describe("CardTitle", () => {
    it("renders with correct text styles", () => {
      render(<CardTitle>Card Title</CardTitle>);
      const title = screen.getByText("Card Title");
      expect(title).toHaveClass("text-2xl");
      expect(title).toHaveClass("font-semibold");
    });

    it("preserves line breaks when preserveLineBreaks is true", () => {
      const text = "Multiline\nTitle";
      render(<CardTitle preserveLineBreaks>{text}</CardTitle>);
      // Find by role instead of exact text
      const title = screen.getByRole("heading");
      expect(title).toHaveClass("whitespace-pre-line");
      expect(title.textContent).toBe("Multiline\nTitle");
    });
  });

  describe("CardDescription", () => {
    it("renders with correct text styles", () => {
      render(<CardDescription>Description</CardDescription>);
      expect(screen.getByText("Description")).toHaveClass("text-sm");
    });

    it("applies line clamp when lineClamp prop is provided", () => {
      render(<CardDescription lineClamp={2}>Long Description</CardDescription>);
      expect(screen.getByText("Long Description")).toHaveClass("line-clamp-2");
    });
  });

  describe("CardContent", () => {
    it("renders with default padding", () => {
      render(<CardContent>Content</CardContent>);
      const content = screen.getByText("Content");
      expect(content).toHaveClass("p-6");
      expect(content).toHaveClass("pt-0");
    });

    it("removes padding when noPadding is true", () => {
      render(<CardContent noPadding>No Padding Content</CardContent>);
      const content = screen.getByText("No Padding Content");
      expect(content).not.toHaveClass("p-6");
      expect(content).toHaveClass("pt-0");
    });
  });

  describe("CardFooter", () => {
    it("renders with default center alignment", () => {
      render(<CardFooter>Footer</CardFooter>);
      expect(screen.getByText("Footer")).toHaveClass("justify-center");
    });

    it("aligns items based on align prop", () => {
      render(<CardFooter align="end">End Footer</CardFooter>);
      expect(screen.getByText("End Footer")).toHaveClass("justify-end");
    });
  });
});

================
File: src/components/ui/card/index.tsx
================
// File: src/components/ui/card/index.tsx
import * as React from "react";
import { cn } from "@/lib/utils";
import type {
  CardProps,
  CardHeaderProps,
  CardTitleProps,
  CardDescriptionProps,
  CardContentProps,
  CardFooterProps,
} from "./types";

const Card = React.forwardRef<HTMLDivElement, CardProps>(
  ({ className, clickable, disableHover, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "rounded-lg border bg-[var(--colors-card-background)] text-[var(--colors-card-foreground)] border-[var(--colors-card-border)] shadow-sm",
          clickable && "cursor-pointer",
          !disableHover && "hover:bg-[var(--colors-card-hover)]",
          className,
        )}
        {...props}
      />
    );
  },
);
Card.displayName = "Card";

const CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>(
  ({ className, compact, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "flex flex-col space-y-1.5",
          compact ? "p-4" : "p-6",
          className,
        )}
        {...props}
      />
    );
  },
);
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<HTMLHeadingElement, CardTitleProps>(
  ({ className, preserveLineBreaks, ...props }, ref) => {
    return (
      <h3
        ref={ref}
        className={cn(
          "text-2xl font-semibold leading-none tracking-tight text-[var(--colors-card-foreground)]",
          preserveLineBreaks && "whitespace-pre-line",
          className,
        )}
        {...props}
      />
    );
  },
);
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  CardDescriptionProps
>(({ className, lineClamp, ...props }, ref) => {
  return (
    <p
      ref={ref}
      className={cn(
        "text-sm text-[var(--colors-muted-foreground)]",
        lineClamp && `line-clamp-${lineClamp}`,
        className,
      )}
      {...props}
    />
  );
});
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<HTMLDivElement, CardContentProps>(
  ({ className, noPadding, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(noPadding ? "pt-0" : "p-6 pt-0", className)}
        {...props}
      />
    );
  },
);
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>(
  ({ className, align = "center", ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn(
          "flex p-6 pt-0",
          {
            "justify-start": align === "start",
            "justify-center": align === "center",
            "justify-end": align === "end",
          },
          className,
        )}
        {...props}
      />
    );
  },
);
CardFooter.displayName = "CardFooter";

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardDescription,
  CardContent,
};

================
File: src/components/ui/card/types.ts
================
// File: src/components/ui/card/types.ts
import { BaseProps } from "@/components/_lib/types";

export interface CardProps extends BaseProps {
  /**
   * Whether the card is clickable
   */
  clickable?: boolean;

  /**
   * Whether to disable hover effects
   */
  disableHover?: boolean;
}

export interface CardHeaderProps extends BaseProps {
  /**
   * Whether to reduce the padding
   */
  compact?: boolean;
}

export interface CardTitleProps extends BaseProps {
  /**
   * Whether to preserve line breaks
   */
  preserveLineBreaks?: boolean;
}

export interface CardDescriptionProps extends BaseProps {
  /**
   * Number of lines to truncate at
   */
  lineClamp?: number;
}

export interface CardContentProps extends BaseProps {
  /**
   * Whether to remove padding
   */
  noPadding?: boolean;
}

export interface CardFooterProps extends BaseProps {
  /**
   * Alignment of footer items
   */
  align?: "start" | "center" | "end";
}

================
File: src/components/ui/form/__tests__/test-utils.tsx
================
// src/components/ui/form/__tests__/test-utils.tsx
import React from "react";
import { render as rtlRender, screen } from "@testing-library/react";
import { ThemeProvider } from "@/components/theme-provider";

export function render(ui: React.ReactElement) {
  return rtlRender(
    <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
      {ui}
    </ThemeProvider>,
  );
}

describe("render utility", () => {
  it("renders component with theme provider", () => {
    render(<div>Test Content</div>);
    expect(screen.getByText("Test Content")).toBeInTheDocument();
  });
});

================
File: src/components/ui/form/form.test.tsx
================
// File: src/components/ui/form/form.test.tsx
import React from "react";
import { render, screen } from "@testing-library/react";
import { useForm } from "react-hook-form";
import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
} from "./index";

interface TestFormValues {
  test: string;
}

const MessageFormWithIcon = () => {
  const form = useForm<TestFormValues>({
    defaultValues: { test: "" },
  });

  return (
    <Form {...form}>
      <FormField<TestFormValues>
        control={form.control}
        name="test"
        render={({ field }) => (
          <FormItem>
            <FormMessage>Required field</FormMessage>
          </FormItem>
        )}
      />
    </Form>
  );
};

const MessageFormWithoutIcon = () => {
  const form = useForm({
    defaultValues: { test: "" },
  });

  return (
    <Form {...form}>
      <FormField
        control={form.control}
        name="test"
        render={({ field }) => (
          <FormItem>
            <FormMessage showIcon={false}>Required field</FormMessage>
          </FormItem>
        )}
      />
    </Form>
  );
};

const ErrorForm = () => {
  const form = useForm({
    defaultValues: { test: "" },
  });

  // Use React.useEffect to ensure the error is set after render
  React.useEffect(() => {
    form.setError("test", { type: "required", message: "Required" });
  }, []); // Empty dependency array

  return (
    <Form {...form}>
      <FormField
        control={form.control}
        name="test"
        render={() => (
          <FormItem>
            <FormLabel>Test Label</FormLabel>
            <FormControl>
              <input type="text" />
            </FormControl>
          </FormItem>
        )}
      />
    </Form>
  );
};

describe("Form Components", () => {
  describe("FormDescription", () => {
    it("renders with info icon when withIcon is true", () => {
      const TestComponent = () => {
        const form = useForm({
          defaultValues: { test: "" },
        });

        return (
          <Form {...form}>
            <FormField
              control={form.control}
              name="test"
              render={() => (
                <FormItem>
                  <FormDescription withIcon>Help text</FormDescription>
                </FormItem>
              )}
            />
          </Form>
        );
      };

      render(<TestComponent />);

      const icon = screen.getByTestId("form-info-icon");
      expect(icon).toBeInTheDocument();
      expect(icon).toHaveClass("h-4", "w-4");
    });
  });
});

describe("FormLabel", () => {
  it("renders with error styles when form has error", async () => {
    render(<ErrorForm />);
    const label = await screen.findByText("Test Label");
    expect(label).toHaveClass("text-[var(--colors-label-error)]");
  });
});

describe("FormMessage", () => {
  it("renders error message with icon", () => {
    render(<MessageFormWithIcon />);
    const message = screen.getByText("Required field");
    expect(message).toBeInTheDocument();
    const icon = screen.getByTestId("form-error-icon");
    expect(icon).toHaveClass("h-4", "w-4");
  });

  it("renders error message without icon when showIcon is false", () => {
    render(<MessageFormWithoutIcon />);
    const message = screen.getByText("Required field");
    expect(message).toBeInTheDocument();
    expect(screen.queryByTestId("form-error-icon")).not.toBeInTheDocument();
  });
});

describe("FormLabel", () => {
  it("renders with error styles when form has error", () => {
    render(<ErrorForm />);
    const label = screen.getByText("Test Label");
    expect(label.className).toContain("text-[var(--colors-label-error)]");
  });
});

================
File: src/components/ui/form/index.tsx
================
// src/components/ui/form/index.tsx
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  FormProvider,
  useFormContext,
  ControllerProps,
  FieldValues,
} from "react-hook-form";
import { cn } from "@/lib/utils";
import { Info, AlertCircle } from "lucide-react";
import {
  FormFieldProps,
  FormItemProps,
  FormLabelProps,
  FormControlProps,
  FormDescriptionProps,
  FormMessageProps,
} from "./types";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends Record<string, any> = Record<string, any>,
> = {
  name: string;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

// Update FormField to use the imported types
const FormField = <TFieldValues extends FieldValues = FieldValues>({
  ...props
}: FormFieldProps<TFieldValues>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

const FormItem = React.forwardRef<HTMLDivElement, FormItemProps>(
  ({ className, ...props }, ref) => {
    const id = React.useId();

    return (
      <FormItemContext.Provider value={{ id }}>
        <div ref={ref} className={cn("space-y-2", className)} {...props} />
      </FormItemContext.Provider>
    );
  },
);
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  FormLabelProps
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return (
    <LabelPrimitive.Root
      ref={ref}
      className={cn(
        "text-sm font-medium leading-none",
        error && "text-[var(--colors-label-error)]",
        className,
      )}
      htmlFor={formItemId}
      {...props}
    />
  );
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  FormControlProps
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
});
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  FormDescriptionProps
>(({ className, withIcon, children, ...props }, ref) => {
  const { formDescriptionId } = useFormField();

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn(
        "text-sm text-[var(--colors-form-placeholder)]",
        "flex items-center gap-2",
        className,
      )}
      {...props}
    >
      {withIcon && (
        <Info
          className="h-4 w-4"
          data-testid="form-info-icon"
          aria-hidden="true"
        />
      )}
      {children}
    </p>
  );
});
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<HTMLParagraphElement, FormMessageProps>(
  ({ className, children, showIcon = true, ...props }, ref) => {
    const { error, formMessageId } = useFormField();
    const body = error ? String(error?.message) : children;

    if (!body) {
      return null;
    }

    return (
      <p
        ref={ref}
        id={formMessageId}
        className={cn(
          "text-sm font-medium text-[var(--colors-form-error)]",
          "flex items-center gap-2",
          className,
        )}
        {...props}
      >
        {showIcon && (
          <AlertCircle
            className="h-4 w-4"
            data-testid="form-error-icon"
            aria-hidden="true"
          />
        )}
        {body}
      </p>
    );
  },
);
FormMessage.displayName = "FormMessage";

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};

================
File: src/components/ui/form/types.ts
================
// File: src/components/ui/form/types.ts
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import { ControllerProps, FieldValues } from "react-hook-form";
import { BaseProps } from "@/components/_lib/types";

export interface FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
> {
  name: string;
}

export interface FormItemContextValue {
  id: string;
}

export interface FormFieldProps<TFieldValues extends FieldValues = FieldValues>
  extends ControllerProps<TFieldValues> {}

export interface FormItemProps extends BaseProps {}

export interface FormLabelProps
  extends React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> {}

export interface FormControlProps
  extends React.ComponentPropsWithoutRef<typeof Slot> {}

export interface FormDescriptionProps extends BaseProps {
  /**
   * Whether to show an icon before the description
   */
  withIcon?: boolean;
}

export interface FormMessageProps extends BaseProps {
  /**
   * Whether to show an error icon
   */
  showIcon?: boolean;
}

================
File: src/components/ui/input/index.tsx
================
// File: src/components/ui/input/index.tsx
import * as React from "react";
import { Loader2, X } from "lucide-react";
import { cn } from "@/lib/utils";
import type { InputProps } from "./types";

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  (
    {
      className,
      error,
      type,
      size = "default",
      isLoading,
      startIcon,
      endIcon,
      isClearable,
      onClear,
      disabled,
      ...props
    },
    ref,
  ) => {
    // Handle clear button click
    const handleClear = (e: React.MouseEvent<HTMLButtonElement>) => {
      e.preventDefault();
      e.stopPropagation();
      onClear?.();
    };

    // Size variants
    const sizeClasses = {
      sm: "h-8 px-2 text-sm",
      default: "h-10 px-3 text-base",
      lg: "h-12 px-4 text-lg",
    };

    // Icon wrapper classes
    const iconClass =
      "flex items-center justify-center text-[var(--colors-input-icon)]";
    const startIconClass = cn(iconClass, "ml-2 mr-1");
    const endIconClass = cn(iconClass, "ml-1 mr-2");

    return (
      <div
        className={cn(
          "relative flex items-center rounded-md",
          "bg-[var(--colors-input-background)]",
          "border border-[var(--colors-input-border)]",
          error && "border-[var(--colors-form-error)]",
          "focus-within:ring-2 focus-within:ring-[var(--colors-input-focus)] focus-within:ring-offset-2",
          disabled && "opacity-50 cursor-not-allowed",
          className,
        )}
      >
        {/* Start Icon */}
        {startIcon && <div className={startIconClass}>{startIcon}</div>}

        {/* Input Element */}
        <input
          type={type}
          className={cn(
            // Base styles
            "w-full bg-transparent",
            "text-[var(--colors-input-foreground)]",
            "placeholder:text-[var(--colors-input-placeholder)]",
            // Remove default styles
            "border-0 focus:outline-none focus:ring-0",
            // Size variant
            sizeClasses[size],
            // Padding adjustments for icons
            startIcon && "pl-0",
            (endIcon || isLoading || isClearable) && "pr-0",
          )}
          ref={ref}
          disabled={disabled || isLoading}
          data-error={error ? "true" : undefined}
          {...props}
        />

        {/* Loading Spinner */}
        {isLoading && (
          <div className={endIconClass}>
            <Loader2 className="h-4 w-4 animate-spin" />
          </div>
        )}

        {/* Clear Button */}
        {isClearable && props.value && !isLoading && (
          <button
            type="button"
            onClick={handleClear}
            className={cn(
              endIconClass,
              "hover:text-[var(--colors-input-foreground)]",
              disabled && "cursor-not-allowed",
            )}
            disabled={disabled}
          >
            <X className="h-4 w-4" />
          </button>
        )}

        {/* End Icon */}
        {endIcon && !isLoading && !(isClearable && props.value) && (
          <div className={endIconClass}>{endIcon}</div>
        )}
      </div>
    );
  },
);
Input.displayName = "Input";

export { Input, type InputProps };

================
File: src/components/ui/input/input.test.tsx
================
// File: src/components/ui/input/input.test.tsx
import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { Search, Mail } from "lucide-react";
import { Input } from "@/components/ui/input";

describe("Input Component", () => {
  it("applies error styles when error prop is true", () => {
    render(<Input error={true} />);
    const wrapper = screen.getByRole("textbox").parentElement;
    expect(wrapper).toHaveClass("border-[var(--colors-form-error)]");
    expect(screen.getByRole("textbox")).toHaveAttribute("data-error", "true");
  });
});

describe("Input", () => {
  it("renders with default styles", () => {
    render(<Input placeholder="Test input" />);
    const input = screen.getByPlaceholderText("Test input");
    expect(input).toHaveClass("bg-transparent");
    expect(input).toHaveClass("text-[var(--colors-input-foreground)]");
  });

  it("shows error state when error prop is provided", () => {
    render(<Input error="Invalid input" />);
    const wrapper = screen.getByRole("textbox").parentElement;
    expect(wrapper).toHaveClass("border-[var(--colors-form-error)]");
  });

  it("renders in different sizes", () => {
    const { rerender } = render(<Input size="sm" />);
    expect(screen.getByRole("textbox")).toHaveClass("h-8");

    rerender(<Input size="lg" />);
    expect(screen.getByRole("textbox")).toHaveClass("h-12");
  });

  it("shows loading state", () => {
    render(<Input isLoading />);
    expect(screen.getByRole("textbox")).toBeDisabled();
    expect(document.querySelector(".animate-spin")).toBeInTheDocument();
  });

  it("renders with start icon", () => {
    render(<Input startIcon={<Search data-testid="search-icon" />} />);
    expect(screen.getByTestId("search-icon")).toBeInTheDocument();
  });

  it("renders with end icon", () => {
    render(<Input endIcon={<Mail data-testid="mail-icon" />} />);
    expect(screen.getByTestId("mail-icon")).toBeInTheDocument();
  });

  it("shows clear button when isClearable and has value", () => {
    render(<Input isClearable value="test" onChange={() => {}} />);
    expect(screen.getByRole("button")).toBeInTheDocument();
  });

  it("calls onClear when clear button is clicked", () => {
    const onClear = jest.fn();
    render(
      <Input isClearable value="test" onChange={() => {}} onClear={onClear} />,
    );

    fireEvent.click(screen.getByRole("button"));
    expect(onClear).toHaveBeenCalled();
  });

  it("applies disabled styles", () => {
    render(<Input disabled />);
    const wrapper = screen.getByRole("textbox").parentElement;
    expect(wrapper).toHaveClass("opacity-50");
    expect(wrapper).toHaveClass("cursor-not-allowed");
    expect(screen.getByRole("textbox")).toBeDisabled();
  });

  it("handles custom className", () => {
    render(<Input className="custom-class" />);
    const wrapper = screen.getByRole("textbox").parentElement;
    expect(wrapper).toHaveClass("custom-class");
  });

  it("applies error styles when error prop is true", () => {
    render(<Input error={true} />);
    const wrapper = screen.getByRole("textbox").parentElement;
    const input = screen.getByRole("textbox");
    expect(input).toHaveAttribute("data-error", "true");
    expect(wrapper).toHaveClass("border-[var(--colors-form-error)]");
  });

  it("prioritizes loading state over end icon", () => {
    render(<Input isLoading endIcon={<Mail data-testid="mail-icon" />} />);
    expect(screen.queryByTestId("mail-icon")).not.toBeInTheDocument();
    expect(document.querySelector(".animate-spin")).toBeInTheDocument();
  });

  it("prioritizes clear button over end icon when value exists", () => {
    render(
      <Input
        isClearable
        value="test"
        onChange={() => {}}
        endIcon={<Mail data-testid="mail-icon" />}
      />,
    );
    expect(screen.queryByTestId("mail-icon")).not.toBeInTheDocument();
    expect(screen.getByRole("button")).toBeInTheDocument();
  });
});

================
File: src/components/ui/input/types.ts
================
// File: src/components/ui/input/types.ts
// Path: neural_nexus_frontend/src/components/ui/input/types.ts
import { BaseProps } from "@/components/_lib/types";

export interface InputProps
  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, "size">,
    BaseProps {
  /**
   * Error state or message
   */
  error?: boolean | string;

  /**
   * Size variant of the input
   */
  size?: "sm" | "default" | "lg";

  /**
   * Whether to display a loading state
   */
  isLoading?: boolean;

  /**
   * Whether to show an icon at the start of the input
   */
  startIcon?: React.ReactNode;

  /**
   * Whether to show an icon at the end of the input
   */
  endIcon?: React.ReactNode;

  /**
   * Whether to show a clear button
   */
  isClearable?: boolean;

  /**
   * Callback when the clear button is clicked
   */
  onClear?: () => void;
}

================
File: src/components/ui/label/index.tsx
================
// Path: src/components/ui/label/index.tsx
"use client";

import * as React from "react";
import { Asterisk } from "lucide-react";
import { cn } from "@/lib/utils";
import type { LabelProps } from "./types";

const Label = React.forwardRef<HTMLLabelElement, LabelProps>(
  (
    {
      className,
      children,
      srOnly,
      required,
      error,
      disabled,
      size = "default",
      ...props
    },
    ref,
  ) => {
    const sizeVariants = {
      sm: "text-xs",
      default: "text-sm",
      lg: "text-base",
    } as const;

    const stateStyles = {
      error: "text-destructive",
      disabled: "text-muted-foreground cursor-not-allowed",
      default: "text-foreground",
    } as const;

    const currentState = error ? "error" : disabled ? "disabled" : "default";

    return (
      <label
        ref={ref}
        className={cn(
          "inline-flex items-center gap-1",
          sizeVariants[size],
          stateStyles[currentState],
          "font-medium",
          "peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
          srOnly && "sr-only",
          className,
        )}
        {...props}
      >
        {children}
        {required && (
          <span
            className={cn(
              "text-[0.75em]",
              error ? "text-destructive" : "text-destructive",
            )}
            aria-hidden="true"
          >
            <Asterisk className="h-3 w-3" />
          </span>
        )}
      </label>
    );
  },
);

Label.displayName = "Label";

export { Label };

================
File: src/components/ui/label/label.test.tsx
================
// Path: src/components/ui/label/label.test.tsx
import React from "react";
import { render, screen } from "@testing-library/react";
import { Label } from "./index";

describe("Label", () => {
  it("renders with basic props", () => {
    render(<Label>Test Label</Label>);
    expect(screen.getByText("Test Label")).toBeInTheDocument();
  });

  it("renders with required indicator", () => {
    render(<Label required>Required Field</Label>);
    const label = screen.getByText("Required Field");
    expect(label).toBeInTheDocument();
    // Check for asterisk
    expect(label.nextElementSibling).toHaveAttribute("aria-hidden", "true");
  });

  it("applies error styles", () => {
    render(<Label error>Error Label</Label>);
    const label = screen.getByText("Error Label");
    expect(label.parentElement).toHaveClass("text-destructive");
  });

  it("applies disabled styles", () => {
    render(<Label disabled>Disabled Label</Label>);
    const label = screen.getByText("Disabled Label");
    expect(label.parentElement).toHaveClass("text-muted-foreground");
  });

  it("applies screen reader only class", () => {
    render(<Label srOnly>Screen Reader Label</Label>);
    const label = screen.getByText("Screen Reader Label");
    expect(label.parentElement).toHaveClass("sr-only");
  });
});

================
File: src/components/ui/label/types.ts
================
// Path: src/components/ui/label/types.ts
import * as React from "react";

export interface LabelProps
  extends React.LabelHTMLAttributes<HTMLLabelElement> {
  srOnly?: boolean;
  required?: boolean;
  error?: boolean;
  disabled?: boolean;
  size?: "sm" | "default" | "lg";
}

================
File: src/components/ui/navigation-menu/index.tsx
================
// src/components/ui/navigation-menu/index.tsx
import * as React from "react";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";
import { ChevronDown, ExternalLink } from "lucide-react"; // Add ExternalLink import
import { cn } from "@/lib/utils";

// Add NavMenuItem type
interface NavMenuItem {
  label: string;
  href?: string;
  icon?: React.ReactNode;
  description?: string;
  isExternal?: boolean;
  disabled?: boolean;
  onClick?: () => void;
}

const ListItem = React.forwardRef<
  React.ElementRef<"a">,
  React.ComponentPropsWithoutRef<"a"> & {
    item: NavMenuItem;
    showIcons?: boolean;
  }
>(({ className, item, showIcons, ...props }, ref) => {
  const content = (
    <div
      className={cn(
        "block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
        item.disabled && "pointer-events-none opacity-50",
        className,
      )}
    >
      <div className="flex items-center gap-2">
        {showIcons && item.icon && (
          <span className="h-4 w-4" data-testid={`icon-${item.label}`}>
            {item.icon}
          </span>
        )}
        <span className="text-sm font-medium leading-none">{item.label}</span>
        {item.isExternal && <ExternalLink className="h-3 w-3" />}
      </div>
      {item.description && (
        <p className="line-clamp-2 text-sm leading-snug text-muted-foreground">
          {item.description}
        </p>
      )}
    </div>
  );
  return content;
});

ListItem.displayName = "ListItem";
const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className,
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className,
    )}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50",
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className,
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuViewport,
};

================
File: src/components/ui/select/index.tsx
================
// File: src/components/ui/select/index.tsx
import * as React from "react";
import { ChevronDown, Loader2 } from "lucide-react";
import { cn } from "@/lib/utils";
import type { SelectProps } from "./types";

const Select = React.forwardRef<HTMLSelectElement, SelectProps>(
  (
    {
      className,
      error,
      size = "default",
      isLoading,
      startIcon,
      customChevron,
      options = [],
      placeholder,
      isClearable,
      groups,
      disabled,
      ...props
    },
    ref,
  ) => {
    // Size variants
    const sizeClasses = {
      sm: "h-8 px-2 text-sm",
      default: "h-10 px-3 text-base",
      lg: "h-12 px-4 text-lg",
    };

    // Icon wrapper classes
    const iconClass =
      "absolute flex items-center justify-center text-[var(--colors-select-icon)]";
    const startIconClass = cn(iconClass, "left-3");
    const chevronClass = cn(iconClass, "right-3");

    // Generate options list
    const renderOptions = () => {
      const items = [];

      // Add placeholder if provided
      if (placeholder) {
        items.push(
          <option key="placeholder" value="" disabled>
            {placeholder}
          </option>,
        );
      }

      // Add clear option if enabled
      if (isClearable) {
        items.push(
          <option key="clear" value="">
            Clear selection
          </option>,
        );
      }

      // Add grouped options
      if (groups) {
        Object.entries(groups).forEach(([groupLabel, groupOptions]) => {
          items.push(
            <optgroup key={groupLabel} label={groupLabel}>
              {groupOptions.map((option) => (
                <option
                  key={option.value}
                  value={option.value}
                  disabled={option.disabled}
                >
                  {option.label}
                </option>
              ))}
            </optgroup>,
          );
        });
      }
      // Add ungrouped options
      else {
        options.forEach((option) => {
          items.push(
            <option
              key={option.value}
              value={option.value}
              disabled={option.disabled}
            >
              {option.label}
            </option>,
          );
        });
      }

      return items;
    };

    return (
      <div className={cn("relative", startIcon && "pl-8", className)}>
        {/* Start Icon */}
        {startIcon && <div className={startIconClass}>{startIcon}</div>}

        {/* Select Element */}
        <select
          ref={ref}
          disabled={disabled || isLoading}
          className={cn(
            // Base styles
            "w-full rounded-md appearance-none",
            "bg-[var(--colors-select-background)]",
            "text-[var(--colors-select-foreground)]",
            "border border-[var(--colors-select-border)]",

            // States
            "focus:outline-none",
            "focus:ring-2",
            "focus:ring-[var(--colors-select-focus)]",
            "focus:ring-offset-2",

            // Error state
            error && "border-[var(--colors-form-error)]",

            // Disabled state
            (disabled || isLoading) && [
              "opacity-50",
              "cursor-not-allowed",
              "bg-[var(--colors-select-disabled)]",
            ],

            // Padding adjustments
            startIcon && "pl-8",
            "pr-10", // Space for chevron

            // Size variant
            sizeClasses[size],
          )}
          {...props}
        >
          {renderOptions()}
        </select>

        {/* Loading Spinner or Chevron */}
        <div className={chevronClass}>
          {isLoading ? (
            <Loader2 className="h-4 w-4 animate-spin" />
          ) : (
            customChevron || <ChevronDown className="h-4 w-4" />
          )}
        </div>
      </div>
    );
  },
);

Select.displayName = "Select"; // Add this line for better dev tools integration

export { Select, type SelectProps };

================
File: src/components/ui/select/select.test.tsx
================
// File: src/components/ui/select/select.test.tsx
import { render, screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { Search } from "lucide-react";
import { Select } from "./index";

const mockOptions = [
  { value: "1", label: "Option 1" },
  { value: "2", label: "Option 2" },
  { value: "3", label: "Option 3", disabled: true },
];

const mockGroups = {
  "Group 1": [
    { value: "a", label: "Option A" },
    { value: "b", label: "Option B" },
  ],
  "Group 2": [
    { value: "c", label: "Option C" },
    { value: "d", label: "Option D" },
  ],
};

describe("Select", () => {
  it("renders with default styles", () => {
    render(<Select options={mockOptions} />);
    const select = screen.getByRole("combobox");
    expect(select).toHaveClass("bg-[var(--colors-select-background)]");
    expect(select).toHaveClass("border-[var(--colors-select-border)]");
  });

  it("renders all options correctly", () => {
    render(<Select options={mockOptions} />);
    const options = screen.getAllByRole("option");
    expect(options).toHaveLength(3);
    expect(options[0]).toHaveTextContent("Option 1");
  });

  it("shows error state when error prop is provided", () => {
    render(<Select error options={mockOptions} />);
    expect(screen.getByRole("combobox")).toHaveClass(
      "border-[var(--colors-form-error)]",
    );
  });

  it("renders in different sizes", () => {
    const { rerender } = render(<Select size="sm" options={mockOptions} />);
    expect(screen.getByRole("combobox")).toHaveClass("h-8");

    rerender(<Select size="lg" options={mockOptions} />);
    expect(screen.getByRole("combobox")).toHaveClass("h-12");
  });

  it("shows loading state", () => {
    render(<Select isLoading options={mockOptions} />);
    expect(screen.getByRole("combobox")).toBeDisabled();
    expect(document.querySelector(".animate-spin")).toBeInTheDocument();
  });

  it("renders with start icon", () => {
    render(
      <Select
        startIcon={<Search data-testid="search-icon" />}
        options={mockOptions}
      />,
    );
    expect(screen.getByTestId("search-icon")).toBeInTheDocument();
  });

  it("renders placeholder option when provided", () => {
    render(<Select options={mockOptions} placeholder="Select an option" />);
    expect(screen.getByText("Select an option")).toBeInTheDocument();
  });

  it("renders clear option when isClearable is true", () => {
    render(<Select options={mockOptions} isClearable />);
    expect(screen.getByText("Clear selection")).toBeInTheDocument();
  });

  it("renders option groups correctly", () => {
    render(<Select groups={mockGroups} />);
    expect(screen.getByRole("group", { name: "Group 1" })).toBeInTheDocument();
    expect(screen.getByRole("group", { name: "Group 2" })).toBeInTheDocument();
  });

  it("handles disabled state", () => {
    render(<Select disabled options={mockOptions} />);
    expect(screen.getByRole("combobox")).toBeDisabled();
    expect(screen.getByRole("combobox")).toHaveClass("cursor-not-allowed");
  });

  it("handles disabled options", () => {
    render(<Select options={mockOptions} />);
    const disabledOption = screen.getByRole("option", { name: "Option 3" });
    expect(disabledOption).toBeDisabled();
  });

  it("applies custom chevron when provided", () => {
    const CustomChevron = () => <div data-testid="custom-chevron">▼</div>;
    render(<Select options={mockOptions} customChevron={<CustomChevron />} />);
    expect(screen.getByTestId("custom-chevron")).toBeInTheDocument();
  });

  it("handles custom className", () => {
    render(<Select options={mockOptions} className="custom-class" />);
    expect(screen.getByRole("combobox").parentElement).toHaveClass(
      "custom-class",
    );
  });
});

================
File: src/components/ui/select/types.ts
================
// File: src/components/ui/select/types.ts
import { BaseProps } from "@/components/_lib/types";

export interface SelectOption {
  value: string;
  label: string;
  disabled?: boolean;
}

export interface SelectProps
  extends Omit<React.SelectHTMLAttributes<HTMLSelectElement>, "size">,
    BaseProps {
  /**
   * Error state or message
   */
  error?: boolean | string;

  /**
   * Size variant of the select
   */
  size?: "sm" | "default" | "lg";

  /**
   * Whether the select is in a loading state
   */
  isLoading?: boolean;

  /**
   * Icon to display before the select content
   */
  startIcon?: React.ReactNode;

  /**
   * Custom icon to replace the default chevron
   */
  customChevron?: React.ReactNode;

  /**
   * Options for the select
   */
  options?: SelectOption[];

  /**
   * Placeholder text
   */
  placeholder?: string;

  /**
   * Whether to show a clear option
   */
  isClearable?: boolean;

  /**
   * Group options by a specific key
   */
  groups?: {
    [key: string]: SelectOption[];
  };
}

================
File: src/components/ui/textarea/index.tsx
================
// Path: neural_nexus_frontend/src/components/ui/textarea/index.tsx
import * as React from "react";
import { cn } from "@/lib/utils";
import type { TextareaProps } from "./types";

export const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, error, size = "default", ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm",
          "placeholder:text-muted-foreground",
          "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
          "disabled:cursor-not-allowed disabled:opacity-50",
          error && "border-destructive",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);

export type { TextareaProps };
Textarea.displayName = "Textarea";

================
File: src/components/ui/textarea/types.ts
================
// Path: neural_nexus_frontend/src/components/ui/textarea/types.ts
import { BaseProps } from "@/components/_lib/types";

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement>,
    BaseProps {
  error?: boolean | string;
  size?: "sm" | "default" | "lg";
}

================
File: src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: src/components/ui/index.ts
================
// src/components/ui/index.ts
export * from "./alert";
export * from "./button";
export * from "./card";
export * from "./input";
export * from "./select";

================
File: src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: src/components/theme-provider.tsx
================
// src/components/theme-provider.tsx
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes/dist/types";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}

================
File: src/config/calendly.ts
================
// src/config/calendly.ts
export const CALENDLY_CONFIG = {
  USERNAME:
    process.env.NEXT_PUBLIC_CALENDLY_USERNAME ||
    "wwalters-neuralnexusstrategies",
  SHOW_DETAILS: process.env.NEXT_PUBLIC_CALENDLY_SHOW_DETAILS === "false",
  SHOW_COOKIES: process.env.NEXT_PUBLIC_CALENDLY_SHOW_COOKIES === "false",
};

================
File: src/config/env.ts
================
// Path: neural_nexus_frontend/src/config/env.ts
// Debug logging for environment configuration
console.log("[ENV Config] Environment:", {
  NODE_ENV: process.env.NODE_ENV,
  NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL,
  IS_SERVER: typeof window === "undefined",
});

// Helper function to determine API URL
const determineApiUrl = () => {
  const configuredUrl = process.env.NEXT_PUBLIC_API_URL?.replace(/\/$/, "");
  const isDevelopment = process.env.NODE_ENV === "development";
  const defaultUrl = isDevelopment
    ? "http://localhost:8000"
    : "https://nns-backend-production.up.railway.app";

  const finalUrl = configuredUrl || defaultUrl;

  console.log("[ENV Config] API URL Configuration:", {
    configuredUrl,
    isDevelopment,
    defaultUrl,
    finalUrl,
  });

  return finalUrl;
};

export const env = {
  NEXT_PUBLIC_API_URL: determineApiUrl(),
} as const;

// Log final configuration
console.log("[ENV Config] Final configuration:", env);

// Add type safety
export type Env = typeof env;

// Validate configuration
if (!env.NEXT_PUBLIC_API_URL) {
  throw new Error(
    "API URL is not configured. Please check your environment variables.",
  );
}

// Export validation helper
export const validateEnv = () => {
  if (!env.NEXT_PUBLIC_API_URL) {
    throw new Error("API URL is not configured");
  }
  return true;
};

================
File: src/docs/token-mapping-guide.ts
================
// File: src/docs/token-mapping-guide.ts

/**
 * Token Mapping Guide
 * This guide shows how to map our new semantic tokens to components
 */

import { cn } from "@/lib/utils";

// BUTTON COMPONENT EXAMPLE
// Before:
const buttonBefore = {
  variants: {
    default: "bg-primary text-primary-foreground hover:bg-primary/90",
    destructive:
      "bg-destructive text-destructive-foreground hover:bg-destructive/90",
    outline: "border border-input bg-background hover:bg-accent",
  },
};

// After:
const buttonAfter = {
  variants: {
    default: cn(
      "bg-[var(--colors-button-primary-background)]",
      "text-[var(--colors-button-primary-foreground)]",
      "hover:bg-[var(--colors-button-primary-hover)]",
      "active:bg-[var(--colors-button-primary-active)]",
      "disabled:bg-[var(--colors-button-primary-disabled)]",
    ),
    destructive: cn(
      "bg-[var(--colors-destructive)]",
      "text-[var(--colors-destructive-foreground)]",
      "hover:bg-[var(--colors-destructive-darker)]",
    ),
    outline: cn(
      "border border-[var(--colors-button-outline-border)]",
      "bg-[var(--colors-button-outline-background)]",
      "hover:bg-[var(--colors-button-outline-hover)]",
    ),
  },
};

// NAVIGATION COMPONENT EXAMPLE
// Before:
const navBefore = {
  item: "text-foreground/70 hover:text-foreground hover:bg-accent",
  active: "bg-accent text-accent-foreground",
};

// After:
const navAfter = {
  item: cn(
    "text-[var(--colors-navigation-item-text)]",
    "hover:text-[var(--colors-navigation-item-text-hover)]",
    "hover:bg-[var(--colors-navigation-item-background-hover)]",
  ),
  active: cn(
    "text-[var(--colors-navigation-item-text-active)]",
    "bg-[var(--colors-navigation-item-background-active)]",
  ),
};

// INPUT COMPONENT EXAMPLE
// Before:
const inputBefore = {
  base: "border border-input bg-background",
  focus: "focus-visible:ring-2 focus-visible:ring-ring",
};

// After:
const inputAfter = {
  base: cn(
    "border border-[var(--colors-input-border)]",
    "bg-[var(--colors-input-background)]",
    "placeholder:text-[var(--colors-input-placeholder)]",
  ),
  focus: cn(
    "focus-visible:border-[var(--colors-input-focus)]",
    "focus-visible:ring-2",
    "focus-visible:ring-[var(--colors-input-focus)]",
  ),
  disabled: cn(
    "bg-[var(--colors-input-disabled-background)]",
    "text-[var(--colors-input-disabled-text)]",
  ),
};

/**
 * Migration Steps:
 * 1. Update component styles to use new semantic tokens
 * 2. Use the `cn()` utility for combining classes
 * 3. Test all states: default, hover, active, disabled
 * 4. Verify contrast ratios meet accessibility standards
 *
 * Benefits:
 * - More consistent component styles
 * - Better state management
 * - Clearer component-specific tokens
 * - Improved maintainability
 */

================
File: src/hooks/use-form-validation.ts
================
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";

// Example form schema
const formSchema = z
  .object({
    name: z.string().min(2, "Name must be at least 2 characters"),
    email: z.string().email("Please enter a valid email"),
    password: z
      .string()
      .min(8, "Password must be at least 8 characters")
      .regex(/[A-Z]/, "Password must contain at least one uppercase letter")
      .regex(/[a-z]/, "Password must contain at least one lowercase letter")
      .regex(/[0-9]/, "Password must contain at least one number"),
    confirmPassword: z.string(),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "Passwords don't match",
    path: ["confirmPassword"],
  });

export type FormData = z.infer<typeof formSchema>;

export function useFormValidation() {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
      password: "",
      confirmPassword: "",
    },
  });

  return form;
}

================
File: src/lib/analytics/index.tsx
================
// src/lib/analytics/index.ts
import { AnalyticsEvent } from "./types";

// Basic tracking function for blog events
export const trackBlogEvent = (event: AnalyticsEvent): void => {
  // Add Google Analytics tracking
  if (typeof window !== "undefined" && window.gtag) {
    window.gtag("event", event.action, {
      event_category: event.category,
      event_label: event.label,
      value: event.value,
      ...event.metadata,
    });
  }
};

export type { AnalyticsEvent };

================
File: src/lib/analytics/types.ts
================
// src/lib/analytics/types.ts
export interface AnalyticsEvent {
  category: string;
  action: string;
  label?: string;
  value?: number;
  metadata?: Record<string, unknown>;
}

================
File: src/lib/api/blog.ts
================
// src/lib/api/blog.ts
// Path: src/lib/api/blog.ts

import type {
  BlogPost,
  Category,
  BlogListResponse,
  CategoryListResponse,
  ImageAsset,
} from "@/types/blog";
import { env } from "@/config/env";

// API Response types
interface ApiBlogPost {
  id: number;
  title: string;
  slug: string;
  author: number;
  category: {
    id: number;
    name: string;
    slug: string;
    description: string;
  };
  tags: any[];
  content: string;
  excerpt: string;
  featured_image: string;
  status: "DRAFT" | "PUBLISHED" | "ARCHIVED";
  is_featured: boolean;
  seo_title: string;
  seo_description: string;
  seo_keywords: string;
  estimated_read_time: number;
  published_at: string | null;
  created_at: string;
  updated_at: string;
  view_count: number;
  analytics: any | null;
}

interface ApiListResponse<T> {
  results: T[];
  count: number;
  next: string | null;
  previous: string | null;
}

// Transform functions
function transformBlogPost(post: ApiBlogPost): BlogPost {
  return {
    ...post,
    featured_image: post.featured_image
      ? {
          url: post.featured_image,
          width: 800, // Default values - adjust based on your needs
          height: 600,
          altText: post.title,
        }
      : undefined,
  };
}

// API Functions
export async function getBlogPosts({
  page = 1,
  category,
  search,
  tag,
  per_page = 10,
}: {
  page?: number;
  category?: string;
  search?: string;
  tag?: string;
  per_page?: number;
} = {}): Promise<BlogListResponse> {
  try {
    const params = new URLSearchParams();

    if (page > 1) params.append("page", page.toString());
    if (category) params.append("category", category);
    if (search) params.append("search", search);
    if (tag) params.append("tag", tag);
    params.append("per_page", per_page.toString());

    // Use URL constructor for proper URL formatting
    const baseUrl = new URL("/api/content/posts/", env.NEXT_PUBLIC_API_URL);

    // Add search params if they exist
    if (params.toString()) {
      baseUrl.search = params.toString();
    }

    console.log("Attempting to fetch blogs from URL:", baseUrl.toString());

    const response = await fetch(baseUrl.toString(), {
      next: { revalidate: 60 },
    });

    if (!response.ok) {
      throw new Error(
        `Failed to fetch blog posts: ${response.status} ${response.statusText}`,
      );
    }

    const posts = await response.json();
    console.log("API Response:", posts);

    // Handle the array response directly
    if (Array.isArray(posts)) {
      return {
        data: posts.map(transformBlogPost),
        pagination: {
          total: posts.length,
          current_page: page,
          total_pages: Math.ceil(posts.length / per_page),
          per_page,
        },
      };
    }

    // Fallback empty response
    return {
      data: [],
      pagination: {
        total: 0,
        current_page: page,
        total_pages: 0,
        per_page,
      },
    };
  } catch (error) {
    console.error("Error in getBlogPosts:", error);
    return {
      data: [],
      pagination: {
        total: 0,
        current_page: page,
        total_pages: 0,
        per_page,
      },
    };
  }
}

export async function getBlogPost(slug: string): Promise<BlogPost | null> {
  try {
    const baseUrl = new URL(
      `/api/content/posts/${slug}/`,
      env.NEXT_PUBLIC_API_URL,
    );
    console.log("Fetching blog post from:", baseUrl.toString());

    const response = await fetch(baseUrl.toString(), {
      cache: "no-store",
      headers: {
        Accept: "application/json", // Added explicit Accept header
      },
    });

    console.log("Response status:", response.status);
    console.log("Response status text:", response.statusText);

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Error response:", errorText);
      throw new Error(
        `Failed to fetch post: ${response.status} ${response.statusText}`,
      );
    }

    const apiPost = await response.json();
    console.log("Received post data:", apiPost);

    if (!apiPost) {
      console.error("No data returned from API");
      return null;
    }

    return transformBlogPost(apiPost);
  } catch (error) {
    console.error("Error fetching blog post:", error);
    return null;
  }
}

export async function getCategories(): Promise<CategoryListResponse> {
  const baseUrl = new URL("/api/content/categories/", env.NEXT_PUBLIC_API_URL);
  const response = await fetch(baseUrl.toString(), {
    next: { revalidate: 60 },
  });

  if (!response.ok) {
    throw new Error("Failed to fetch categories");
  }

  const apiResponse = (await response.json()) as ApiListResponse<Category>;

  return {
    data: apiResponse.results,
    pagination: {
      total: apiResponse.count,
      current_page: 1,
      total_pages: Math.ceil(apiResponse.count / 10),
      per_page: 10,
    },
  };
}

export async function trackBlogAnalytics(
  blogId: number,
  timeOnPage?: number,
): Promise<void> {
  const baseUrl = new URL("/api/content/analytics/", env.NEXT_PUBLIC_API_URL);
  const response = await fetch(baseUrl.toString(), {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      blog_post: blogId,
      time_on_page: timeOnPage || 0,
    }),
  });

  if (!response.ok) {
    throw new Error("Failed to track blog analytics");
  }
}

================
File: src/lib/api/case-studies.ts
================
// src/lib/api/case-studies.ts

import { env } from "@/config/env";

export interface CaseStudy {
  id: number;
  title: string;
  slug: string;

  industry: string;
  client_name: string;
  challenge: string;
  solution: string;
  results: Record<string, string>; // More specific than 'any'
  implementation_timeline: string;
  testimonial?: string;
  excerpt?: string;
  featured_image: string;
  status: "DRAFT" | "PUBLISHED" | "ARCHIVED";
  is_featured: boolean;
  seo_title: string;
  seo_description: string;
  seo_keywords: string;
  published_at: string | null;
  created_at: string;
  updated_at: string;
  view_count: number;
}

export async function getCaseStudies({
  page = 1,
  industry,
  search,
  per_page = 9,
}: {
  page?: number;
  industry?: string;
  search?: string;
  per_page?: number;
} = {}): Promise<CaseStudy[]> {
  try {
    const params = new URLSearchParams();

    if (page > 1) params.append("page", page.toString());
    if (industry) params.append("industry", industry);
    if (search) params.append("search", search);
    params.append("per_page", per_page.toString());

    console.log("Fetching case studies with params:", params.toString());

    const baseUrl = new URL(
      "/api/content/case-studies/",
      env.NEXT_PUBLIC_API_URL,
    );
    if (params.toString()) {
      baseUrl.search = params.toString();
    }

    console.log("API URL:", baseUrl.toString());

    const response = await fetch(baseUrl.toString(), {
      next: { revalidate: 60 },
    });

    if (!response.ok) {
      throw new Error("Failed to fetch case studies");
    }

    const data = await response.json();
    console.log("Fetched case studies:", data);
    return data.results || data;
  } catch (error) {
    console.error("Error fetching case studies:", error);
    return [];
  }
}

export async function getCaseStudy(slug: string) {
  try {
    const baseUrl = new URL(
      `/api/content/case-studies/${slug}/`,
      env.NEXT_PUBLIC_API_URL,
    );
    console.log("Fetching case study from:", baseUrl.toString());

    const response = await fetch(baseUrl.toString(), {
      next: { revalidate: 60 },
      headers: {
        Accept: "application/json",
      },
    });

    console.log("Response status:", response.status);
    console.log("Response status text:", response.statusText);

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Error response:", errorText);
      throw new Error(
        `Failed to fetch case study: ${response.status} ${response.statusText}`,
      );
    }

    const data = await response.json();
    console.log("Case study data:", data);

    if (!data) {
      console.error("No data returned from API");
      return null;
    }

    return data;
  } catch (error) {
    console.error("Error fetching case study:", error);
    return null;
  }
}

================
File: src/lib/api/services.ts
================
// Path: neural_nexus_frontend/src/lib/api/services.ts
import { env } from "@/config/env";

interface Service {
  id: number;
  name: string;
  slug: string;
  description: string;
  key_features?: string[];
}

export async function getServices(): Promise<Service[]> {
  const baseUrl = new URL("/api/services/", env.NEXT_PUBLIC_API_URL);
  console.log("Fetching services from:", baseUrl.toString());

  try {
    const response = await fetch(baseUrl.toString(), {
      next: { revalidate: 60 },
      headers: {
        Accept: "application/json",
      },
    });

    if (!response.ok) {
      console.error(
        `Failed to fetch services: ${response.status} ${response.statusText}`,
      );
      throw new Error("Failed to fetch services");
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching services:", error);
    throw error;
  }
}

================
File: src/lib/tracking/deviceFingerprint.ts
================
// src/lib/tracking/deviceFingerprint.ts
import { DeviceInfo } from "./types";

declare global {
  interface Window {
    gtag: (command: string, ...args: any[]) => void;
    dataLayer: any[]; // Add dataLayer type
  }
}

export class DeviceFingerprint {
  private static instance: DeviceFingerprint;
  private fp: Promise<any>;
  private cachedDeviceId: string | null = null;

  private constructor() {
    this.fp = this.loadFingerprint();
  }

  private async loadFingerprint() {
    if (typeof window !== "undefined") {
      const FingerprintJS = (await import("@fingerprintjs/fingerprintjs"))
        .default;
      return FingerprintJS.load();
    }
    return null;
  }

  public static getInstance(): DeviceFingerprint {
    if (!DeviceFingerprint.instance) {
      DeviceFingerprint.instance = new DeviceFingerprint();
    }
    return DeviceFingerprint.instance;
  }

  public async getDeviceInfo(): Promise<DeviceInfo> {
    if (!this.fp) return this.getFallbackDeviceInfo();

    try {
      const fp = await this.fp;
      if (!fp) return this.getFallbackDeviceInfo();

      const result = await fp.get();

      if (!this.cachedDeviceId) {
        this.cachedDeviceId = result.visitorId;
      }

      return {
        deviceId: this.cachedDeviceId ?? "unknown", // Add null check with fallback
        userAgent:
          typeof window !== "undefined" ? window.navigator.userAgent : "",
        screenResolution:
          typeof window !== "undefined"
            ? `${window.screen.width}x${window.screen.height}`
            : "",
        language:
          typeof window !== "undefined" ? window.navigator.language : "",
        timezone:
          typeof window !== "undefined"
            ? Intl.DateTimeFormat().resolvedOptions().timeZone
            : "",
        platform:
          typeof window !== "undefined" ? window.navigator.platform : "",
      };
    } catch (error) {
      console.error("Error getting device info:", error);
      return this.getFallbackDeviceInfo();
    }
  }

  private getFallbackDeviceInfo(): DeviceInfo {
    return {
      deviceId: "unknown",
      userAgent:
        typeof window !== "undefined" ? window.navigator.userAgent : "",
      screenResolution:
        typeof window !== "undefined"
          ? `${window.screen.width}x${window.screen.height}`
          : "",
      language: typeof window !== "undefined" ? window.navigator.language : "",
      timezone:
        typeof window !== "undefined"
          ? Intl.DateTimeFormat().resolvedOptions().timeZone
          : "",
      platform: typeof window !== "undefined" ? window.navigator.platform : "",
    };
  }

  public async getDeviceId(): Promise<string> {
    if (this.cachedDeviceId) {
      return this.cachedDeviceId;
    }

    const deviceInfo = await this.getDeviceInfo();
    return deviceInfo.deviceId;
  }
}

================
File: src/lib/tracking/index.ts
================
export * from "./types";
export * from "./trackingService";
export * from "./deviceFingerprint";
export * from "./sessionManager";

// Create and export a default instance
import { TrackingService } from "./trackingService";

const defaultConfig = {
  sessionTimeout: 30,
  anonymousIdPrefix: "nns",
  apiEndpoint: "/api/content/tracking/", // Updated to match Django URL structure
  googleAnalyticsId: process.env.NEXT_PUBLIC_GA_ID,
};

export const tracking = TrackingService.getInstance(defaultConfig);

================
File: src/lib/tracking/sessionManager.ts
================
import { SessionData } from "./types";

export class SessionManager {
  private static readonly SESSION_KEY = "nns_session";
  private static readonly SESSION_TIMEOUT = 30; // minutes

  public static initSession(): SessionData {
    const existingSession = this.getSession();
    if (existingSession && this.isSessionValid(existingSession)) {
      return this.updateSession(existingSession);
    }

    return this.createNewSession();
  }

  public static updateSession(session: SessionData): SessionData {
    const updatedSession = {
      ...session,
      lastActivity: Date.now(),
      pageViews: session.pageViews + 1,
    };

    localStorage.setItem(this.SESSION_KEY, JSON.stringify(updatedSession));
    return updatedSession;
  }

  private static createNewSession(): SessionData {
    const session: SessionData = {
      sessionId: this.generateSessionId(),
      startTime: Date.now(),
      lastActivity: Date.now(),
      pageViews: 1,
      referrer: document.referrer,
      entryPath: window.location.pathname,
    };

    localStorage.setItem(this.SESSION_KEY, JSON.stringify(session));
    return session;
  }

  private static getSession(): SessionData | null {
    const sessionData = localStorage.getItem(this.SESSION_KEY);
    return sessionData ? JSON.parse(sessionData) : null;
  }

  private static isSessionValid(session: SessionData): boolean {
    const timeSinceLastActivity =
      (Date.now() - session.lastActivity) / 1000 / 60; // in minutes
    return timeSinceLastActivity < this.SESSION_TIMEOUT;
  }

  private static generateSessionId(): string {
    return `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;
  }
}

================
File: src/lib/tracking/trackingService.ts
================
// Path: neural_nexus_frontend/src/lib/tracking/trackingService.ts

import { DeviceFingerprint } from "./deviceFingerprint";
import { SessionManager } from "./sessionManager";
import { env } from "@/config/env";
import {
  UserIdentity,
  TrackingEvent,
  DeviceInfo,
  ConsentSettings,
  TrackingConfig,
} from "./types";

declare global {
  interface Window {
    gtag: (command: string, ...args: any[]) => void;
    dataLayer: any[];
    ga?: {
      getAll?: () => Array<{
        get: (key: string) => string;
      }>;
    };
  }
}

export class TrackingService {
  private static instance: TrackingService;
  private deviceFingerprint: DeviceFingerprint;
  private identity: UserIdentity;
  private deviceInfo: DeviceInfo | null = null;
  private config: TrackingConfig;
  private consent: ConsentSettings;
  private initialized: boolean = false;

  public async getDeviceInfo(): Promise<DeviceInfo> {
    if (!this.deviceInfo) {
      this.deviceInfo = await this.deviceFingerprint.getDeviceInfo();
    }
    return this.deviceInfo;
  }

  private constructor(config: TrackingConfig) {
    if (typeof window === "undefined") {
      console.warn("TrackingService initialized in server environment");
    }
    this.config = config;
    this.deviceFingerprint = DeviceFingerprint.getInstance();
    this.consent = this.loadConsent();
    this.identity = this.loadIdentity();
  }

  public static getInstance(config: TrackingConfig): TrackingService {
    if (typeof window === "undefined") {
      // Return a dummy instance for SSR
      return new TrackingService(config);
    }
    if (!TrackingService.instance) {
      TrackingService.instance = new TrackingService(config);
    }
    return TrackingService.instance;
  }

  public async initialize(): Promise<void> {
    try {
      if (this.initialized) return;

      // Initialize device info
      this.deviceInfo = await this.deviceFingerprint.getDeviceInfo();

      // Initialize session
      const session = SessionManager.initSession();

      // Update identity with session and device info
      this.identity = {
        ...this.identity,
        deviceId: this.deviceInfo.deviceId,
        sessionId: session.sessionId,
      };

      // Initialize Google Analytics if configured
      if (this.config.googleAnalyticsId && this.consent.analytics) {
        await this.initializeGA();
      }

      this.initialized = true;
    } catch (error) {
      console.warn("Failed to initialize tracking:", error);
      // Continue execution even if tracking fails
    }
  }

  public async trackEvent(
    eventName: string,
    properties: Record<string, any> = {},
  ): Promise<void> {
    if (!this.consent.analytics) return;

    try {
      const event: TrackingEvent = {
        eventName,
        timestamp: Date.now(),
        identity: this.identity,
        properties,
        source: window.location.hostname,
        path: window.location.pathname,
      };

      // Send to our backend first as fallback
      await this.sendToBackend(event);

      // Attempt to send to Google Analytics
      if (this.config.googleAnalyticsId) {
        this.sendToGA(event);
      }
    } catch (error) {
      console.warn("Failed to track event:", error);
    }
  }

  public identifyUser(
    email: string,
    properties: Record<string, any> = {},
  ): void {
    try {
      this.identity = {
        ...this.identity,
        type: "known",
        email,
        primaryEmail: email,
      };

      this.saveIdentity();
      this.trackEvent("user_identified", properties);
    } catch (error) {
      console.warn("Failed to identify user:", error);
    }
  }

  public updateConsent(settings: Partial<ConsentSettings>): void {
    try {
      this.consent = {
        ...this.consent,
        ...settings,
        updatedAt: Date.now(),
      };
      localStorage.setItem("nns_consent", JSON.stringify(this.consent));
    } catch (error) {
      console.warn("Failed to update consent:", error);
    }
  }

  private async sendToBackend(event: TrackingEvent): Promise<void> {
    try {
      const baseUrl = new URL(
        "/api/content/tracking/",
        env.NEXT_PUBLIC_API_URL,
      );
      const response = await fetch(baseUrl.toString(), {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(event),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    } catch (error) {
      console.warn("Failed to send event to backend:", error);
    }
  }

  // Update the sendToGA method to include more parameters:
  private sendToGA(event: TrackingEvent): void {
    if (!window.gtag) return;

    try {
      // Enhanced common parameters
      const commonParams = {
        session_id: this.identity.sessionId,
        user_id: this.identity.id,
        client_id:
          window.ga?.getAll?.()?.[0]?.get?.("clientId") ||
          this.identity.anonymousId,
        page_location: window.location.href,
        page_referrer: document.referrer,
        page_title: document.title,
        screen_resolution: `${window.screen.width}x${window.screen.height}`,
        viewport_size: `${window.innerWidth}x${window.innerHeight}`,
        engagement_time_msec: 10,
        language: navigator.language,
        is_first_visit: !localStorage.getItem("_ga"),
        session_engaged: true,
        session_start: this.isNewSession(),
        // Add these new parameters
        page_encoding: document.characterSet,
        user_agent: navigator.userAgent,
        host: window.location.host,
        path: window.location.pathname,
        timestamp: new Date().toISOString(),
        // Time zone information
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        timezone_offset: new Date().getTimezoneOffset(),
      };

      if (event.eventName === "page_view") {
        window.gtag("event", "page_view", {
          ...commonParams,
          ...event.properties,
          // Page-specific parameters
          page_type: this.getPageType(window.location.pathname),
          navigation_type: this.getNavigationType(),
          performance_timing: this.getPerformanceTiming(),
        });
      } else {
        window.gtag("event", event.eventName, {
          ...commonParams,
          ...event.properties,
        });
      }
    } catch (error) {
      console.warn("Failed to send event to Google Analytics:", error);
    }
  }

  // Add helper methods for enhanced tracking
  private getPageType(pathname: string): string {
    if (pathname === "/") return "home";
    const segments = pathname.split("/").filter(Boolean);
    return segments[0] || "unknown";
  }

  private getNavigationType(): string {
    if (
      typeof window === "undefined" ||
      !window.performance ||
      !window.performance.navigation
    ) {
      return "unknown";
    }
    const navigation = window.performance.navigation;
    switch (navigation.type) {
      case 0:
        return "navigate";
      case 1:
        return "reload";
      case 2:
        return "back_forward";
      default:
        return "unknown";
    }
  }

  private getPerformanceTiming(): Record<string, number> {
    if (
      typeof window === "undefined" ||
      !window.performance ||
      !window.performance.timing
    ) {
      return {};
    }

    const timing = window.performance.timing;
    return {
      dns_time: timing.domainLookupEnd - timing.domainLookupStart,
      connection_time: timing.connectEnd - timing.connectStart,
      ttfb: timing.responseStart - timing.requestStart,
      dom_load_time: timing.domContentLoadedEventEnd - timing.navigationStart,
      page_load_time: timing.loadEventEnd - timing.navigationStart,
    };
  }

  private async initializeGA(): Promise<void> {
    try {
      const script = document.createElement("script");
      script.async = true;
      script.src = `https://www.googletagmanager.com/gtag/js?id=${this.config.googleAnalyticsId}`;

      // Add proper error handling for script loading
      await new Promise<void>((resolve, reject) => {
        script.onload = () => resolve();
        script.onerror = (e) => reject(e);
        document.head.appendChild(script);
      });

      window.dataLayer = window.dataLayer || [];
      window.gtag = function (...args) {
        window.dataLayer.push(args);
      };

      window.gtag("js", new Date());
      window.gtag("config", this.config.googleAnalyticsId!, {
        send_page_view: true,
        cookie_domain: "neuralnexusstrategies.ai",
        anonymize_ip: true,
        transport_url: window.location.origin,
        first_party_collection: true,
      });
    } catch (error) {
      console.warn("Failed to initialize Google Analytics:", error);
      // Continue execution even if GA fails
    }
  }

  private isNewSession(): boolean {
    const lastHit = localStorage.getItem("_ga_last_hit");
    const now = Date.now();
    if (!lastHit) {
      localStorage.setItem("_ga_last_hit", now.toString());
      return true;
    }
    const timeSinceLastHit = now - parseInt(lastHit);
    const isNew = timeSinceLastHit > 30 * 60 * 1000; // 30 minutes
    localStorage.setItem("_ga_last_hit", now.toString());
    return isNew;
  }

  private loadIdentity(): UserIdentity {
    if (typeof window === "undefined") {
      return {
        id: null,
        type: "anonymous",
        anonymousId: this.generateAnonymousId(),
      };
    }

    try {
      const stored = localStorage.getItem("nns_identity");
      if (stored) {
        return JSON.parse(stored);
      }
    } catch (error) {
      console.warn("Failed to load identity from storage:", error);
    }

    return {
      id: null,
      type: "anonymous",
      anonymousId: this.generateAnonymousId(),
    };
  }

  private loadConsent(): ConsentSettings {
    if (typeof window === "undefined") {
      return {
        marketing: true,
        analytics: true,
        updatedAt: Date.now(),
      };
    }

    try {
      const stored = localStorage.getItem("nns_consent");
      if (stored) {
        return JSON.parse(stored);
      }
    } catch (error) {
      console.warn("Failed to load consent from storage:", error);
    }

    return {
      marketing: true,
      analytics: true,
      updatedAt: Date.now(),
    };
  }

  private saveIdentity(): void {
    try {
      localStorage.setItem("nns_identity", JSON.stringify(this.identity));
    } catch (error) {
      console.warn("Failed to save identity:", error);
    }
  }

  private generateAnonymousId(): string {
    return `${this.config.anonymousIdPrefix}-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
  }
}

================
File: src/lib/tracking/types.ts
================
export type UserType = "anonymous" | "known";

export interface UserIdentity {
  id: string | null;
  type: UserType;
  email?: string;
  primaryEmail?: string;
  anonymousId?: string;
  deviceId?: string;
  sessionId?: string;
}

export interface TrackingEvent {
  eventName: string;
  timestamp: number;
  identity: UserIdentity;
  properties: Record<string, any>;
  source: string;
  path: string;
}

export interface SessionData {
  sessionId: string;
  startTime: number;
  lastActivity: number;
  pageViews: number;
  referrer?: string;
  entryPath: string;
}

export interface DeviceInfo {
  deviceId: string;
  userAgent: string;
  screenResolution: string;
  language: string;
  timezone: string;
  platform: string;
}

export interface ConsentSettings {
  marketing: boolean;
  analytics: boolean;
  updatedAt: number;
}

export interface TrackingConfig {
  sessionTimeout: number; // in minutes
  anonymousIdPrefix: string;
  apiEndpoint: string;
  googleAnalyticsId?: string;
}

================
File: src/lib/utils/image.tsx
================
// src/lib/utils/image.ts

import { ImageAsset } from "@/types/blog";

export class ImageValidationError extends Error {
  constructor(message: string) {
    super(message);
    this.name = "ImageValidationError";
  }
}

interface ValidateImageOptions {
  maxWidth?: number;
  maxHeight?: number;
  allowedFormats?: string[];
  maxSizeKB?: number;
}

export async function validateImage(
  url: string,
  options: ValidateImageOptions = {},
): Promise<ImageAsset> {
  const {
    maxWidth = 2048,
    maxHeight = 2048,
    allowedFormats = ["jpeg", "png", "webp", "gif"],
    maxSizeKB = 5000,
  } = options;

  try {
    // Load image
    const img = new Image();
    const imageLoaded = new Promise((resolve, reject) => {
      img.onload = resolve;
      img.onerror = reject;
    });
    img.src = url;
    await imageLoaded;

    // Validate dimensions
    if (img.width > maxWidth) {
      throw new ImageValidationError(
        `Image width ${img.width}px exceeds maximum ${maxWidth}px`,
      );
    }
    if (img.height > maxHeight) {
      throw new ImageValidationError(
        `Image height ${img.height}px exceeds maximum ${maxHeight}px`,
      );
    }

    // Validate format
    const format = url.split(".").pop()?.toLowerCase();
    if (!format || !allowedFormats.includes(format)) {
      throw new ImageValidationError(`Image format ${format} not allowed`);
    }

    // Validate file size
    const response = await fetch(url, { method: "HEAD" });
    const size = parseInt(response.headers.get("content-length") || "0", 10);
    if (size > maxSizeKB * 1024) {
      throw new ImageValidationError(
        `Image size ${Math.round(size / 1024)}KB exceeds maximum ${maxSizeKB}KB`,
      );
    }

    // Generate blur data URL
    const blurDataUrl = await generateBlurDataUrl(url);

    return {
      url,
      width: img.width,
      height: img.height,
      format: format as ImageAsset["format"],
      blurDataUrl,
    };
  } catch (error) {
    if (error instanceof ImageValidationError) {
      throw error;
    }
    throw new ImageValidationError("Failed to validate image");
  }
}

async function generateBlurDataUrl(url: string): Promise<string> {
  // Implementation of blur hash or simple blur data URL generation
  // This is a placeholder implementation
  return "data:image/jpeg;base64,...";
}

================
File: src/lib/analytics.tsx
================
// src/lib/analytics/index.ts

export interface AnalyticsEvent {
    category: string;
    action: string;
    label?: string;
    value?: number;
    metadata?: Record<string, any>;
}

export interface ErrorEvent {
    error: Error;
    errorInfo?: any;
    component?: string;
    location?: string;
}

export function trackBlogEvent(event: AnalyticsEvent) {
    if (typeof window !== "undefined") {
        window.gtag?.("event", event.action, {
            event_category: event.category,
            event_label: event.label,
            value: event.value,
            ...event.metadata,
        });
    }
}

export function trackError({
    error,
    errorInfo,
    component,
    location,
}: ErrorEvent) {
    if (typeof window !== "undefined") {
        window.gtag?.("event", "error", {
            event_category: "error",
            event_label: error.message,
            error_name: error.name,
            error_stack: error.stack,
            error_component: component,
            error_location: location,
            error_info: JSON.stringify(errorInfo),
        });
    }
}

================
File: src/lib/api.ts
================
// Path: neural_nexus_frontend/src/lib/api.ts

import { endpoints } from "./config";

export async function fetchAPI(endpoint: string, options: RequestInit = {}) {
  const defaultOptions: RequestInit = {
    headers: {
      "Content-Type": "application/json",
      // Add any other default headers here
    },
    ...options,
  };

  try {
    const response = await fetch(endpoint, defaultOptions);
    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error("API fetch error:", error);
    throw error;
  }
}

export async function getBlogPosts(params = {}) {
  const queryString = new URLSearchParams(params).toString();
  const url = `${endpoints.blog.posts}${queryString ? `?${queryString}` : ""}`;
  return fetchAPI(url);
}

export async function getCategories() {
  return fetchAPI(endpoints.blog.categories);
}

================
File: src/lib/config.ts
================
// Path: neural_nexus_frontend/src/lib/config.ts

export const API_BASE_URL =
  process.env.NEXT_PUBLIC_API_URL ||
  "https://nns-backend-production.up.railway.app/api";

export const endpoints = {
  blog: {
    posts: `${API_BASE_URL}/blog/posts/`,
    categories: `${API_BASE_URL}/blog/categories/`,
  },
  // Add other endpoints as needed
};

================
File: src/lib/tracking.ts
================
// Path: neural_nexus_frontend/src/lib/tracking.ts

declare global {
  interface Window {
    dataLayer: any[];
    gtag: (...args: any[]) => void;
  }
}

export const tracking = {
  initialize: async () => {
    // Add Google Analytics Script
    const script1 = document.createElement("script");
    script1.async = true;
    script1.src = "https://www.googletagmanager.com/gtag/js?id=G-6MV9BW7RG6";
    document.head.appendChild(script1);

    const script2 = document.createElement("script");
    script2.innerHTML = `
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-6MV9BW7RG6');
    `;
    document.head.appendChild(script2);
  },

  trackEvent: (eventName: string, eventParams?: Record<string, any>) => {
    if (typeof window !== "undefined" && window.gtag) {
      window.gtag("event", eventName, eventParams);
    }
  },
};

================
File: src/lib/utils.ts
================
//src/lib/utils.ts
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export function formatDate(input: string): string {
  const date = new Date(input);
  return date.toLocaleDateString("en-US", {
    month: "long",
    day: "numeric",
    year: "numeric",
  });
}

export function formatContent(content: string): string {
  // Convert newlines to proper HTML line breaks and paragraphs
  return content
    .split("\r\n\r\n") // Split into paragraphs
    .map((paragraph) => `<p>${paragraph}</p>`)
    .join("\n")
    .replace(/\r\n(?!\r\n)/g, "<br />"); // Handle single line breaks
}

================
File: src/mocks/browser.ts
================
// src/mocks/browser.ts

import { setupWorker } from "msw/browser";
import { handlers } from "./handlers";

const worker = setupWorker(...handlers);
export default worker;

================
File: src/mocks/handlers.ts
================
// src/mocks/handlers.ts
import { http, HttpResponse } from "msw"; // Changed from separate imports

export const handlers = [
  // Add your API mocks here
  http.get("/api/example", () => {
    return HttpResponse.json({ message: "Mocked response" });
  }),

  // Auth endpoints
  http.post("/api/auth/login", () => {
    return HttpResponse.json({
      token: "fake-jwt-token",
      user: {
        id: 1,
        email: "test@example.com",
        name: "Test User",
      },
    });
  }),

  http.post("/api/auth/register", () => {
    return HttpResponse.json(
      {
        message: "User created successfully",
      },
      { status: 201 },
    );
  }),
];

================
File: src/mocks/server.ts
================
// src/mocks/server.ts
import { setupServer } from "msw/node";
import { handlers } from "./handlers";

export const server = setupServer(...handlers);

================
File: src/pages/[slug].tsx
================
// Path: src/pages/[slug].tsx
import { GetServerSideProps } from "next";
import LandingPage from "@/components/landing-page/LandingPage";
import Head from "next/head";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";

interface PageProps {
  pageData: {
    content: {
      sections: Array<{
        type: string;
        content: any;
      }>;
      meta: {
        title: string;
        description: string;
      };
    };
  } | null;
}

const ComingSoon = () => (
  <>
    <Head>
      <title>Coming Soon - Neural Nexus Strategies</title>
      <meta name="description" content="This content will be available soon." />
    </Head>
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow">
        <section className="bg-gradient-to-r from-primary-900 to-primary-800 text-white">
          <div className="container mx-auto px-4 py-16 md:py-24">
            <div className="grid md:grid-cols-2 gap-8 items-center">
              <div>
                <h1 className="text-4xl md:text-5xl font-bold mb-4">
                  Coming Soon
                </h1>
                <p className="text-xl mb-8 text-gray-200">
                  We're working on something amazing. This page is currently
                  under construction.
                </p>
                <a // Added opening <a> tag here
                  href="/"
                  className="bg-white text-primary-900 px-8 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors inline-block"
                >
                  Return to Homepage
                </a>
              </div>
              <div>
                <img
                  src="/api/placeholder/800/600"
                  alt="Coming Soon"
                  className="rounded-lg shadow-lg"
                />
              </div>
            </div>
          </div>
        </section>
      </main>
      <Footer />
    </div>
  </>
);

const MainContent = ({
  content,
}: {
  // Remove the null possibility since we only call this component with non-null content
  content: NonNullable<PageProps["pageData"]>["content"];
}) => (
  <>
    <Head>
      <title>{content.meta?.title || "Neural Nexus Strategies"}</title>
      <meta
        name="description"
        content={
          content.meta?.description ||
          "Your AI-Powered Business Solutions Partner"
        }
      />
    </Head>
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow">
        <LandingPage content={content} />
      </main>
      <Footer />
    </div>
  </>
);

// The null check in the main component ensures we only pass non-null content
export default function Page({ pageData }: PageProps) {
  if (!pageData?.content) {
    return <ComingSoon />;
  }
  return <MainContent content={pageData.content} />;
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { slug } = context.params as { slug: string };
  console.log("Fetching landing page for slug:", slug);

  try {
    const url = `${process.env.NEXT_PUBLIC_API_URL}/api/content/landing-pages/${slug}/`;
    console.log("Fetching from URL:", url);

    const res = await fetch(url);

    if (!res.ok) {
      console.log("Response not OK:", res.status);
      return {
        props: {
          pageData: null,
        },
      };
    }

    const data = await res.json();
    console.log("Received data:", data);

    if (!data?.content?.meta) {
      console.log("Invalid data structure received");
      return {
        props: {
          pageData: null,
        },
      };
    }

    return {
      props: {
        pageData: data,
      },
    };
  } catch (error) {
    console.error("Error fetching landing page:", error);
    return {
      props: {
        pageData: null,
      },
    };
  }
};

================
File: src/styles/__tests__/GlobalStyles.test.tsx
================
// src/styles/__tests__/GlobalStyles.test.tsx
import React from "react";
import { render } from "@testing-library/react";
import { ThemeProvider as StyledThemeProvider } from "styled-components";
import { GlobalStyles } from "../global/GlobalStyles";
import { lightTheme } from "../theme/themes";

const MockThemeProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => (
  <StyledThemeProvider theme={lightTheme}>
    <>
      <GlobalStyles theme={lightTheme} /> {/* Add theme prop here */}
      {children}
    </>
  </StyledThemeProvider>
);

describe("GlobalStyles", () => {
  it("applies theme variables to root", () => {
    const { container } = render(
      <MockThemeProvider>
        <div>Test content</div>
      </MockThemeProvider>,
    );

    // Use getComputedStyle to check CSS custom properties
    const styles = getComputedStyle(document.documentElement);
    expect(styles.getPropertyValue("--font-heading")).toBeTruthy();
    expect(styles.getPropertyValue("--font-body")).toBeTruthy();
  });

  it("applies base styles to HTML elements", () => {
    const { container } = render(
      <MockThemeProvider>
        <div>
          <h1>Heading</h1>
          <p>Paragraph</p>
        </div>
      </MockThemeProvider>,
    );

    const heading = container.querySelector("h1");
    const paragraph = container.querySelector("p");

    const styles = getComputedStyle(document.documentElement);
    expect(heading).toBeTruthy();
    expect(paragraph).toBeTruthy();
  });
});

================
File: src/styles/__tests__/themes.test.tsx
================
// src/styles/__tests__/themes.test.ts
import { lightTheme, darkTheme } from "../theme/themes";
import { colors } from "../tokens";

describe("Themes", () => {
  describe("Light Theme", () => {
    it("uses light color values", () => {
      expect(lightTheme.colors.background.primary).toBe(colors.base.navy[50]);
      expect(lightTheme.colors.text.primary).toBe(colors.base.navy[900]);
    });

    it("includes all token categories", () => {
      expect(lightTheme.typography).toBeDefined();
      expect(lightTheme.spacing).toBeDefined();
      expect(lightTheme.animation).toBeDefined();
    });
  });

  describe("Dark Theme", () => {
    it("uses dark color values", () => {
      expect(darkTheme.colors.background.primary).toBe(colors.base.navy[900]);
      expect(darkTheme.colors.text.primary).toBe(colors.base.navy[50]);
    });

    it("inherits non-color tokens from light theme", () => {
      expect(darkTheme.typography).toEqual(lightTheme.typography);
      expect(darkTheme.spacing).toEqual(lightTheme.spacing);
      expect(darkTheme.animation).toEqual(lightTheme.animation);
    });
  });
});

================
File: src/styles/__tests__/tokens.test.tsx
================
// src/styles/__tests__/tokens.test.ts
import { colors, typography, spacing, animation } from "../tokens";

// Add type definitions
type ColorScale = keyof typeof colors.base;
type ColorShade = 50 | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;
type TypographySize = keyof typeof typography.scale;
type HeadingLevel = keyof typeof typography.heading;

describe("Design Tokens", () => {
  describe("Colors", () => {
    it("has complete base color scales", () => {
      const scales: ColorScale[] = ["navy", "blue", "red", "green"];
      const shades: ColorShade[] = [
        50, 100, 200, 300, 400, 500, 600, 700, 800, 900,
      ];

      scales.forEach((scale) => {
        shades.forEach((shade) => {
          expect(colors.base[scale][shade]).toBeDefined();
          expect(colors.base[scale][shade]).toMatch(/^#[0-9A-F]{6}$/i);
        });
      });
    });

    it("has semantic color tokens mapped to base colors", () => {
      expect(colors.theme.primary).toBe("var(--color-navy-500)");
      expect(colors.theme.secondary).toBe("var(--color-blue-500)");
      expect(colors.theme.destructive).toBe("var(--color-red-500)");
    });

    it("has component-specific color tokens", () => {
      expect(colors.components.button.primary).toBeDefined();
      expect(colors.components.input).toBeDefined();
      expect(colors.components.navigation).toBeDefined();
    });
  });

  describe("Typography", () => {
    it("has complete scale values", () => {
      const expectedSizes: TypographySize[] = [
        "xs",
        "sm",
        "base",
        "lg",
        "xl",
        "2xl",
        "3xl",
        "4xl",
        "5xl",
        "6xl",
      ];
      expectedSizes.forEach((size) => {
        expect(typography.scale[size]).toBeDefined();
        expect(typography.scale[size]).toMatch(/^\d*\.?\d+rem$/);
      });
    });

    it("has semantic heading tokens", () => {
      ([1, 2, 3, 4] as const).forEach((level: HeadingLevel) => {
        const heading = typography.heading[level];
        expect(heading.size).toBeDefined();
        expect(heading.weight).toBeDefined();
        expect(heading.lineHeight).toBeDefined();
      });
    });

    it("has component-specific typography tokens", () => {
      expect(typography.components.navigation).toBeDefined();
      expect(typography.components.button).toBeDefined();
      expect(typography.components.input).toBeDefined();
    });
  });

  describe("Spacing", () => {
    it("has scale values", () => {
      Object.entries(spacing.scale).forEach(([key, value]) => {
        // Allow "0" as a valid value
        expect(value).toMatch(/^(0|\d*\.?\d+(px|rem))$/);
      });
    });

    it("has semantic layout tokens", () => {
      expect(spacing.layout.page).toBeDefined();
      expect(spacing.layout.section).toBeDefined();
    });
  });

  describe("Animation", () => {
    it("has duration tokens", () => {
      Object.entries(animation.durations).forEach(([key, value]) => {
        expect(value).toMatch(/^\d+ms$/);
      });
    });

    it("has easing tokens", () => {
      Object.entries(animation.easings).forEach(([key, value]) => {
        expect(value).toMatch(/^cubic-bezier/);
      });
    });
  });
});

================
File: src/styles/global/GlobalStyles.ts
================
import { createGlobalStyle } from "styled-components";
import { Theme } from "../theme/themes";

export const GlobalStyles = createGlobalStyle<{ theme?: Theme }>`
  :root {
    --font-heading: ${(props) => props.theme.typography.fonts.heading};
    --font-body: ${(props) => props.theme.typography.fonts.sans};
  }

  html {
    font-size: ${(props) => props.theme.typography.scale.base};
  }

  body {
    margin: 0;
    padding: 0;
    font-family: var(--font-body);
    line-height: ${(props) => props.theme.typography.lineHeights.normal};
    color: ${(props) => props.theme.colors.text.primary};
    background-color: ${(props) => props.theme.colors.background.primary};
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: var(--font-heading);
    margin: 0;
  }
`;

================
File: src/styles/theme/animations.css
================
/* src/styles/theme/animations.css */

:root {
  /* Duration tokens */
  --animation-duration-instant: 0ms;
  --animation-duration-fast: 150ms;
  --animation-duration-normal: 250ms;
  --animation-duration-slow: 350ms;
  --animation-duration-slower: 500ms;

  /* Easing tokens */
  --animation-easing-linear: linear;
  --animation-easing-easeIn: cubic-bezier(0.4, 0, 1, 1);
  --animation-easing-easeOut: cubic-bezier(0, 0, 0.2, 1);
  --animation-easing-easeInOut: cubic-bezier(0.4, 0, 0.2, 1);
  --animation-easing-emphasizedDecelerate: cubic-bezier(0.05, 0.7, 0.1, 1.0);
  --animation-easing-emphasizedAccelerate: cubic-bezier(0.3, 0.0, 0.8, 0.15);
}

================
File: src/styles/theme/ThemeProvider.tsx
================
import React from "react";
import { ThemeProvider as StyledThemeProvider } from "styled-components";
import { lightTheme } from "./themes";
import { GlobalStyles } from "../global/GlobalStyles";

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  return (
    <StyledThemeProvider theme={lightTheme}>
      <GlobalStyles />
      {children}
    </StyledThemeProvider>
  );
};

================
File: src/styles/theme/themes.ts
================
// Path: src/styles/theme/themes.ts

import { colors, typography, spacing, animation } from "../tokens";

export const lightTheme = {
  colors: {
    ...colors.theme, // Use theme colors instead of semantic
    background: {
      primary: colors.base.navy[50],
      secondary: colors.base.blue[50],
    },
    text: {
      primary: colors.base.navy[900],
      secondary: colors.base.navy[500],
    },
  },
  typography,
  spacing,
  animation,
};

export const darkTheme = {
  ...lightTheme,
  colors: {
    ...colors.theme, // Change here too
    background: {
      primary: colors.base.navy[900],
      secondary: colors.base.navy[800],
    },
    text: {
      primary: colors.base.navy[50],
      secondary: colors.base.navy[100],
    },
  },
};

export type Theme = typeof lightTheme;

================
File: src/styles/tokens/__tests__/animation.test.ts
================
// src/styles/tokens/__tests__/animation.test.ts
// update
// src/styles/tokens/__tests__/animation.test.ts
import { animation } from "../animation";

describe("Animation Tokens", () => {
  describe("durations", () => {
    it("should have all required duration tokens", () => {
      expect(animation.durations).toHaveProperty("instant", "0ms");
      expect(animation.durations).toHaveProperty("fastest", "100ms");
      expect(animation.durations).toHaveProperty("fast", "200ms");
      expect(animation.durations).toHaveProperty("normal", "300ms");
      expect(animation.durations).toHaveProperty("slow", "400ms");
      expect(animation.durations).toHaveProperty("slowest", "500ms");
    });
  });

  describe("easings", () => {
    it("should have standard easing tokens", () => {
      expect(animation.easings).toHaveProperty("linear");
      expect(animation.easings).toHaveProperty("easeOut");
      expect(animation.easings).toHaveProperty("easeIn");
      expect(animation.easings).toHaveProperty("easeInOut");
    });

    it("should have variant easing tokens", () => {
      expect(animation.easings).toHaveProperty("easeOutFast");
      expect(animation.easings).toHaveProperty("easeOutSlow");
      expect(animation.easings).toHaveProperty("easeInFast");
      expect(animation.easings).toHaveProperty("easeInSlow");
      expect(animation.easings).toHaveProperty("easeInOutFast");
      expect(animation.easings).toHaveProperty("easeInOutSlow");
    });
  });

  describe("presets", () => {
    it("should have all animation presets", () => {
      expect(animation.presets).toHaveProperty("fade");
      expect(animation.presets).toHaveProperty("slideUp");
      expect(animation.presets).toHaveProperty("slideDown");
      expect(animation.presets).toHaveProperty("scale");
    });

    it("should have in/out variants for each preset", () => {
      Object.entries(animation.presets).forEach(([_, preset]) => {
        expect(preset).toHaveProperty("in");
        expect(preset).toHaveProperty("out");
      });
    });
  });

  describe("components", () => {
    describe("button", () => {
      it("should have correct button animations", () => {
        expect(animation.components.button.hover).toEqual({
          duration: "fast",
          easing: "easeOut",
        });
        expect(animation.components.button.active).toEqual({
          duration: "fastest",
          easing: "easeOut",
        });
      });
    });

    describe("dialog", () => {
      it("should have correct dialog animations", () => {
        expect(animation.components.dialog.enter).toEqual({
          duration: "normal",
          easing: "easeOut",
          preset: "slideUp",
        });
        expect(animation.components.dialog.exit).toEqual({
          duration: "fast",
          easing: "easeIn",
          preset: "fade",
        });
      });
    });
  });
});

================
File: src/styles/tokens/animation.ts
================
// src/styles/tokens/animation.ts

// Duration tokens
const durations = {
  instant: '0ms',
  fastest: '100ms',
  fast: '200ms',
  normal: '300ms',
  slow: '400ms',
  slowest: '500ms',
} as const;

// Easing tokens
const easings = {
  // Standard easings
  linear: 'linear',
  
  // Ease-out (most UI elements)
  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
  easeOutFast: 'cubic-bezier(0.0, 0, 0.1, 1)',
  easeOutSlow: 'cubic-bezier(0.0, 0, 0.3, 1)',
  
  // Ease-in (elements exiting view)
  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
  easeInFast: 'cubic-bezier(0.3, 0, 1, 1)',
  easeInSlow: 'cubic-bezier(0.5, 0, 1, 1)',
  
  // Ease-in-out (changing states)
  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
  easeInOutFast: 'cubic-bezier(0.3, 0, 0.1, 1)',
  easeInOutSlow: 'cubic-bezier(0.5, 0, 0.3, 1)',
} as const;

// Animation preset tokens
const presets = {
  fade: {
    in: {
      from: { opacity: 0 },
      to: { opacity: 1 },
    },
    out: {
      from: { opacity: 1 },
      to: { opacity: 0 },
    },
  },
  slideUp: {
    in: {
      from: { transform: 'translateY(10px)', opacity: 0 },
      to: { transform: 'translateY(0)', opacity: 1 },
    },
    out: {
      from: { transform: 'translateY(0)', opacity: 1 },
      to: { transform: 'translateY(-10px)', opacity: 0 },
    },
  },
  slideDown: {
    in: {
      from: { transform: 'translateY(-10px)', opacity: 0 },
      to: { transform: 'translateY(0)', opacity: 1 },
    },
    out: {
      from: { transform: 'translateY(0)', opacity: 1 },
      to: { transform: 'translateY(10px)', opacity: 0 },
    },
  },
  scale: {
    in: {
      from: { transform: 'scale(0.95)', opacity: 0 },
      to: { transform: 'scale(1)', opacity: 1 },
    },
    out: {
      from: { transform: 'scale(1)', opacity: 1 },
      to: { transform: 'scale(0.95)', opacity: 0 },
    },
  },
} as const;

// Specific component animation configurations
const components = {
  button: {
    hover: {
      duration: 'fast',
      easing: 'easeOut',
    },
    active: {
      duration: 'fastest',
      easing: 'easeOut',
    },
  },
  dialog: {
    enter: {
      duration: 'normal',
      easing: 'easeOut',
      preset: 'slideUp',
    },
    exit: {
      duration: 'fast',
      easing: 'easeIn',
      preset: 'fade',
    },
  },
  tooltip: {
    enter: {
      duration: 'fast',
      easing: 'easeOutFast',
      preset: 'fade',
    },
    exit: {
      duration: 'fastest',
      easing: 'easeIn',
      preset: 'fade',
    },
  },
  menu: {
    enter: {
      duration: 'normal',
      easing: 'easeOutFast',
      preset: 'scale',
    },
    exit: {
      duration: 'fast',
      easing: 'easeIn',
      preset: 'fade',
    },
  },
} as const;

export const animation = {
  durations,
  easings,
  presets,
  components,
} as const;

// Type exports
export type AnimationDurations = typeof durations;
export type AnimationEasings = typeof easings;
export type AnimationPresets = typeof presets;
export type ComponentAnimations = typeof components;

================
File: src/styles/tokens/colors.ts
================
// File: src/styles/tokens/colors.ts

// Base color palette
const baseColors = {
  navy: {
    50: "#E6E8ED",
    100: "#C2C7D6",
    200: "#9EA7BC",
    300: "#7A87A3",
    400: "#566789",
    500: "#1B2B4D", // Primary brand color
    600: "#162341",
    700: "#111B35",
    800: "#0D1429",
    900: "#0A1020",
  },
  blue: {
    50: "#EBF8FF",
    100: "#BEE3F8",
    200: "#90CDF4",
    300: "#63B3ED",
    400: "#4299E1",
    500: "#3182CE", // Secondary brand color
    600: "#2B6CB0",
    700: "#2C5282",
    800: "#2A4365",
    900: "#1A365D",
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E", // Destructive actions
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B",
  },
  green: {
    50: "#F0FDF4",
    100: "#DCFCE7",
    200: "#BBF7D0",
    300: "#86EFAC",
    400: "#4ADE80",
    500: "#22C55E", // Success state
    600: "#16A34A",
    700: "#15803D",
    800: "#166534",
    900: "#14532D",
  },
} as const;

// Semantic color tokens
const themeColors = {
  // Brand colors
  primary: "var(--color-navy-500)",
  "primary-lighter": "var(--color-navy-400)",
  "primary-darker": "var(--color-navy-600)",
  "primary-foreground": "var(--white)",

  secondary: "var(--color-blue-500)",
  "secondary-lighter": "var(--color-blue-400)",
  "secondary-darker": "var(--color-blue-600)",
  "secondary-foreground": "var(--white)",

  // UI colors
  accent: "var(--color-blue-50)",
  "accent-foreground": "var(--color-blue-900)",
  muted: "var(--color-navy-50)",
  "muted-foreground": "var(--color-navy-500)",

  // Background colors
  background: "var(--white)",
  "background-subtle": "var(--color-navy-50)",
  "background-muted": "var(--color-navy-100)",

  // State colors
  destructive: "var(--color-red-500)",
  "destructive-lighter": "var(--color-red-400)",
  "destructive-darker": "var(--color-red-600)",
  "destructive-foreground": "var(--white)",

  success: "var(--color-green-500)",
  "success-lighter": "var(--color-green-400)",
  "success-darker": "var(--color-green-600)",
  "success-foreground": "var(--white)",
} as const;

// Component-specific color tokens
const componentColors = {
  button: {
    primary: {
      background: "var(--colors-primary)",
      foreground: "var(--colors-primary-foreground)",
      hover: "var(--colors-primary-darker)",
      active: "var(--colors-primary-darker)",
      disabled: "var(--colors-primary-lighter)",
    },
    outline: {
      border: "var(--colors-muted)",
      background: "transparent",
      hover: "var(--colors-accent)",
      active: "var(--colors-accent)",
    },
  },
  input: {
    border: "var(--colors-muted)",
    background: "var(--colors-background)",
    placeholder: "var(--colors-muted-foreground)",
    focus: "var(--colors-primary)",
    disabled: {
      background: "var(--colors-muted)",
      text: "var(--colors-muted-foreground)",
    },
  },
  navigation: {
    background: "var(--colors-background)",
    item: {
      text: "var(--colors-muted-foreground)",
      "text-hover": "var(--colors-primary)",
      "text-active": "var(--colors-primary)",
      "background-hover": "var(--colors-accent)",
      "background-active": "var(--colors-accent)",
    },
  },
} as const;

export const colors = {
  base: baseColors,
  theme: themeColors,
  components: componentColors,
} as const;

// Type exports for type safety
export type BaseColors = typeof baseColors;
export type ThemeColors = typeof themeColors;
export type ComponentColors = typeof componentColors;

================
File: src/styles/tokens/index.ts
================
export * from "./colors";
export * from "./typography";
export * from "./spacing";
export * from "./animation";

================
File: src/styles/tokens/spacing.ts
================
// src/styles/tokens/spacing.ts
export const spacing = {
  // Base scale
  scale: {
    px: "1px",
    0: "0",
    0.5: "0.125rem", // 2px
    1: "0.25rem", // 4px
    1.5: "0.375rem", // 6px
    2: "0.5rem", // 8px
    2.5: "0.625rem", // 10px
    3: "0.75rem", // 12px
    3.5: "0.875rem", // 14px
    4: "1rem", // 16px
    5: "1.25rem", // 20px
    6: "1.5rem", // 24px
    7: "1.75rem", // 28px
    8: "2rem", // 32px
    9: "2.25rem", // 36px
    10: "2.5rem", // 40px
    11: "2.75rem", // 44px
    12: "3rem", // 48px
    14: "3.5rem", // 56px
    16: "4rem", // 64px
    20: "5rem", // 80px
    24: "6rem", // 96px
    28: "7rem", // 112px
    32: "8rem", // 128px
    36: "9rem", // 144px
    40: "10rem", // 160px
    44: "11rem", // 176px
    48: "12rem", // 192px
    52: "13rem", // 208px
    56: "14rem", // 224px
    60: "15rem", // 240px
    64: "16rem", // 256px
    72: "18rem", // 288px
    80: "20rem", // 320px
    96: "24rem", // 384px
  },

  // Semantic tokens
  layout: {
    page: {
      x: "var(--spacing-6)",
      y: "var(--spacing-8)",
      maxWidth: "var(--spacing-screen-xl)",
    },
    section: {
      x: "var(--spacing-4)",
      y: "var(--spacing-6)",
    },
    container: {
      x: "var(--spacing-4)",
      y: "var(--spacing-4)",
    },
  },

  // Component-specific tokens
  components: {
    navigation: {
      item: "var(--spacing-4)",
      gap: "var(--spacing-2)",
      padding: {
        x: "var(--spacing-4)",
        y: "var(--spacing-2)",
      },
    },
    card: {
      padding: {
        x: "var(--spacing-6)",
        y: "var(--spacing-4)",
      },
      gap: "var(--spacing-4)",
    },
    button: {
      padding: {
        x: "var(--spacing-4)",
        y: "var(--spacing-2)",
      },
      gap: "var(--spacing-2)",
    },
    input: {
      padding: {
        x: "var(--spacing-3)",
        y: "var(--spacing-2)",
      },
      gap: "var(--spacing-1.5)",
    },
    form: {
      gap: "var(--spacing-4)",
      fieldset: "var(--spacing-6)",
    },
  },
} as const;

// Type exports
export type SpacingScale = typeof spacing.scale;
export type SpacingLayout = typeof spacing.layout;
export type SpacingComponents = typeof spacing.components;

================
File: src/styles/tokens/typography.ts
================
// src/styles/tokens/typography.ts
export const typography = {
  // Base scale
  scale: {
    xs: "0.75rem", // 12px
    sm: "0.875rem", // 14px
    base: "1rem", // 16px
    lg: "1.125rem", // 18px
    xl: "1.25rem", // 20px
    "2xl": "1.5rem", // 24px
    "3xl": "1.875rem", // 30px
    "4xl": "2.25rem", // 36px
    "5xl": "3rem", // 48px
    "6xl": "3.75rem", // 60px
  },

  fonts: {
    sans: "var(--font-sans)",
    mono: "var(--font-mono)",
    heading: "var(--font-heading)",
  },

  weights: {
    normal: "400",
    medium: "500",
    semibold: "600",
    bold: "700",
  },

  lineHeights: {
    none: "1",
    tight: "1.25",
    snug: "1.375",
    normal: "1.5",
    relaxed: "1.625",
    loose: "2",
  },

  // Semantic tokens
  heading: {
    1: {
      size: "var(--font-size-4xl)",
      weight: "var(--font-weight-bold)",
      lineHeight: "var(--line-height-tight)",
      font: "var(--font-heading)",
    },
    2: {
      size: "var(--font-size-3xl)",
      weight: "var(--font-weight-bold)",
      lineHeight: "var(--line-height-tight)",
      font: "var(--font-heading)",
    },
    3: {
      size: "var(--font-size-2xl)",
      weight: "var(--font-weight-semibold)",
      lineHeight: "var(--line-height-tight)",
      font: "var(--font-heading)",
    },
    4: {
      size: "var(--font-size-xl)",
      weight: "var(--font-weight-semibold)",
      lineHeight: "var(--line-height-tight)",
      font: "var(--font-heading)",
    },
  },

  body: {
    large: {
      size: "var(--font-size-lg)",
      weight: "var(--font-weight-normal)",
      lineHeight: "var(--line-height-relaxed)",
    },
    default: {
      size: "var(--font-size-base)",
      weight: "var(--font-weight-normal)",
      lineHeight: "var(--line-height-normal)",
    },
    small: {
      size: "var(--font-size-sm)",
      weight: "var(--font-weight-normal)",
      lineHeight: "var(--line-height-normal)",
    },
  },

  // Component-specific tokens
  components: {
    navigation: {
      item: {
        size: "var(--font-size-sm)",
        weight: "var(--font-weight-medium)",
        lineHeight: "var(--line-height-tight)",
      },
      title: {
        size: "var(--font-size-lg)",
        weight: "var(--font-weight-bold)",
        lineHeight: "var(--line-height-tight)",
      },
    },
    button: {
      default: {
        size: "var(--font-size-sm)",
        weight: "var(--font-weight-medium)",
        lineHeight: "var(--line-height-tight)",
      },
      large: {
        size: "var(--font-size-base)",
        weight: "var(--font-weight-medium)",
        lineHeight: "var(--line-height-tight)",
      },
    },
    input: {
      label: {
        size: "var(--font-size-sm)",
        weight: "var(--font-weight-medium)",
        lineHeight: "var(--line-height-tight)",
      },
      text: {
        size: "var(--font-size-base)",
        weight: "var(--font-weight-normal)",
        lineHeight: "var(--line-height-normal)",
      },
    },
  },
} as const;

// Type exports
export type TypographyScale = typeof typography.scale;
export type TypographyFonts = typeof typography.fonts;
export type TypographyWeights = typeof typography.weights;
export type TypographyLineHeights = typeof typography.lineHeights;

================
File: src/test/components/SimpleTest.tsx
================
import { render, screen } from "@testing-library/react";

describe("Simple Test", () => {
    it("test environment is working", () => {
        render(<div>Hello Test</div>);
        expect(screen.getByText("Hello Test")).toBeInTheDocument();
    });
});

================
File: src/test/setup/browser-mocks.ts
================
// src/test/setup/browser-mocks.ts
Object.defineProperty(window, "matchMedia", {
  writable: true,
  value: jest.fn().mockImplementation((query) => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(), // deprecated
    removeListener: jest.fn(), // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

Object.defineProperty(window, "ResizeObserver", {
  writable: true,
  value: jest.fn().mockImplementation(() => ({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn(),
  })),
});

================
File: src/test/setup/global-polyfills.ts
================
// src/test/setup/global-polyfills.ts
import { TextEncoder, TextDecoder } from "util";

declare global {
  var TextEncoder: typeof TextEncoder;
  var TextDecoder: typeof TextDecoder;
}

// Set TextEncoder/TextDecoder with type assertions
global.TextEncoder = TextEncoder as typeof global.TextEncoder;
global.TextDecoder = TextDecoder as typeof global.TextDecoder;

// Other Web API polyfills
Object.defineProperty(global, "ResizeObserver", {
  writable: true,
  value: jest.fn().mockImplementation(() => ({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn(),
  })),
});

Object.defineProperty(global, "matchMedia", {
  writable: true,
  value: jest.fn().mockImplementation((query) => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

================
File: src/test/setup/jest.setup.ts
================
// src/test/setup/jest.setup.ts
import "@testing-library/jest-dom";

// Setup window.matchMedia
Object.defineProperty(window, "matchMedia", {
  writable: true,
  value: jest.fn().mockImplementation((query) => ({
    matches: query === "(prefers-color-scheme: dark)", // Default to dark mode
    media: query,
    onchange: null,
    addListener: jest.fn(), // deprecated
    removeListener: jest.fn(), // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}));

================
File: src/test/unit/components/Button.test.tsx
================
// src/__tests__/unit/components/Button.test.tsx
import { render, screen } from "@/test/test-utils";
import { Button } from "@/components/ui/button";
import { Mail } from "lucide-react";

describe("Button Component", () => {
  it("renders with text content", () => {
    render(<Button>Click me</Button>);
    expect(screen.getByRole("button")).toHaveTextContent("Click me");
  });

  it("handles different variants", () => {
    const { rerender } = render(<Button variant="default">Default</Button>);
    expect(screen.getByRole("button")).toHaveClass("bg-primary");

    rerender(<Button variant="destructive">Destructive</Button>);
    expect(screen.getByRole("button")).toHaveClass("bg-destructive");

    rerender(<Button variant="outline">Outline</Button>);
    expect(screen.getByRole("button")).toHaveClass("border");
  });

  it("renders with icon", () => {
    render(
      <Button>
        <Mail className="mr-2 h-4 w-4" />
        Login with Email
      </Button>,
    );
    expect(screen.getByRole("button")).toContainElement(
      document.querySelector("svg"),
    );
  });

  it("can be disabled", () => {
    render(<Button disabled>Disabled</Button>);
    expect(screen.getByRole("button")).toBeDisabled();
  });

  it("handles click events", async () => {
    const handleClick = jest.fn();
    const { user } = render(<Button onClick={handleClick}>Click me</Button>);

    await user.click(screen.getByRole("button"));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it("handles loading state", () => {
    render(
      <Button disabled>
        <span className="loading loading-spinner" />
        Loading
      </Button>,
    );
    expect(screen.getByRole("button")).toBeDisabled();
    expect(screen.getByText("Loading")).toBeInTheDocument();
  });
});

================
File: src/test/unit/components/Form.test.tsx
================
// src/test/unit/components/Form.test.tsx
import { render, screen, waitFor } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { Form } from "@/components/ui/form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ThemeProvider } from "@/components/theme-provider";

describe("Form Component", () => {
  const TestForm = ({ onSubmit }: { onSubmit: (data: any) => void }) => (
    <ThemeProvider>
      <form
        onSubmit={(e) => {
          e.preventDefault();
          onSubmit(e);
        }}
      >
        <Input name="email" placeholder="Email" />
        <Input name="password" type="password" placeholder="Password" />
        <Button type="submit">Submit</Button>
      </form>
    </ThemeProvider>
  );

  it("renders form elements correctly", () => {
    render(<TestForm onSubmit={jest.fn()} />);
    expect(screen.getByPlaceholderText("Email")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Password")).toBeInTheDocument();
    expect(screen.getByRole("button", { name: "Submit" })).toBeInTheDocument();
  });

  it("handles form submission", async () => {
    const handleSubmit = jest.fn((e) => e.preventDefault());
    const user = userEvent.setup();

    render(<TestForm onSubmit={handleSubmit} />);

    await user.type(screen.getByPlaceholderText("Email"), "test@example.com");
    await user.type(screen.getByPlaceholderText("Password"), "password123");
    await user.click(screen.getByRole("button", { name: "Submit" }));

    await waitFor(() => {
      expect(handleSubmit).toHaveBeenCalled();
    });
  });
});

================
File: src/test/utils/form.tsx
================
// src/test/utils/form.tsx
import React from "react";
import { useForm, FormProvider } from "react-hook-form";
import { render } from "@testing-library/react";

export function renderWithForm(ui: React.ReactElement) {
  const Wrapper = ({ children }: { children: React.ReactNode }) => {
    const methods = useForm({
      defaultValues: {
        email: "",
        password: "",
        username: "",
      },
    });
    return <FormProvider {...methods}>{children}</FormProvider>;
  };

  return render(ui, { wrapper: Wrapper });
}

================
File: src/test/utils/test-utils.tsx
================
// src/test/utils/test-utils.tsx
import React from "react";
import { render as rtlRender } from "@testing-library/react";
import { ThemeProvider } from "@/components/theme-provider";

function render(ui: React.ReactElement, options = {}) {
  const Wrapper = ({ children }: { children: React.ReactNode }) => (
    <ThemeProvider attribute="class" defaultTheme="dark" enableSystem={false}>
      {children}
    </ThemeProvider>
  );

  return rtlRender(ui, { wrapper: Wrapper, ...options });
}

export * from "@testing-library/react";
export { render };

================
File: src/test/setup.ts
================
// Path: src/test/setup.ts
import "@testing-library/jest-dom";
import "jest-styled-components";

type CSSCustomProperties = {
  "--font-heading": string;
  "--font-body": string;
};

// Mock CSS custom properties
Object.defineProperty(window, "getComputedStyle", {
  value: (elem: Element) => ({
    getPropertyValue: (prop: keyof CSSCustomProperties) => {
      const properties: CSSCustomProperties = {
        "--font-heading": "heading-font",
        "--font-body": "body-font",
      };
      return properties[prop] || "";
    },
  }),
});

================
File: src/test/test-utils.tsx
================
// src/test/test-utils.tsx
import React from "react";
import { render as rtlRender } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { ThemeProvider } from "@/components/theme-provider";

function render(ui: React.ReactElement, options = {}) {
  return {
    ...rtlRender(ui, {
      wrapper: ({ children }) => (
        <ThemeProvider attribute="class" defaultTheme="system" enableSystem>
          {children}
        </ThemeProvider>
      ),
      ...options,
    }),
    user: userEvent.setup(),
  };
}

export * from "@testing-library/react";
export { render };

================
File: src/types/blog.ts
================
// src/types/blog.ts
// Path: src/types/blog.ts

export interface ImageAsset {
  url: string;
  width: number;
  height: number;
  blurDataUrl?: string;
  altText?: string;
  format?: "jpeg" | "png" | "webp" | "gif";
}

export interface BlogPost {
  id: number;
  title: string;
  slug: string;
  content: string;
  excerpt: string;
  category: {
    id: number;
    name: string;
    slug: string;
    description: string;
  };
  featured_image?: ImageAsset;
  author: number;
  published_at: string | null;
  created_at: string;
  updated_at: string;
  seo_title: string;
  seo_description: string;
  seo_keywords: string;
  estimated_read_time: number;
  view_count: number;
}

export interface PaginationInfo {
  total: number;
  current_page: number;
  total_pages: number;
  per_page: number;
}

export interface Category {
  id: number;
  name: string;
  slug: string;
  description: string;
}

export interface BlogListResponse {
  data: BlogPost[];
  pagination: PaginationInfo;
}

export interface CategoryListResponse {
  data: Category[];
  pagination: PaginationInfo;
}

================
File: src/types/calendly.d.ts
================
// src/types/calendly.d.ts
declare global {
  interface Window {
    Calendly?: {
      initPopupWidget: (options: { url: string }) => void;
    };
  }
}

export {};

================
File: src/types/newsletter.ts
================
// src/types/newsletter.ts
export interface NewsletterFormData {
    firstName: string;
    email: string;
    source: "banner" | "content-end";
}

export type NewsletterStatus = "idle" | "submitting" | "success" | "error";

================
File: src/types/window.d.ts
================
// src/types/window.d.ts
declare global {
  interface Window {
    Calendly?: {
      initPopupWidget: (options: { url: string }) => void;
    };
  }
}
export {};

================
File: src/utils/api.ts
================
// src/utils/api.ts

const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL;

export async function fetchFromAPI<T>(endpoint: string): Promise<T> {
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        },
        credentials: "include",
    });

    if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
    }

    return response.json();
}

// Example usage:
// const services = await fetchFromAPI<ServiceResponse>('/api/services/');

================
File: src/utils/form.tsx
================
//src/utils/form.tsx
import React from "react";
import { useForm, FormProvider } from "react-hook-form";
import { render } from "@testing-library/react";

export function renderWithForm(ui: React.ReactElement) {
  const Wrapper = ({ children }: { children: React.ReactNode }) => {
    const methods = useForm({
      defaultValues: {
        test: "",
      },
    });
    return <FormProvider {...methods}>{children}</FormProvider>;
  };

  return render(ui, { wrapper: Wrapper });
}

================
File: src/setupTests.ts
================
// src/setupTests.ts
import { TextEncoder, TextDecoder } from "node:util";
import "@testing-library/jest-dom";
import "jest-styled-components";

// Mock CSS custom properties
Object.defineProperty(window, "getComputedStyle", {
  value: (elem: Element) => ({
    getPropertyValue: (prop: string) => {
      return prop === "--font-heading" ? "heading-font" : "body-font";
    },
  }),
});

Object.defineProperty(window, "matchMedia", {
  writable: true,
  value: jest.fn().mockImplementation((query: string) => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

// Must come before any imports

declare global {
  var TextEncoder: typeof TextEncoder;
  var TextDecoder: typeof TextDecoder;
}

global.TextEncoder = TextEncoder as typeof global.TextEncoder;
global.TextDecoder = TextDecoder as typeof global.TextDecoder;

// Mock matchMedia
Object.defineProperty(window, "matchMedia", {
  writable: true,
  value: jest.fn().mockImplementation((query) => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
});

// Mock the BroadcastChannel
const mockBroadcastChannel = {
  name: "",
  postMessage: jest.fn(),
  onmessage: jest.fn(),
  onmessageerror: jest.fn(),
  close: jest.fn(),
  addEventListener: jest.fn(),
  removeEventListener: jest.fn(),
  dispatchEvent: jest.fn(),
};

// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
  observe() {}
  unobserve() {}
  disconnect() {}
};

Object.assign(global, {
  BroadcastChannel: jest.fn().mockImplementation(() => mockBroadcastChannel),
});

// Now import everything else
import "@testing-library/jest-dom";
import "whatwg-fetch";
import { configure } from "@testing-library/react";

================
File: src/test.txt
================
{
  "encoding": "base64",
  "content": "dGVzdCBjb250ZW50"
}

================
File: types/blog.ts
================
// Path: neural_nexus_frontend/types/blog.ts

export interface BlogPost {
  id: number;
  title: string;
  slug: string;
  content: string;
  created_at: string;
  updated_at: string;
  published: boolean;
  // Add any other fields your blog posts have
}

================
File: .env.development
================
# Path: neural_nexus_frontend/.env.development
# Development configuration for Next.js frontend
NEXT_PUBLIC_API_URL=http://localhost:8000
NODE_ENV=development

================
File: .env.example
================
# Path: neural_nexus_frontend/.env.example
# Example configuration for Next.js frontend
NEXT_PUBLIC_API_URL=http://localhost:8000
NODE_ENV=development

================
File: .env.local
================
# .env.local
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_ANTHROPIC_API_KEY=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
NODE_ENV=development

NEXT_PUBLIC_CALENDLY_USERNAME=neuralnexus
NEXT_PUBLIC_CALENDLY_SHOW_DETAILS=false
NEXT_PUBLIC_CALENDLY_SHOW_COOKIES=false

NEXT_PUBLIC_GA_ID=G-6MV9BW7RG6
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=dkjqgwlob

================
File: .env.production
================
# Path: neural_nexus_frontend/.env.production
# Production configuration for Next.js frontend
NEXT_PUBLIC_API_URL=https://nns-backend-production.up.railway.app
NODE_ENV=production

NEXT_PUBLIC_GA_ID=G-6MV9BW7RG6
NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=dkjqgwlob

================
File: .eslintrc.json
================
{
  "extends": ["next", "plugin:@typescript-eslint/recommended"],
  "plugins": ["@typescript-eslint"],
  "rules": {
    "@typescript-eslint/no-unused-vars": "warn",
    "import/no-anonymous-default-export": "warn"
  },
  "overrides": [
    {
      "files": [
        "**/*.test.ts",
        "**/*.test.tsx",
        "**/*.stories.tsx",
        "**/setup.ts"
      ],
      "rules": {
        "@typescript-eslint/no-unused-vars": "off",
        "import/no-anonymous-default-export": "off"
      }
    }
  ]
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: jest.config.js
================
// neural_nexus_frontend/jest.config.js
const nextJest = require("next/jest");

const createJestConfig = nextJest({
  dir: "./",
});

const customJestConfig = {
  setupFilesAfterEnv: [
    "<rootDir>/src/test/setup.ts", // Updated path to match our new setup file
    "<rootDir>/src/setupTests.ts", // Keep existing setup if needed
  ],
  testEnvironment: "jest-environment-jsdom",
  moduleNameMapper: {
    "^@/(.*)$": "<rootDir>/src/$1",
  },
  // Silence console output in tests
  silent: true,
  // Only show test summaries
  verbose: false,
  // Only show errors and warnings
  maxWorkers: 1,
};

module.exports = createJestConfig(customJestConfig);

================
File: neural-nexus-helper.js
================
// neural-nexus-helper.js - For your JavaScript/React frontend project
import { Configuration, OpenAIApi } from "anthropic-sdk";

class NeuralNexusReactHelper {
    constructor(apiKey) {
        this.client = new Configuration({
            apiKey,
            baseURL: "https://api.anthropic.com/v1",
        });
    }

    async getComponentGuidance(componentName, questionType) {
        const prompt = `As the frontend developer for Neural Nexus Strategies website,
        I'm working on the ${componentName} component.
        ${questionType}

        Based on the project documentation, provide guidance focused on:
        - React/Next.js implementation details
        - Component structure
        - State management
        - API integration
        - UI/UX requirements`;

        const response = await this.client.messages.create({
            model: "claude-3-opus-20240229",
            messages: [
                {
                    role: "user",
                    content: prompt,
                },
            ],
        });

        return response.content[0].text;
    }

    async checkReactImplementation(code, componentName) {
        const prompt = `Review this React implementation for ${componentName}:

        ${code}

        Based on the Neural Nexus project specs, verify:
        1. Component architecture
        2. State management
        3. API integration
        4. UI/UX requirements
        5. Performance considerations`;

        const response = await this.client.messages.create({
            model: "claude-3-opus-20240229",
            messages: [
                {
                    role: "user",
                    content: prompt,
                },
            ],
        });

        return response.content[0].text;
    }
}

export default NeuralNexusReactHelper;

================
File: next-env.d.ts
================
/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference types="next/navigation-types/compat/navigation" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.

================
File: next.config.js
================
// Path: neural_nexus_frontend/next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  output: "standalone",
  images: {
    domains: ["res.cloudinary.com"],
    unoptimized: true,
  },
  rewrites: async () => {
    return [
      {
        source: "/api/:path*",
        destination:
          process.env.NEXT_PUBLIC_API_URL + "/:path*" ||
          "https://nns-backend-production.up.railway.app/api/:path*",
      },
    ];
  },
  eslint: { ignoreDuringBuilds: true },
  typescript: { ignoreBuildErrors: true },
};

module.exports = nextConfig;

================
File: nns_frontend_structure.txt
================
.
├── node_modules
│   ├── @adobe
│   │   └── css-tools
│   │       └── dist
│   ├── @alloc
│   │   └── quick-lru
│   ├── @ampproject
│   │   └── remapping
│   │       └── dist
│   │           └── types
│   ├── @anthropic-ai
│   │   └── sdk
│   │       ├── _shims
│   │       │   └── auto
│   │       ├── _vendor
│   │       │   └── partial-json-parser
│   │       ├── internal
│   │       │   └── decoders
│   │       ├── lib
│   │       ├── node_modules
│   │       │   ├── @types
│   │       │   │   └── node
│   │       │   │       ├── assert
│   │       │   │       ├── compatibility
│   │       │   │       ├── dns
│   │       │   │       ├── fs
│   │       │   │       ├── readline
│   │       │   │       ├── stream
│   │       │   │       ├── timers
│   │       │   │       └── ts5.6
│   │       │   └── undici-types
│   │       ├── resources
│   │       │   └── beta
│   │       │       ├── messages
│   │       │       └── prompt-caching
│   │       ├── shims
│   │       └── src
│   │           ├── _shims
│   │           │   └── auto
│   │           ├── _vendor
│   │           │   └── partial-json-parser
│   │           ├── internal
│   │           │   └── decoders
│   │           ├── lib
│   │           ├── resources
│   │           │   └── beta
│   │           │       ├── messages
│   │           │       └── prompt-caching
│   │           └── shims
│   ├── @babel
│   │   ├── code-frame
│   │   │   └── lib
│   │   ├── compat-data
│   │   │   └── data
│   │   ├── core
│   │   │   ├── lib
│   │   │   │   ├── config
│   │   │   │   │   ├── files
│   │   │   │   │   ├── helpers
│   │   │   │   │   └── validation
│   │   │   │   ├── errors
│   │   │   │   ├── gensync-utils
│   │   │   │   ├── parser
│   │   │   │   │   └── util
│   │   │   │   ├── tools
│   │   │   │   ├── transformation
│   │   │   │   │   ├── file
│   │   │   │   │   └── util
│   │   │   │   └── vendor
│   │   │   ├── node_modules
│   │   │   │   └── semver
│   │   │   │       └── bin
│   │   │   └── src
│   │   │       └── config
│   │   │           └── files
│   │   ├── generator
│   │   │   └── lib
│   │   │       ├── generators
│   │   │       └── node
│   │   ├── helper-compilation-targets
│   │   │   ├── lib
│   │   │   └── node_modules
│   │   │       └── semver
│   │   │           └── bin
│   │   ├── helper-module-imports
│   │   │   └── lib
│   │   ├── helper-module-transforms
│   │   │   └── lib
│   │   ├── helper-plugin-utils
│   │   │   └── lib
│   │   ├── helper-string-parser
│   │   │   └── lib
│   │   ├── helper-validator-identifier
│   │   │   └── lib
│   │   ├── helper-validator-option
│   │   │   └── lib
│   │   ├── helpers
│   │   │   └── lib
│   │   │       └── helpers
│   │   ├── parser
│   │   │   ├── bin
│   │   │   ├── lib
│   │   │   └── typings
│   │   ├── plugin-syntax-async-generators
│   │   │   └── lib
│   │   ├── plugin-syntax-bigint
│   │   │   └── lib
│   │   ├── plugin-syntax-class-properties
│   │   │   └── lib
│   │   ├── plugin-syntax-class-static-block
│   │   │   └── lib
│   │   ├── plugin-syntax-import-attributes
│   │   │   └── lib
│   │   ├── plugin-syntax-import-meta
│   │   │   └── lib
│   │   ├── plugin-syntax-json-strings
│   │   │   └── lib
│   │   ├── plugin-syntax-jsx
│   │   │   └── lib
│   │   ├── plugin-syntax-logical-assignment-operators
│   │   │   └── lib
│   │   ├── plugin-syntax-nullish-coalescing-operator
│   │   │   └── lib
│   │   ├── plugin-syntax-numeric-separator
│   │   │   └── lib
│   │   ├── plugin-syntax-object-rest-spread
│   │   │   └── lib
│   │   ├── plugin-syntax-optional-catch-binding
│   │   │   └── lib
│   │   ├── plugin-syntax-optional-chaining
│   │   │   └── lib
│   │   ├── plugin-syntax-private-property-in-object
│   │   │   └── lib
│   │   ├── plugin-syntax-top-level-await
│   │   │   └── lib
│   │   ├── plugin-syntax-typescript
│   │   │   └── lib
│   │   ├── runtime
│   │   │   ├── helpers
│   │   │   │   └── esm
│   │   │   └── regenerator
│   │   ├── template
│   │   │   └── lib
│   │   ├── traverse
│   │   │   ├── lib
│   │   │   │   ├── path
│   │   │   │   │   ├── inference
│   │   │   │   │   └── lib
│   │   │   │   └── scope
│   │   │   │       └── lib
│   │   │   └── node_modules
│   │   │       └── globals
│   │   └── types
│   │       └── lib
│   │           ├── asserts
│   │           │   └── generated
│   │           ├── ast-types
│   │           │   └── generated
│   │           ├── builders
│   │           │   ├── flow
│   │           │   ├── generated
│   │           │   ├── react
│   │           │   └── typescript
│   │           ├── clone
│   │           ├── comments
│   │           ├── constants
│   │           │   └── generated
│   │           ├── converters
│   │           ├── definitions
│   │           ├── modifications
│   │           │   ├── flow
│   │           │   └── typescript
│   │           ├── retrievers
│   │           ├── traverse
│   │           ├── utils
│   │           │   └── react
│   │           └── validators
│   │               ├── generated
│   │               └── react
│   ├── @bcoe
│   │   └── v8-coverage
│   │       ├── dist
│   │       │   └── lib
│   │       │       └── _src
│   │       └── src
│   │           ├── lib
│   │           └── test
│   ├── @bundled-es-modules
│   │   ├── cookie
│   │   ├── statuses
│   │   └── tough-cookie
│   ├── @cspotcode
│   │   └── source-map-support
│   │       └── node_modules
│   │           └── @jridgewell
│   │               └── trace-mapping
│   │                   └── dist
│   │                       └── types
│   ├── @emnapi
│   ├── @eslint
│   │   ├── eslintrc
│   │   │   ├── conf
│   │   │   ├── dist
│   │   │   └── lib
│   │   │       ├── config-array
│   │   │       └── shared
│   │   └── js
│   │       └── src
│   │           └── configs
│   ├── @eslint-community
│   │   ├── eslint-utils
│   │   └── regexpp
│   ├── @humanwhocodes
│   │   ├── config-array
│   │   ├── module-importer
│   │   │   ├── dist
│   │   │   └── src
│   │   └── object-schema
│   │       └── src
│   ├── @img
│   │   ├── sharp-darwin-arm64
│   │   │   └── lib
│   │   └── sharp-libvips-darwin-arm64
│   │       └── lib
│   │           └── glib-2.0
│   │               └── include
│   ├── @inquirer
│   │   ├── confirm
│   │   │   └── dist
│   │   │       ├── commonjs
│   │   │       └── esm
│   │   ├── core
│   │   │   ├── dist
│   │   │   │   ├── commonjs
│   │   │   │   │   └── lib
│   │   │   │   │       └── pagination
│   │   │   │   └── esm
│   │   │   │       └── lib
│   │   │   │           └── pagination
│   │   │   └── node_modules
│   │   │       └── signal-exit
│   │   │           └── dist
│   │   │               ├── cjs
│   │   │               └── mjs
│   │   ├── figures
│   │   │   └── dist
│   │   │       ├── commonjs
│   │   │       └── esm
│   │   └── type
│   │       └── dist
│   │           ├── commonjs
│   │           └── esm
│   ├── @isaacs
│   │   └── cliui
│   │       ├── build
│   │       │   └── lib
│   │       └── node_modules
│   │           ├── ansi-regex
│   │           ├── ansi-styles
│   │           ├── string-width
│   │           ├── strip-ansi
│   │           └── wrap-ansi
│   ├── @istanbuljs
│   │   ├── load-nyc-config
│   │   │   └── node_modules
│   │   │       ├── argparse
│   │   │       │   └── lib
│   │   │       │       ├── action
│   │   │       │       │   ├── append
│   │   │       │       │   └── store
│   │   │       │       ├── argument
│   │   │       │       └── help
│   │   │       ├── find-up
│   │   │       ├── js-yaml
│   │   │       │   ├── bin
│   │   │       │   ├── dist
│   │   │       │   └── lib
│   │   │       │       └── js-yaml
│   │   │       │           ├── schema
│   │   │       │           └── type
│   │   │       │               └── js
│   │   │       ├── locate-path
│   │   │       ├── p-limit
│   │   │       ├── p-locate
│   │   │       └── resolve-from
│   │   └── schema
│   ├── @jest
│   │   ├── console
│   │   │   ├── build
│   │   │   └── node_modules
│   │   │       └── chalk
│   │   │           └── source
│   │   ├── core
│   │   │   ├── build
│   │   │   │   ├── cli
│   │   │   │   ├── lib
│   │   │   │   └── plugins
│   │   │   └── node_modules
│   │   │       ├── chalk
│   │   │       │   └── source
│   │   │       ├── pretty-format
│   │   │       │   ├── build
│   │   │       │   │   └── plugins
│   │   │       │   │       └── lib
│   │   │       │   └── node_modules
│   │   │       │       └── ansi-styles
│   │   │       └── react-is
│   │   │           ├── cjs
│   │   │           └── umd
│   │   ├── environment
│   │   │   └── build
│   │   ├── expect
│   │   │   └── build
│   │   ├── expect-utils
│   │   │   └── build
│   │   ├── fake-timers
│   │   │   └── build
│   │   ├── globals
│   │   │   └── build
│   │   ├── reporters
│   │   │   ├── assets
│   │   │   ├── build
│   │   │   └── node_modules
│   │   │       └── chalk
│   │   │           └── source
│   │   ├── schemas
│   │   │   └── build
│   │   ├── source-map
│   │   │   └── build
│   │   ├── test-result
│   │   │   └── build
│   │   ├── test-sequencer
│   │   │   └── build
│   │   ├── transform
│   │   │   ├── build
│   │   │   └── node_modules
│   │   │       └── chalk
│   │   │           └── source
│   │   └── types
│   │       ├── build
│   │       └── node_modules
│   │           └── chalk
│   │               └── source
│   ├── @jridgewell
│   │   ├── gen-mapping
│   │   │   └── dist
│   │   │       └── types
│   │   ├── resolve-uri
│   │   │   └── dist
│   │   │       └── types
│   │   ├── set-array
│   │   │   └── dist
│   │   │       └── types
│   │   ├── sourcemap-codec
│   │   │   └── dist
│   │   │       └── types
│   │   └── trace-mapping
│   │       └── dist
│   │           └── types
│   ├── @mswjs
│   │   └── interceptors
│   │       ├── ClientRequest
│   │       ├── RemoteHttpInterceptor
│   │       ├── WebSocket
│   │       ├── XMLHttpRequest
│   │       ├── fetch
│   │       ├── lib
│   │       │   ├── browser
│   │       │   │   ├── interceptors
│   │       │   │   │   ├── WebSocket
│   │       │   │   │   ├── XMLHttpRequest
│   │       │   │   │   └── fetch
│   │       │   │   └── presets
│   │       │   └── node
│   │       │       ├── interceptors
│   │       │       │   ├── ClientRequest
│   │       │       │   ├── XMLHttpRequest
│   │       │       │   └── fetch
│   │       │       └── presets
│   │       └── src
│   │           ├── interceptors
│   │           │   ├── ClientRequest
│   │           │   │   └── utils
│   │           │   ├── Socket
│   │           │   │   └── utils
│   │           │   ├── WebSocket
│   │           │   │   └── utils
│   │           │   ├── XMLHttpRequest
│   │           │   │   ├── polyfills
│   │           │   │   └── utils
│   │           │   └── fetch
│   │           │       └── utils
│   │           ├── presets
│   │           └── utils
│   ├── @next
│   │   ├── env
│   │   │   └── dist
│   │   ├── eslint-plugin-next
│   │   │   └── dist
│   │   │       ├── rules
│   │   │       └── utils
│   │   └── swc-darwin-arm64
│   ├── @nodelib
│   │   ├── fs.scandir
│   │   │   └── out
│   │   │       ├── adapters
│   │   │       ├── providers
│   │   │       ├── types
│   │   │       └── utils
│   │   ├── fs.stat
│   │   │   └── out
│   │   │       ├── adapters
│   │   │       ├── providers
│   │   │       └── types
│   │   └── fs.walk
│   │       └── out
│   │           ├── providers
│   │           ├── readers
│   │           └── types
│   ├── @nolyfill
│   │   └── is-core-module
│   ├── @open-draft
│   │   ├── deferred-promise
│   │   │   └── build
│   │   ├── logger
│   │   │   └── lib
│   │   └── until
│   │       └── lib
│   ├── @pkgjs
│   │   └── parseargs
│   │       ├── examples
│   │       └── internal
│   ├── @radix-ui
│   │   ├── react-compose-refs
│   │   │   └── dist
│   │   └── react-slot
│   │       └── dist
│   ├── @rtsao
│   │   └── scc
│   ├── @rushstack
│   │   └── eslint-patch
│   │       └── lib
│   │           ├── eslint-bulk-suppressions
│   │           │   └── cli
│   │           │       └── utils
│   │           └── exports
│   ├── @sinclair
│   │   └── typebox
│   │       ├── compiler
│   │       ├── errors
│   │       ├── system
│   │       └── value
│   ├── @sinonjs
│   │   ├── commons
│   │   │   ├── lib
│   │   │   │   └── prototypes
│   │   │   └── types
│   │   │       └── prototypes
│   │   └── fake-timers
│   │       └── src
│   ├── @swc
│   │   ├── counter
│   │   └── helpers
│   │       ├── _
│   │       │   ├── _apply_decorated_descriptor
│   │       │   ├── _apply_decs_2203_r
│   │       │   ├── _array_like_to_array
│   │       │   ├── _array_with_holes
│   │       │   ├── _array_without_holes
│   │       │   ├── _assert_this_initialized
│   │       │   ├── _async_generator
│   │       │   ├── _async_generator_delegate
│   │       │   ├── _async_iterator
│   │       │   ├── _async_to_generator
│   │       │   ├── _await_async_generator
│   │       │   ├── _await_value
│   │       │   ├── _call_super
│   │       │   ├── _check_private_redeclaration
│   │       │   ├── _class_apply_descriptor_destructure
│   │       │   ├── _class_apply_descriptor_get
│   │       │   ├── _class_apply_descriptor_set
│   │       │   ├── _class_apply_descriptor_update
│   │       │   ├── _class_call_check
│   │       │   ├── _class_check_private_static_access
│   │       │   ├── _class_check_private_static_field_descriptor
│   │       │   ├── _class_extract_field_descriptor
│   │       │   ├── _class_name_tdz_error
│   │       │   ├── _class_private_field_destructure
│   │       │   ├── _class_private_field_get
│   │       │   ├── _class_private_field_init
│   │       │   ├── _class_private_field_loose_base
│   │       │   ├── _class_private_field_loose_key
│   │       │   ├── _class_private_field_set
│   │       │   ├── _class_private_field_update
│   │       │   ├── _class_private_method_get
│   │       │   ├── _class_private_method_init
│   │       │   ├── _class_private_method_set
│   │       │   ├── _class_static_private_field_destructure
│   │       │   ├── _class_static_private_field_spec_get
│   │       │   ├── _class_static_private_field_spec_set
│   │       │   ├── _class_static_private_field_update
│   │       │   ├── _class_static_private_method_get
│   │       │   ├── _construct
│   │       │   ├── _create_class
│   │       │   ├── _create_for_of_iterator_helper_loose
│   │       │   ├── _create_super
│   │       │   ├── _decorate
│   │       │   ├── _defaults
│   │       │   ├── _define_enumerable_properties
│   │       │   ├── _define_property
│   │       │   ├── _dispose
│   │       │   ├── _export_star
│   │       │   ├── _extends
│   │       │   ├── _get
│   │       │   ├── _get_prototype_of
│   │       │   ├── _identity
│   │       │   ├── _inherits
│   │       │   ├── _inherits_loose
│   │       │   ├── _initializer_define_property
│   │       │   ├── _initializer_warning_helper
│   │       │   ├── _instanceof
│   │       │   ├── _interop_require_default
│   │       │   ├── _interop_require_wildcard
│   │       │   ├── _is_native_function
│   │       │   ├── _is_native_reflect_construct
│   │       │   ├── _iterable_to_array
│   │       │   ├── _iterable_to_array_limit
│   │       │   ├── _iterable_to_array_limit_loose
│   │       │   ├── _jsx
│   │       │   ├── _new_arrow_check
│   │       │   ├── _non_iterable_rest
│   │       │   ├── _non_iterable_spread
│   │       │   ├── _object_destructuring_empty
│   │       │   ├── _object_spread
│   │       │   ├── _object_spread_props
│   │       │   ├── _object_without_properties
│   │       │   ├── _object_without_properties_loose
│   │       │   ├── _possible_constructor_return
│   │       │   ├── _read_only_error
│   │       │   ├── _set
│   │       │   ├── _set_prototype_of
│   │       │   ├── _skip_first_generator_next
│   │       │   ├── _sliced_to_array
│   │       │   ├── _sliced_to_array_loose
│   │       │   ├── _super_prop_base
│   │       │   ├── _tagged_template_literal
│   │       │   ├── _tagged_template_literal_loose
│   │       │   ├── _throw
│   │       │   ├── _to_array
│   │       │   ├── _to_consumable_array
│   │       │   ├── _to_primitive
│   │       │   ├── _to_property_key
│   │       │   ├── _ts_decorate
│   │       │   ├── _ts_generator
│   │       │   ├── _ts_metadata
│   │       │   ├── _ts_param
│   │       │   ├── _ts_values
│   │       │   ├── _type_of
│   │       │   ├── _unsupported_iterable_to_array
│   │       │   ├── _update
│   │       │   ├── _using
│   │       │   ├── _using_ctx
│   │       │   ├── _wrap_async_generator
│   │       │   ├── _wrap_native_super
│   │       │   ├── _write_only_error
│   │       │   └── index
│   │       ├── cjs
│   │       ├── esm
│   │       ├── scripts
│   │       └── src
│   ├── @tailwindcss
│   │   └── typography
│   │       ├── node_modules
│   │       │   └── postcss-selector-parser
│   │       │       └── dist
│   │       │           ├── selectors
│   │       │           └── util
│   │       └── src
│   ├── @testing-library
│   │   ├── dom
│   │   │   ├── dist
│   │   │   │   ├── @testing-library
│   │   │   │   └── queries
│   │   │   ├── node_modules
│   │   │   │   ├── aria-query
│   │   │   │   │   └── lib
│   │   │   │   │       ├── etc
│   │   │   │   │       │   └── roles
│   │   │   │   │       │       ├── abstract
│   │   │   │   │       │       ├── dpub
│   │   │   │   │       │       ├── graphics
│   │   │   │   │       │       └── literal
│   │   │   │   │       └── util
│   │   │   │   ├── chalk
│   │   │   │   │   └── source
│   │   │   │   └── dom-accessibility-api
│   │   │   │       └── dist
│   │   │   │           └── polyfills
│   │   │   └── types
│   │   ├── jest-dom
│   │   │   ├── dist
│   │   │   └── types
│   │   │       └── __tests__
│   │   │           ├── bun
│   │   │           ├── jest
│   │   │           ├── jest-globals
│   │   │           └── vitest
│   │   └── react
│   │       ├── dist
│   │       │   └── @testing-library
│   │       └── types
│   ├── @tootallnate
│   │   └── once
│   │       └── dist
│   ├── @tsconfig
│   │   ├── node10
│   │   ├── node12
│   │   ├── node14
│   │   └── node16
│   ├── @types
│   │   ├── aria-query
│   │   ├── babel__core
│   │   ├── babel__generator
│   │   ├── babel__template
│   │   ├── babel__traverse
│   │   ├── cookie
│   │   ├── debug
│   │   ├── dotenv
│   │   ├── estree
│   │   ├── estree-jsx
│   │   ├── graceful-fs
│   │   ├── hast
│   │   ├── istanbul-lib-coverage
│   │   ├── istanbul-lib-report
│   │   ├── istanbul-reports
│   │   ├── jest
│   │   │   └── node_modules
│   │   │       ├── ansi-styles
│   │   │       ├── pretty-format
│   │   │       │   └── build
│   │   │       │       └── plugins
│   │   │       │           └── lib
│   │   │       └── react-is
│   │   │           ├── cjs
│   │   │           └── umd
│   │   ├── jsdom
│   │   ├── json5
│   │   ├── katex
│   │   │   └── contrib
│   │   ├── mdast
│   │   ├── ms
│   │   ├── node
│   │   │   ├── assert
│   │   │   ├── compatibility
│   │   │   ├── dns
│   │   │   ├── fs
│   │   │   ├── readline
│   │   │   ├── stream
│   │   │   ├── timers
│   │   │   └── ts5.6
│   │   ├── node-fetch
│   │   ├── prop-types
│   │   ├── react
│   │   │   └── ts5.0
│   │   ├── react-dom
│   │   │   └── test-utils
│   │   ├── stack-utils
│   │   ├── statuses
│   │   ├── testing-library__jest-dom
│   │   ├── tough-cookie
│   │   ├── unist
│   │   ├── yargs
│   │   └── yargs-parser
│   ├── @typescript-eslint
│   │   ├── eslint-plugin
│   │   │   ├── dist
│   │   │   │   ├── configs
│   │   │   │   ├── rules
│   │   │   │   │   ├── enum-utils
│   │   │   │   │   ├── naming-convention-utils
│   │   │   │   │   └── prefer-optional-chain-utils
│   │   │   │   └── util
│   │   │   └── docs
│   │   │       └── rules
│   │   ├── parser
│   │   │   └── dist
│   │   ├── scope-manager
│   │   │   └── dist
│   │   │       ├── definition
│   │   │       ├── lib
│   │   │       ├── referencer
│   │   │       ├── scope
│   │   │       └── variable
│   │   ├── type-utils
│   │   │   └── dist
│   │   │       └── typeOrValueSpecifiers
│   │   ├── types
│   │   │   └── dist
│   │   │       └── generated
│   │   ├── typescript-estree
│   │   │   ├── dist
│   │   │   │   ├── create-program
│   │   │   │   ├── jsx
│   │   │   │   ├── parseSettings
│   │   │   │   └── ts-estree
│   │   │   └── node_modules
│   │   │       ├── brace-expansion
│   │   │       ├── fast-glob
│   │   │       │   └── out
│   │   │       │       ├── managers
│   │   │       │       ├── providers
│   │   │       │       │   ├── filters
│   │   │       │       │   ├── matchers
│   │   │       │       │   └── transformers
│   │   │       │       ├── readers
│   │   │       │       ├── types
│   │   │       │       └── utils
│   │   │       ├── glob-parent
│   │   │       └── minimatch
│   │   │           └── dist
│   │   │               ├── commonjs
│   │   │               └── esm
│   │   ├── utils
│   │   │   └── dist
│   │   │       ├── ast-utils
│   │   │       │   └── eslint-utils
│   │   │       ├── eslint-utils
│   │   │       ├── ts-eslint
│   │   │       │   └── eslint
│   │   │       └── ts-utils
│   │   └── visitor-keys
│   │       └── dist
│   ├── @ungap
│   │   └── structured-clone
│   │       ├── cjs
│   │       └── esm
│   ├── abab
│   │   └── lib
│   ├── abort-controller
│   │   └── dist
│   ├── acorn
│   │   ├── bin
│   │   └── dist
│   ├── acorn-globals
│   ├── acorn-jsx
│   ├── acorn-walk
│   │   └── dist
│   ├── agent-base
│   │   ├── dist
│   │   │   └── src
│   │   └── src
│   ├── agentkeepalive
│   │   └── lib
│   ├── ajv
│   │   ├── dist
│   │   ├── lib
│   │   │   ├── compile
│   │   │   ├── dot
│   │   │   ├── dotjs
│   │   │   └── refs
│   │   └── scripts
│   ├── ansi-escapes
│   │   └── node_modules
│   │       └── type-fest
│   │           ├── source
│   │           └── ts41
│   ├── ansi-regex
│   ├── ansi-styles
│   ├── any-promise
│   │   └── register
│   ├── anymatch
│   ├── arg
│   ├── argparse
│   │   └── lib
│   ├── aria-query
│   │   └── lib
│   │       ├── etc
│   │       │   └── roles
│   │       │       ├── abstract
│   │       │       ├── dpub
│   │       │       ├── graphics
│   │       │       └── literal
│   │       └── util
│   ├── array-buffer-byte-length
│   │   └── test
│   ├── array-includes
│   │   └── test
│   ├── array.prototype.findlast
│   │   └── test
│   ├── array.prototype.findlastindex
│   │   └── test
│   ├── array.prototype.flat
│   │   └── test
│   ├── array.prototype.flatmap
│   │   └── test
│   ├── array.prototype.tosorted
│   │   └── test
│   ├── arraybuffer.prototype.slice
│   │   └── test
│   ├── ast-types-flow
│   │   └── lib
│   ├── asynckit
│   │   └── lib
│   ├── available-typed-arrays
│   │   └── test
│   ├── axe-core
│   │   └── locales
│   ├── axobject-query
│   │   └── lib
│   │       ├── etc
│   │       │   └── objects
│   │       └── util
│   ├── babel-jest
│   │   ├── build
│   │   └── node_modules
│   │       └── chalk
│   │           └── source
│   ├── babel-plugin-istanbul
│   │   ├── lib
│   │   └── node_modules
│   │       ├── istanbul-lib-instrument
│   │       │   └── src
│   │       └── semver
│   │           └── bin
│   ├── babel-plugin-jest-hoist
│   │   └── build
│   ├── babel-preset-current-node-syntax
│   │   └── src
│   ├── babel-preset-jest
│   ├── bail
│   ├── balanced-match
│   ├── binary-extensions
│   ├── brace-expansion
│   ├── braces
│   │   └── lib
│   ├── browserslist
│   ├── bser
│   ├── buffer-from
│   ├── busboy
│   │   ├── bench
│   │   ├── lib
│   │   │   └── types
│   │   └── test
│   ├── call-bind
│   │   └── test
│   ├── callsites
│   ├── camelcase
│   ├── camelcase-css
│   ├── caniuse-lite
│   │   ├── data
│   │   │   ├── features
│   │   │   └── regions
│   │   └── dist
│   │       ├── lib
│   │       └── unpacker
│   ├── ccount
│   ├── chalk
│   │   └── source
│   ├── char-regex
│   ├── character-entities
│   ├── character-entities-html4
│   ├── character-entities-legacy
│   ├── character-reference-invalid
│   ├── chokidar
│   │   ├── lib
│   │   ├── node_modules
│   │   │   └── glob-parent
│   │   └── types
│   ├── ci-info
│   ├── cjs-module-lexer
│   │   └── dist
│   ├── class-variance-authority
│   │   ├── dist
│   │   └── node_modules
│   │       └── clsx
│   │           └── dist
│   ├── cli-width
│   ├── client-only
│   ├── cliui
│   │   ├── build
│   │   │   └── lib
│   │   └── node_modules
│   │       └── wrap-ansi
│   ├── clsx
│   │   └── dist
│   ├── co
│   ├── collect-v8-coverage
│   ├── color
│   ├── color-convert
│   ├── color-name
│   ├── color-string
│   ├── combined-stream
│   │   └── lib
│   ├── comma-separated-tokens
│   ├── commander
│   │   └── typings
│   ├── concat-map
│   │   ├── example
│   │   └── test
│   ├── convert-source-map
│   ├── cookie
│   ├── create-jest
│   │   ├── bin
│   │   ├── build
│   │   └── node_modules
│   │       └── chalk
│   │           └── source
│   ├── create-require
│   ├── cross-spawn
│   │   └── lib
│   │       └── util
│   ├── css.escape
│   ├── cssesc
│   │   ├── bin
│   │   └── man
│   ├── cssom
│   │   └── lib
│   ├── cssstyle
│   │   ├── lib
│   │   │   ├── properties
│   │   │   └── utils
│   │   └── node_modules
│   │       └── cssom
│   │           └── lib
│   ├── csstype
│   ├── damerau-levenshtein
│   │   ├── scripts
│   │   └── test
│   ├── data-urls
│   │   └── lib
│   ├── data-view-buffer
│   │   └── test
│   ├── data-view-byte-length
│   │   └── test
│   ├── data-view-byte-offset
│   │   └── test
│   ├── debug
│   │   └── src
│   ├── decimal.js
│   ├── decode-named-character-reference
│   ├── dedent
│   │   └── dist
│   ├── deep-equal
│   │   ├── example
│   │   └── test
│   ├── deep-is
│   │   ├── example
│   │   └── test
│   ├── deepmerge
│   │   └── dist
│   ├── define-data-property
│   │   └── test
│   ├── define-properties
│   ├── delayed-stream
│   │   └── lib
│   ├── dequal
│   │   ├── dist
│   │   └── lite
│   ├── detect-libc
│   │   └── lib
│   ├── detect-newline
│   ├── devlop
│   │   └── lib
│   ├── didyoumean
│   ├── diff
│   │   ├── dist
│   │   └── lib
│   │       ├── convert
│   │       ├── diff
│   │       ├── patch
│   │       └── util
│   ├── diff-sequences
│   │   └── build
│   ├── dlv
│   │   └── dist
│   ├── doctrine
│   │   └── lib
│   ├── dom-accessibility-api
│   │   └── dist
│   │       └── polyfills
│   ├── domexception
│   │   └── lib
│   ├── dotenv
│   │   └── lib
│   ├── eastasianwidth
│   ├── electron-to-chromium
│   ├── emittery
│   ├── emoji-regex
│   │   └── es2015
│   ├── enhanced-resolve
│   │   └── lib
│   │       └── util
│   ├── entities
│   │   └── lib
│   │       ├── esm
│   │       │   └── generated
│   │       └── generated
│   ├── error-ex
│   ├── es-abstract
│   │   ├── 2015
│   │   │   └── tables
│   │   ├── 2016
│   │   │   └── tables
│   │   ├── 2017
│   │   │   └── tables
│   │   ├── 2018
│   │   │   └── tables
│   │   ├── 2019
│   │   │   └── tables
│   │   ├── 2020
│   │   │   ├── BigInt
│   │   │   ├── Number
│   │   │   └── tables
│   │   ├── 2021
│   │   │   ├── BigInt
│   │   │   ├── Number
│   │   │   └── tables
│   │   ├── 2022
│   │   │   ├── BigInt
│   │   │   ├── Number
│   │   │   └── tables
│   │   ├── 2023
│   │   │   ├── BigInt
│   │   │   ├── Number
│   │   │   └── tables
│   │   ├── 2024
│   │   │   ├── BigInt
│   │   │   ├── Number
│   │   │   └── tables
│   │   ├── 5
│   │   ├── helpers
│   │   │   └── records
│   │   └── operations
│   ├── es-define-property
│   │   └── test
│   ├── es-errors
│   │   └── test
│   ├── es-get-iterator
│   │   └── test
│   ├── es-iterator-helpers
│   │   ├── Iterator
│   │   ├── Iterator.concat
│   │   ├── Iterator.from
│   │   ├── Iterator.prototype
│   │   ├── Iterator.prototype.constructor
│   │   ├── Iterator.prototype.drop
│   │   ├── Iterator.prototype.every
│   │   ├── Iterator.prototype.filter
│   │   ├── Iterator.prototype.find
│   │   ├── Iterator.prototype.flatMap
│   │   ├── Iterator.prototype.forEach
│   │   ├── Iterator.prototype.map
│   │   ├── Iterator.prototype.reduce
│   │   ├── Iterator.prototype.some
│   │   ├── Iterator.prototype.take
│   │   ├── Iterator.prototype.toArray
│   │   ├── Iterator.zip
│   │   ├── Iterator.zipKeyed
│   │   ├── IteratorHelperPrototype
│   │   ├── WrapForValidIteratorPrototype
│   │   ├── aos
│   │   └── test
│   │       └── helpers
│   ├── es-object-atoms
│   │   └── test
│   ├── es-set-tostringtag
│   │   └── test
│   ├── es-shim-unscopables
│   │   └── test
│   ├── es-to-primitive
│   │   ├── helpers
│   │   └── test
│   ├── escalade
│   │   ├── dist
│   │   └── sync
│   ├── escape-string-regexp
│   ├── escodegen
│   │   └── bin
│   ├── eslint
│   │   ├── bin
│   │   ├── conf
│   │   ├── lib
│   │   │   ├── cli-engine
│   │   │   │   └── formatters
│   │   │   ├── config
│   │   │   ├── eslint
│   │   │   ├── linter
│   │   │   │   └── code-path-analysis
│   │   │   ├── rule-tester
│   │   │   ├── rules
│   │   │   │   └── utils
│   │   │   │       ├── patterns
│   │   │   │       └── unicode
│   │   │   ├── shared
│   │   │   └── source-code
│   │   │       └── token-store
│   │   ├── messages
│   │   └── node_modules
│   │       └── chalk
│   │           └── source
│   ├── eslint-config-next
│   ├── eslint-import-resolver-node
│   │   └── node_modules
│   │       └── debug
│   │           └── src
│   ├── eslint-import-resolver-typescript
│   │   ├── lib
│   │   └── node_modules
│   │       ├── fast-glob
│   │       │   └── out
│   │       │       ├── managers
│   │       │       ├── providers
│   │       │       │   ├── filters
│   │       │       │   ├── matchers
│   │       │       │   └── transformers
│   │       │       ├── readers
│   │       │       ├── types
│   │       │       └── utils
│   │       └── glob-parent
│   ├── eslint-module-utils
│   │   └── node_modules
│   │       └── debug
│   │           └── src
│   ├── eslint-plugin-import
│   │   ├── config
│   │   │   └── flat
│   │   ├── docs
│   │   │   └── rules
│   │   ├── lib
│   │   │   ├── core
│   │   │   ├── exportMap
│   │   │   └── rules
│   │   ├── memo-parser
│   │   └── node_modules
│   │       ├── debug
│   │       │   └── src
│   │       ├── doctrine
│   │       │   └── lib
│   │       └── semver
│   │           └── bin
│   ├── eslint-plugin-jsx-a11y
│   │   ├── __mocks__
│   │   ├── __tests__
│   │   │   ├── __util__
│   │   │   │   └── helpers
│   │   │   └── src
│   │   │       ├── rules
│   │   │       └── util
│   │   │           └── implicitRoles
│   │   ├── docs
│   │   │   └── rules
│   │   └── lib
│   │       ├── configs
│   │       ├── rules
│   │       └── util
│   │           └── implicitRoles
│   ├── eslint-plugin-react
│   │   ├── configs
│   │   ├── lib
│   │   │   ├── rules
│   │   │   └── util
│   │   └── node_modules
│   │       ├── doctrine
│   │       │   └── lib
│   │       ├── resolve
│   │       │   ├── bin
│   │       │   ├── example
│   │       │   ├── lib
│   │       │   └── test
│   │       │       ├── dotdot
│   │       │       │   └── abc
│   │       │       ├── module_dir
│   │       │       │   ├── xmodules
│   │       │       │   │   └── aaa
│   │       │       │   ├── ymodules
│   │       │       │   │   └── aaa
│   │       │       │   └── zmodules
│   │       │       │       └── bbb
│   │       │       ├── node_path
│   │       │       │   ├── x
│   │       │       │   │   ├── aaa
│   │       │       │   │   └── ccc
│   │       │       │   └── y
│   │       │       │       ├── bbb
│   │       │       │       └── ccc
│   │       │       ├── pathfilter
│   │       │       │   └── deep_ref
│   │       │       ├── precedence
│   │       │       │   ├── aaa
│   │       │       │   └── bbb
│   │       │       ├── resolver
│   │       │       │   ├── baz
│   │       │       │   ├── browser_field
│   │       │       │   ├── dot_main
│   │       │       │   ├── dot_slash_main
│   │       │       │   ├── empty_main
│   │       │       │   ├── false_main
│   │       │       │   ├── incorrect_main
│   │       │       │   ├── invalid_main
│   │       │       │   ├── missing_index
│   │       │       │   ├── missing_main
│   │       │       │   ├── multirepo
│   │       │       │   │   └── packages
│   │       │       │   │       ├── package-a
│   │       │       │   │       └── package-b
│   │       │       │   ├── nested_symlinks
│   │       │       │   │   └── mylib
│   │       │       │   ├── null_main
│   │       │       │   ├── other_path
│   │       │       │   │   └── lib
│   │       │       │   ├── quux
│   │       │       │   │   └── foo
│   │       │       │   ├── same_names
│   │       │       │   │   └── foo
│   │       │       │   ├── symlinked
│   │       │       │   │   ├── _
│   │       │       │   │   │   ├── node_modules
│   │       │       │   │   │   └── symlink_target
│   │       │       │   │   └── package
│   │       │       │   └── without_basedir
│   │       │       └── shadowed_core
│   │       │           └── node_modules
│   │       │               └── util
│   │       └── semver
│   │           └── bin
│   ├── eslint-plugin-react-hooks
│   │   └── cjs
│   ├── eslint-scope
│   │   ├── dist
│   │   └── lib
│   ├── eslint-visitor-keys
│   │   ├── dist
│   │   └── lib
│   ├── espree
│   │   ├── dist
│   │   └── lib
│   ├── esprima
│   │   ├── bin
│   │   └── dist
│   ├── esquery
│   │   └── dist
│   ├── esrecurse
│   ├── estraverse
│   ├── estree-util-is-identifier-name
│   │   └── lib
│   ├── esutils
│   │   └── lib
│   ├── event-target-shim
│   │   └── dist
│   ├── execa
│   │   └── lib
│   ├── exit
│   │   ├── lib
│   │   └── test
│   │       └── fixtures
│   ├── expect
│   │   └── build
│   ├── extend
│   ├── fast-deep-equal
│   │   └── es6
│   ├── fast-glob
│   │   ├── node_modules
│   │   │   └── glob-parent
│   │   └── out
│   │       ├── managers
│   │       ├── providers
│   │       │   ├── filters
│   │       │   ├── matchers
│   │       │   └── transformers
│   │       ├── readers
│   │       ├── types
│   │       └── utils
│   ├── fast-json-stable-stringify
│   │   ├── benchmark
│   │   ├── example
│   │   └── test
│   ├── fast-levenshtein
│   ├── fastq
│   │   └── test
│   ├── fault
│   ├── fb-watchman
│   ├── file-entry-cache
│   ├── fill-range
│   ├── find-up
│   ├── flat-cache
│   │   └── src
│   ├── flatted
│   │   ├── cjs
│   │   ├── esm
│   │   ├── php
│   │   ├── python
│   │   │   └── __pycache__
│   │   └── types
│   ├── for-each
│   │   └── test
│   ├── foreground-child
│   │   ├── dist
│   │   │   ├── commonjs
│   │   │   └── esm
│   │   └── node_modules
│   │       └── signal-exit
│   │           └── dist
│   │               ├── cjs
│   │               └── mjs
│   ├── form-data
│   │   └── lib
│   ├── form-data-encoder
│   │   ├── @type
│   │   │   └── util
│   │   └── lib
│   │       ├── cjs
│   │       │   └── util
│   │       └── esm
│   │           └── util
│   ├── format
│   ├── formdata-node
│   │   ├── @type
│   │   └── lib
│   │       ├── cjs
│   │       └── esm
│   ├── framer-motion
│   │   ├── client
│   │   ├── dist
│   │   │   ├── cjs
│   │   │   └── es
│   │   │       ├── animation
│   │   │       │   ├── animate
│   │   │       │   ├── animators
│   │   │       │   │   ├── drivers
│   │   │       │   │   ├── utils
│   │   │       │   │   └── waapi
│   │   │       │   │       └── utils
│   │   │       │   ├── generators
│   │   │       │   │   ├── spring
│   │   │       │   │   └── utils
│   │   │       │   ├── hooks
│   │   │       │   ├── interfaces
│   │   │       │   ├── optimized-appear
│   │   │       │   ├── sequence
│   │   │       │   │   └── utils
│   │   │       │   └── utils
│   │   │       ├── components
│   │   │       │   ├── AnimatePresence
│   │   │       │   ├── LayoutGroup
│   │   │       │   ├── LazyMotion
│   │   │       │   ├── MotionConfig
│   │   │       │   └── Reorder
│   │   │       │       └── utils
│   │   │       ├── context
│   │   │       │   └── MotionContext
│   │   │       ├── easing
│   │   │       │   ├── modifiers
│   │   │       │   └── utils
│   │   │       ├── events
│   │   │       │   └── utils
│   │   │       ├── frameloop
│   │   │       ├── gestures
│   │   │       │   ├── drag
│   │   │       │   │   └── utils
│   │   │       │   ├── pan
│   │   │       │   └── utils
│   │   │       ├── motion
│   │   │       │   ├── features
│   │   │       │   │   ├── animation
│   │   │       │   │   ├── layout
│   │   │       │   │   └── viewport
│   │   │       │   └── utils
│   │   │       ├── projection
│   │   │       │   ├── animation
│   │   │       │   ├── geometry
│   │   │       │   ├── node
│   │   │       │   ├── shared
│   │   │       │   ├── styles
│   │   │       │   └── utils
│   │   │       ├── render
│   │   │       │   ├── components
│   │   │       │   │   ├── m
│   │   │       │   │   └── motion
│   │   │       │   ├── dom
│   │   │       │   │   ├── resize
│   │   │       │   │   ├── scroll
│   │   │       │   │   │   └── offsets
│   │   │       │   │   ├── utils
│   │   │       │   │   ├── value-types
│   │   │       │   │   └── viewport
│   │   │       │   ├── html
│   │   │       │   │   └── utils
│   │   │       │   ├── object
│   │   │       │   ├── svg
│   │   │       │   │   └── utils
│   │   │       │   └── utils
│   │   │       ├── utils
│   │   │       │   ├── mix
│   │   │       │   ├── offsets
│   │   │       │   └── reduced-motion
│   │   │       └── value
│   │   │           ├── scroll
│   │   │           ├── types
│   │   │           │   ├── color
│   │   │           │   ├── complex
│   │   │           │   ├── numbers
│   │   │           │   └── utils
│   │   │           ├── use-will-change
│   │   │           └── utils
│   │   ├── dom
│   │   │   └── mini
│   │   ├── m
│   │   └── mini
│   ├── fs.realpath
│   ├── fsevents
│   ├── function-bind
│   │   └── test
│   ├── function.prototype.name
│   │   ├── helpers
│   │   └── test
│   ├── functions-have-names
│   │   └── test
│   ├── gensync
│   │   └── test
│   ├── get-caller-file
│   ├── get-intrinsic
│   │   └── test
│   ├── get-package-type
│   ├── get-stream
│   ├── get-symbol-description
│   │   └── test
│   ├── get-tsconfig
│   │   └── dist
│   ├── glob
│   ├── glob-parent
│   ├── globals
│   ├── globalthis
│   │   └── test
│   ├── gopd
│   │   └── test
│   ├── graceful-fs
│   ├── graphemer
│   │   └── lib
│   ├── graphql
│   │   ├── error
│   │   ├── execution
│   │   ├── jsutils
│   │   ├── language
│   │   ├── subscription
│   │   ├── type
│   │   ├── utilities
│   │   └── validation
│   │       └── rules
│   │           └── custom
│   ├── has-bigints
│   │   └── test
│   ├── has-flag
│   ├── has-property-descriptors
│   │   └── test
│   ├── has-proto
│   │   └── test
│   ├── has-symbols
│   │   └── test
│   │       └── shams
│   ├── has-tostringtag
│   │   └── test
│   │       └── shams
│   ├── hasown
│   ├── hast-util-from-dom
│   │   ├── lib
│   │   └── node_modules
│   │       ├── hast-util-parse-selector
│   │       │   └── lib
│   │       └── hastscript
│   │           └── lib
│   ├── hast-util-from-html
│   │   └── lib
│   ├── hast-util-from-html-isomorphic
│   │   └── lib
│   ├── hast-util-from-parse5
│   │   ├── lib
│   │   └── node_modules
│   │       ├── hast-util-parse-selector
│   │       │   └── lib
│   │       └── hastscript
│   │           └── lib
│   ├── hast-util-is-element
│   │   └── lib
│   ├── hast-util-parse-selector
│   ├── hast-util-to-jsx-runtime
│   │   └── lib
│   ├── hast-util-to-text
│   │   └── lib
│   ├── hast-util-whitespace
│   │   └── lib
│   ├── hastscript
│   │   └── node_modules
│   │       ├── @types
│   │       │   ├── hast
│   │       │   └── unist
│   │       ├── comma-separated-tokens
│   │       ├── property-information
│   │       │   └── lib
│   │       │       └── util
│   │       └── space-separated-tokens
│   ├── headers-polyfill
│   │   └── lib
│   ├── highlight.js
│   │   ├── lib
│   │   │   └── languages
│   │   ├── scss
│   │   ├── styles
│   │   └── types
│   ├── highlightjs-vue
│   │   └── dist
│   ├── html-encoding-sniffer
│   │   └── lib
│   ├── html-escaper
│   │   ├── cjs
│   │   ├── esm
│   │   └── test
│   ├── html-url-attributes
│   │   └── lib
│   ├── http-proxy-agent
│   │   └── dist
│   ├── https-proxy-agent
│   │   └── dist
│   ├── human-signals
│   │   └── build
│   │       └── src
│   ├── humanize-ms
│   ├── iconv-lite
│   │   ├── encodings
│   │   │   └── tables
│   │   └── lib
│   ├── ignore
│   ├── import-fresh
│   ├── import-local
│   │   └── fixtures
│   ├── imurmurhash
│   ├── indent-string
│   ├── inflight
│   ├── inherits
│   ├── inline-style-parser
│   │   └── dist
│   ├── internal-slot
│   │   └── test
│   ├── is-alphabetical
│   ├── is-alphanumerical
│   ├── is-arguments
│   │   └── test
│   ├── is-array-buffer
│   │   └── test
│   ├── is-arrayish
│   ├── is-async-function
│   │   └── test
│   ├── is-bigint
│   │   └── test
│   ├── is-binary-path
│   ├── is-boolean-object
│   │   └── test
│   ├── is-bun-module
│   │   └── dist
│   │       ├── cjs
│   │       └── esm
│   ├── is-callable
│   │   └── test
│   ├── is-core-module
│   │   └── test
│   ├── is-data-view
│   │   └── test
│   ├── is-date-object
│   │   └── test
│   ├── is-decimal
│   ├── is-extglob
│   ├── is-finalizationregistry
│   │   └── test
│   ├── is-fullwidth-code-point
│   ├── is-generator-fn
│   ├── is-generator-function
│   │   └── test
│   ├── is-glob
│   ├── is-hexadecimal
│   ├── is-map
│   │   └── test
│   ├── is-negative-zero
│   │   └── test
│   ├── is-node-process
│   │   └── lib
│   ├── is-number
│   ├── is-number-object
│   │   └── test
│   ├── is-path-inside
│   ├── is-plain-obj
│   ├── is-potential-custom-element-name
│   ├── is-regex
│   │   └── test
│   ├── is-set
│   │   └── test
│   ├── is-shared-array-buffer
│   │   └── test
│   ├── is-stream
│   ├── is-string
│   │   └── test
│   ├── is-symbol
│   │   └── test
│   ├── is-typed-array
│   │   └── test
│   ├── is-weakmap
│   │   └── test
│   ├── is-weakref
│   │   └── test
│   ├── is-weakset
│   │   └── test
│   ├── isarray
│   ├── isexe
│   │   └── test
│   ├── istanbul-lib-coverage
│   │   └── lib
│   ├── istanbul-lib-instrument
│   │   └── src
│   ├── istanbul-lib-report
│   │   └── lib
│   ├── istanbul-lib-source-maps
│   │   └── lib
│   ├── istanbul-reports
│   │   └── lib
│   │       ├── clover
│   │       ├── cobertura
│   │       ├── html
│   │       │   └── assets
│   │       │       └── vendor
│   │       ├── html-spa
│   │       │   ├── assets
│   │       │   └── src
│   │       ├── json
│   │       ├── json-summary
│   │       ├── lcov
│   │       ├── lcovonly
│   │       ├── none
│   │       ├── teamcity
│   │       ├── text
│   │       ├── text-lcov
│   │       └── text-summary
│   ├── iterator.prototype
│   │   └── test
│   ├── jackspeak
│   │   └── dist
│   │       ├── commonjs
│   │       └── esm
│   ├── jest
│   │   ├── bin
│   │   └── build
│   ├── jest-changed-files
│   │   └── build
│   ├── jest-circus
│   │   ├── build
│   │   │   └── legacy-code-todo-rewrite
│   │   └── node_modules
│   │       ├── chalk
│   │       │   └── source
│   │       ├── pretty-format
│   │       │   ├── build
│   │       │   │   └── plugins
│   │       │   │       └── lib
│   │       │   └── node_modules
│   │       │       └── ansi-styles
│   │       └── react-is
│   │           ├── cjs
│   │           └── umd
│   ├── jest-cli
│   │   ├── bin
│   │   ├── build
│   │   └── node_modules
│   │       └── chalk
│   │           └── source
│   ├── jest-config
│   │   ├── build
│   │   └── node_modules
│   │       ├── chalk
│   │       │   └── source
│   │       ├── pretty-format
│   │       │   ├── build
│   │       │   │   └── plugins
│   │       │   │       └── lib
│   │       │   └── node_modules
│   │       │       └── ansi-styles
│   │       └── react-is
│   │           ├── cjs
│   │           └── umd
│   ├── jest-diff
│   │   ├── build
│   │   └── node_modules
│   │       ├── chalk
│   │       │   └── source
│   │       ├── pretty-format
│   │       │   ├── build
│   │       │   │   └── plugins
│   │       │   │       └── lib
│   │       │   └── node_modules
│   │       │       └── ansi-styles
│   │       └── react-is
│   │           ├── cjs
│   │           └── umd
│   ├── jest-docblock
│   │   └── build
│   ├── jest-each
│   │   ├── build
│   │   │   └── table
│   │   └── node_modules
│   │       ├── chalk
│   │       │   └── source
│   │       ├── pretty-format
│   │       │   ├── build
│   │       │   │   └── plugins
│   │       │   │       └── lib
│   │       │   └── node_modules
│   │       │       └── ansi-styles
│   │       └── react-is
│   │           ├── cjs
│   │           └── umd
│   ├── jest-environment-jsdom
│   │   └── build
│   ├── jest-environment-node
│   │   └── build
│   ├── jest-get-type
│   │   └── build
│   ├── jest-haste-map
│   │   └── build
│   │       ├── crawlers
│   │       ├── lib
│   │       └── watchers
│   ├── jest-leak-detector
│   │   ├── build
│   │   └── node_modules
│   │       ├── ansi-styles
│   │       ├── pretty-format
│   │       │   └── build
│   │       │       └── plugins
│   │       │           └── lib
│   │       └── react-is
│   │           ├── cjs
│   │           └── umd
│   ├── jest-matcher-utils
│   │   ├── build
│   │   └── node_modules
│   │       ├── chalk
│   │       │   └── source
│   │       ├── pretty-format
│   │       │   ├── build
│   │       │   │   └── plugins
│   │       │   │       └── lib
│   │       │   └── node_modules
│   │       │       └── ansi-styles
│   │       └── react-is
│   │           ├── cjs
│   │           └── umd
│   ├── jest-message-util
│   │   ├── build
│   │   └── node_modules
│   │       ├── chalk
│   │       │   └── source
│   │       ├── pretty-format
│   │       │   ├── build
│   │       │   │   └── plugins
│   │       │   │       └── lib
│   │       │   └── node_modules
│   │       │       └── ansi-styles
│   │       └── react-is
│   │           ├── cjs
│   │           └── umd
│   ├── jest-mock
│   │   └── build
│   ├── jest-pnp-resolver
│   ├── jest-regex-util
│   │   └── build
│   ├── jest-resolve
│   │   ├── build
│   │   └── node_modules
│   │       └── chalk
│   │           └── source
│   ├── jest-resolve-dependencies
│   │   └── build
│   ├── jest-runner
│   │   ├── build
│   │   └── node_modules
│   │       └── chalk
│   │           └── source
│   ├── jest-runtime
│   │   ├── build
│   │   └── node_modules
│   │       └── chalk
│   │           └── source
│   ├── jest-snapshot
│   │   ├── build
│   │   └── node_modules
│   │       ├── chalk
│   │       │   └── source
│   │       ├── pretty-format
│   │       │   ├── build
│   │       │   │   └── plugins
│   │       │   │       └── lib
│   │       │   └── node_modules
│   │       │       └── ansi-styles
│   │       └── react-is
│   │           ├── cjs
│   │           └── umd
│   ├── jest-util
│   │   ├── build
│   │   └── node_modules
│   │       └── chalk
│   │           └── source
│   ├── jest-validate
│   │   ├── build
│   │   └── node_modules
│   │       ├── camelcase
│   │       ├── chalk
│   │       │   └── source
│   │       ├── pretty-format
│   │       │   ├── build
│   │       │   │   └── plugins
│   │       │   │       └── lib
│   │       │   └── node_modules
│   │       │       └── ansi-styles
│   │       └── react-is
│   │           ├── cjs
│   │           └── umd
│   ├── jest-watcher
│   │   ├── build
│   │   │   └── lib
│   │   └── node_modules
│   │       └── chalk
│   │           └── source
│   ├── jest-worker
│   │   ├── build
│   │   │   ├── base
│   │   │   └── workers
│   │   └── node_modules
│   │       └── supports-color
│   ├── jiti
│   │   ├── bin
│   │   ├── dist
│   │   │   └── plugins
│   │   └── lib
│   ├── js-tokens
│   ├── js-yaml
│   │   ├── bin
│   │   ├── dist
│   │   └── lib
│   │       ├── schema
│   │       └── type
│   ├── jsdom
│   │   └── lib
│   │       └── jsdom
│   │           ├── browser
│   │           │   ├── parser
│   │           │   └── resources
│   │           ├── level2
│   │           ├── level3
│   │           └── living
│   │               ├── aborting
│   │               ├── attributes
│   │               ├── constraint-validation
│   │               ├── crypto
│   │               ├── cssom
│   │               ├── custom-elements
│   │               ├── domparsing
│   │               ├── events
│   │               ├── fetch
│   │               ├── file-api
│   │               ├── generated
│   │               ├── helpers
│   │               │   └── svg
│   │               ├── hr-time
│   │               ├── mutation-observer
│   │               ├── navigator
│   │               ├── nodes
│   │               ├── range
│   │               ├── selection
│   │               ├── svg
│   │               ├── traversal
│   │               ├── websockets
│   │               ├── webstorage
│   │               ├── window
│   │               └── xhr
│   ├── jsesc
│   │   ├── bin
│   │   └── man
│   ├── json-buffer
│   │   └── test
│   ├── json-parse-even-better-errors
│   ├── json-schema-traverse
│   │   └── spec
│   │       └── fixtures
│   ├── json-stable-stringify-without-jsonify
│   │   ├── example
│   │   └── test
│   ├── json5
│   │   ├── dist
│   │   └── lib
│   ├── jsx-ast-utils
│   │   ├── __tests__
│   │   │   └── src
│   │   ├── lib
│   │   │   └── values
│   │   │       └── expressions
│   │   └── src
│   │       └── values
│   │           └── expressions
│   ├── katex
│   │   ├── contrib
│   │   │   ├── auto-render
│   │   │   │   └── test
│   │   │   ├── copy-tex
│   │   │   ├── mathtex-script-type
│   │   │   ├── mhchem
│   │   │   └── render-a11y-string
│   │   │       └── test
│   │   ├── dist
│   │   │   ├── contrib
│   │   │   └── fonts
│   │   ├── node_modules
│   │   │   └── commander
│   │   │       ├── lib
│   │   │       └── typings
│   │   └── src
│   │       ├── environments
│   │       ├── fonts
│   │       │   └── lib
│   │       ├── functions
│   │       │   └── utils
│   │       ├── metrics
│   │       └── styles
│   ├── keyv
│   │   └── src
│   ├── kleur
│   ├── language-subtag-registry
│   │   └── data
│   │       └── json
│   ├── language-tags
│   │   └── lib
│   ├── leven
│   ├── levn
│   │   └── lib
│   ├── lilconfig
│   │   └── dist
│   ├── lines-and-columns
│   │   └── build
│   ├── locate-path
│   ├── lodash
│   │   └── fp
│   ├── lodash.castarray
│   ├── lodash.isplainobject
│   ├── lodash.merge
│   ├── longest-streak
│   ├── loose-envify
│   ├── lowlight
│   │   └── lib
│   ├── lru-cache
│   ├── lucide-react
│   │   └── dist
│   │       ├── cjs
│   │       ├── esm
│   │       │   ├── icons
│   │       │   └── shared
│   │       │       └── src
│   │       └── umd
│   ├── lz-string
│   │   ├── bin
│   │   ├── libs
│   │   ├── reference
│   │   ├── tests
│   │   │   └── lib
│   │   │       └── jasmine-1.3.1
│   │   └── typings
│   ├── make-dir
│   ├── make-error
│   │   └── dist
│   ├── makeerror
│   │   └── lib
│   ├── markdown-table
│   ├── mdast-util-find-and-replace
│   │   ├── lib
│   │   └── node_modules
│   │       └── escape-string-regexp
│   ├── mdast-util-from-markdown
│   │   ├── dev
│   │   │   └── lib
│   │   └── lib
│   ├── mdast-util-gfm
│   │   └── lib
│   ├── mdast-util-gfm-autolink-literal
│   │   └── lib
│   ├── mdast-util-gfm-footnote
│   │   └── lib
│   ├── mdast-util-gfm-strikethrough
│   │   └── lib
│   ├── mdast-util-gfm-table
│   │   └── lib
│   ├── mdast-util-gfm-task-list-item
│   │   └── lib
│   ├── mdast-util-math
│   │   └── lib
│   ├── mdast-util-mdx-expression
│   │   └── lib
│   ├── mdast-util-mdx-jsx
│   │   └── lib
│   ├── mdast-util-mdxjs-esm
│   │   └── lib
│   ├── mdast-util-phrasing
│   │   └── lib
│   ├── mdast-util-to-hast
│   │   └── lib
│   │       └── handlers
│   ├── mdast-util-to-markdown
│   │   └── lib
│   │       ├── handle
│   │       └── util
│   ├── mdast-util-to-string
│   │   └── lib
│   ├── merge-stream
│   ├── merge2
│   ├── micromark
│   │   ├── dev
│   │   │   └── lib
│   │   │       └── initialize
│   │   └── lib
│   │       └── initialize
│   ├── micromark-core-commonmark
│   │   ├── dev
│   │   │   └── lib
│   │   └── lib
│   ├── micromark-extension-gfm
│   ├── micromark-extension-gfm-autolink-literal
│   │   ├── dev
│   │   │   └── lib
│   │   └── lib
│   ├── micromark-extension-gfm-footnote
│   │   ├── dev
│   │   │   └── lib
│   │   └── lib
│   ├── micromark-extension-gfm-strikethrough
│   │   ├── dev
│   │   │   └── lib
│   │   └── lib
│   ├── micromark-extension-gfm-table
│   │   ├── dev
│   │   │   └── lib
│   │   └── lib
│   ├── micromark-extension-gfm-tagfilter
│   │   └── lib
│   ├── micromark-extension-gfm-task-list-item
│   │   ├── dev
│   │   │   └── lib
│   │   └── lib
│   ├── micromark-extension-math
│   │   ├── dev
│   │   │   └── lib
│   │   └── lib
│   ├── micromark-factory-destination
│   │   └── dev
│   ├── micromark-factory-label
│   │   └── dev
│   ├── micromark-factory-space
│   │   └── dev
│   ├── micromark-factory-title
│   │   └── dev
│   ├── micromark-factory-whitespace
│   │   └── dev
│   ├── micromark-util-character
│   │   └── dev
│   ├── micromark-util-chunked
│   │   └── dev
│   ├── micromark-util-classify-character
│   │   └── dev
│   ├── micromark-util-combine-extensions
│   ├── micromark-util-decode-numeric-character-reference
│   │   └── dev
│   ├── micromark-util-decode-string
│   │   └── dev
│   ├── micromark-util-encode
│   ├── micromark-util-html-tag-name
│   ├── micromark-util-normalize-identifier
│   │   └── dev
│   ├── micromark-util-resolve-all
│   ├── micromark-util-sanitize-uri
│   │   └── dev
│   ├── micromark-util-subtokenize
│   │   ├── dev
│   │   │   └── lib
│   │   └── lib
│   ├── micromark-util-symbol
│   │   └── lib
│   ├── micromark-util-types
│   ├── micromatch
│   ├── mime-db
│   ├── mime-types
│   ├── mimic-fn
│   ├── min-indent
│   ├── minimatch
│   ├── minimist
│   │   ├── example
│   │   └── test
│   ├── minipass
│   │   └── dist
│   │       ├── commonjs
│   │       └── esm
│   ├── ms
│   ├── msw
│   │   ├── browser
│   │   ├── cli
│   │   ├── config
│   │   │   └── scripts
│   │   ├── lib
│   │   │   ├── browser
│   │   │   ├── core
│   │   │   │   ├── handlers
│   │   │   │   ├── utils
│   │   │   │   │   ├── HttpResponse
│   │   │   │   │   ├── internal
│   │   │   │   │   ├── logging
│   │   │   │   │   ├── matching
│   │   │   │   │   ├── request
│   │   │   │   │   └── url
│   │   │   │   └── ws
│   │   │   │       └── utils
│   │   │   ├── iife
│   │   │   ├── native
│   │   │   └── node
│   │   ├── native
│   │   ├── node
│   │   ├── node_modules
│   │   │   ├── chalk
│   │   │   │   └── source
│   │   │   └── type-fest
│   │   │       └── source
│   │   │           └── internal
│   │   └── src
│   │       ├── browser
│   │       │   ├── setupWorker
│   │       │   │   ├── start
│   │       │   │   │   └── utils
│   │       │   │   └── stop
│   │       │   │       └── utils
│   │       │   └── utils
│   │       ├── core
│   │       │   ├── handlers
│   │       │   ├── utils
│   │       │   │   ├── HttpResponse
│   │       │   │   ├── internal
│   │       │   │   ├── logging
│   │       │   │   ├── matching
│   │       │   │   ├── request
│   │       │   │   └── url
│   │       │   └── ws
│   │       │       └── utils
│   │       ├── iife
│   │       ├── native
│   │       └── node
│   │           └── utils
│   ├── mute-stream
│   │   └── lib
│   ├── mz
│   ├── nanoid
│   │   ├── async
│   │   ├── bin
│   │   ├── non-secure
│   │   └── url-alphabet
│   ├── natural-compare
│   ├── next
│   │   ├── compat
│   │   ├── dist
│   │   │   ├── api
│   │   │   ├── bin
│   │   │   ├── build
│   │   │   │   ├── analysis
│   │   │   │   ├── babel
│   │   │   │   │   ├── loader
│   │   │   │   │   └── plugins
│   │   │   │   ├── flying-shuttle
│   │   │   │   ├── jest
│   │   │   │   │   └── __mocks__
│   │   │   │   ├── manifests
│   │   │   │   │   └── formatter
│   │   │   │   ├── next-config-ts
│   │   │   │   ├── output
│   │   │   │   ├── polyfills
│   │   │   │   │   ├── fetch
│   │   │   │   │   └── object.assign
│   │   │   │   ├── segment-config
│   │   │   │   │   ├── app
│   │   │   │   │   ├── middleware
│   │   │   │   │   └── pages
│   │   │   │   ├── swc
│   │   │   │   ├── templates
│   │   │   │   ├── turborepo-access-trace
│   │   │   │   ├── webpack
│   │   │   │   │   ├── alias
│   │   │   │   │   ├── config
│   │   │   │   │   │   └── blocks
│   │   │   │   │   │       ├── css
│   │   │   │   │   │       │   └── loaders
│   │   │   │   │   │       └── images
│   │   │   │   │   ├── loaders
│   │   │   │   │   │   ├── css-loader
│   │   │   │   │   │   │   └── src
│   │   │   │   │   │   │       ├── plugins
│   │   │   │   │   │   │       └── runtime
│   │   │   │   │   │   ├── lightningcss-loader
│   │   │   │   │   │   │   └── src
│   │   │   │   │   │   ├── metadata
│   │   │   │   │   │   ├── next-app-loader
│   │   │   │   │   │   ├── next-edge-app-route-loader
│   │   │   │   │   │   ├── next-edge-ssr-loader
│   │   │   │   │   │   ├── next-flight-loader
│   │   │   │   │   │   ├── next-font-loader
│   │   │   │   │   │   ├── next-image-loader
│   │   │   │   │   │   ├── next-route-loader
│   │   │   │   │   │   ├── next-style-loader
│   │   │   │   │   │   │   └── runtime
│   │   │   │   │   │   ├── postcss-loader
│   │   │   │   │   │   │   └── src
│   │   │   │   │   │   └── resolve-url-loader
│   │   │   │   │   │       └── lib
│   │   │   │   │   └── plugins
│   │   │   │   │       ├── minify-webpack-plugin
│   │   │   │   │       │   └── src
│   │   │   │   │       ├── next-types-plugin
│   │   │   │   │       └── wellknown-errors-plugin
│   │   │   │   ├── webpack-build
│   │   │   │   └── webpack-config-rules
│   │   │   ├── bundles
│   │   │   │   └── cssnano-simple
│   │   │   ├── cli
│   │   │   │   └── internal
│   │   │   ├── client
│   │   │   │   ├── compat
│   │   │   │   ├── components
│   │   │   │   │   ├── globals
│   │   │   │   │   ├── react-dev-overlay
│   │   │   │   │   │   ├── app
│   │   │   │   │   │   ├── internal
│   │   │   │   │   │   │   ├── components
│   │   │   │   │   │   │   │   ├── CodeFrame
│   │   │   │   │   │   │   │   ├── Dialog
│   │   │   │   │   │   │   │   ├── LeftRightDialogHeader
│   │   │   │   │   │   │   │   ├── Overlay
│   │   │   │   │   │   │   │   ├── Terminal
│   │   │   │   │   │   │   │   ├── Toast
│   │   │   │   │   │   │   │   ├── VersionStalenessInfo
│   │   │   │   │   │   │   │   ├── copy-button
│   │   │   │   │   │   │   │   └── hot-linked-text
│   │   │   │   │   │   │   ├── container
│   │   │   │   │   │   │   │   └── RuntimeError
│   │   │   │   │   │   │   ├── helpers
│   │   │   │   │   │   │   ├── hooks
│   │   │   │   │   │   │   ├── icons
│   │   │   │   │   │   │   └── styles
│   │   │   │   │   │   ├── pages
│   │   │   │   │   │   └── server
│   │   │   │   │   └── router-reducer
│   │   │   │   │       └── reducers
│   │   │   │   ├── dev
│   │   │   │   │   └── error-overlay
│   │   │   │   ├── legacy
│   │   │   │   ├── lib
│   │   │   │   ├── portal
│   │   │   │   ├── react-client-callbacks
│   │   │   │   └── tracing
│   │   │   ├── compiled
│   │   │   │   ├── @ampproject
│   │   │   │   │   └── toolbox-optimizer
│   │   │   │   ├── @babel
│   │   │   │   │   └── runtime
│   │   │   │   │       ├── helpers
│   │   │   │   │       │   └── esm
│   │   │   │   │       └── regenerator
│   │   │   │   ├── @edge-runtime
│   │   │   │   │   ├── cookies
│   │   │   │   │   ├── ponyfill
│   │   │   │   │   └── primitives
│   │   │   │   ├── @hapi
│   │   │   │   │   └── accept
│   │   │   │   ├── @mswjs
│   │   │   │   │   └── interceptors
│   │   │   │   │       └── ClientRequest
│   │   │   │   ├── @napi-rs
│   │   │   │   │   └── triples
│   │   │   │   ├── @next
│   │   │   │   │   ├── font
│   │   │   │   │   │   ├── dist
│   │   │   │   │   │   │   ├── fontkit
│   │   │   │   │   │   │   ├── google
│   │   │   │   │   │   │   └── local
│   │   │   │   │   │   ├── google
│   │   │   │   │   │   └── local
│   │   │   │   │   └── react-refresh-utils
│   │   │   │   │       └── dist
│   │   │   │   │           └── internal
│   │   │   │   ├── @opentelemetry
│   │   │   │   │   └── api
│   │   │   │   ├── @vercel
│   │   │   │   │   ├── nft
│   │   │   │   │   └── og
│   │   │   │   │       ├── emoji
│   │   │   │   │       ├── figma
│   │   │   │   │       ├── language
│   │   │   │   │       └── satori
│   │   │   │   ├── acorn
│   │   │   │   ├── amphtml-validator
│   │   │   │   ├── anser
│   │   │   │   ├── assert
│   │   │   │   ├── async-retry
│   │   │   │   ├── async-sema
│   │   │   │   ├── babel
│   │   │   │   ├── babel-packages
│   │   │   │   ├── browserify-zlib
│   │   │   │   ├── browserslist
│   │   │   │   ├── buffer
│   │   │   │   ├── bytes
│   │   │   │   ├── ci-info
│   │   │   │   ├── cli-select
│   │   │   │   ├── client-only
│   │   │   │   ├── commander
│   │   │   │   ├── comment-json
│   │   │   │   ├── compression
│   │   │   │   ├── conf
│   │   │   │   ├── constants-browserify
│   │   │   │   ├── content-disposition
│   │   │   │   ├── content-type
│   │   │   │   ├── cookie
│   │   │   │   ├── cross-spawn
│   │   │   │   ├── crypto-browserify
│   │   │   │   ├── css.escape
│   │   │   │   ├── cssnano-simple
│   │   │   │   ├── data-uri-to-buffer
│   │   │   │   ├── debug
│   │   │   │   ├── devalue
│   │   │   │   ├── domain-browser
│   │   │   │   ├── edge-runtime
│   │   │   │   ├── events
│   │   │   │   ├── find-up
│   │   │   │   ├── fresh
│   │   │   │   ├── glob
│   │   │   │   ├── gzip-size
│   │   │   │   ├── http-proxy
│   │   │   │   ├── http-proxy-agent
│   │   │   │   ├── https-browserify
│   │   │   │   ├── https-proxy-agent
│   │   │   │   ├── icss-utils
│   │   │   │   ├── ignore-loader
│   │   │   │   ├── image-size
│   │   │   │   ├── is-animated
│   │   │   │   ├── is-docker
│   │   │   │   ├── is-wsl
│   │   │   │   ├── jest-worker
│   │   │   │   ├── json5
│   │   │   │   ├── jsonwebtoken
│   │   │   │   ├── loader-runner
│   │   │   │   ├── loader-utils2
│   │   │   │   ├── loader-utils3
│   │   │   │   ├── lodash.curry
│   │   │   │   ├── lru-cache
│   │   │   │   ├── mini-css-extract-plugin
│   │   │   │   │   └── hmr
│   │   │   │   ├── nanoid
│   │   │   │   ├── native-url
│   │   │   │   ├── neo-async
│   │   │   │   ├── next-server
│   │   │   │   ├── node-fetch
│   │   │   │   ├── node-html-parser
│   │   │   │   ├── ora
│   │   │   │   ├── os-browserify
│   │   │   │   ├── p-limit
│   │   │   │   ├── p-queue
│   │   │   │   ├── path-browserify
│   │   │   │   ├── path-to-regexp
│   │   │   │   ├── picomatch
│   │   │   │   ├── platform
│   │   │   │   ├── postcss-flexbugs-fixes
│   │   │   │   ├── postcss-modules-extract-imports
│   │   │   │   ├── postcss-modules-local-by-default
│   │   │   │   ├── postcss-modules-scope
│   │   │   │   ├── postcss-modules-values
│   │   │   │   ├── postcss-plugin-stub-for-cssnano-simple
│   │   │   │   ├── postcss-preset-env
│   │   │   │   ├── postcss-safe-parser
│   │   │   │   ├── postcss-scss
│   │   │   │   ├── postcss-value-parser
│   │   │   │   ├── process
│   │   │   │   ├── punycode
│   │   │   │   ├── querystring-es3
│   │   │   │   ├── raw-body
│   │   │   │   ├── react
│   │   │   │   │   └── cjs
│   │   │   │   ├── react-dom
│   │   │   │   │   └── cjs
│   │   │   │   ├── react-dom-experimental
│   │   │   │   │   └── cjs
│   │   │   │   ├── react-experimental
│   │   │   │   │   └── cjs
│   │   │   │   ├── react-is
│   │   │   │   │   └── cjs
│   │   │   │   ├── react-refresh
│   │   │   │   │   └── cjs
│   │   │   │   ├── react-server-dom-turbopack
│   │   │   │   │   └── cjs
│   │   │   │   ├── react-server-dom-turbopack-experimental
│   │   │   │   │   └── cjs
│   │   │   │   ├── react-server-dom-webpack
│   │   │   │   │   └── cjs
│   │   │   │   ├── react-server-dom-webpack-experimental
│   │   │   │   │   └── cjs
│   │   │   │   ├── regenerator-runtime
│   │   │   │   ├── sass-loader
│   │   │   │   ├── scheduler
│   │   │   │   │   └── cjs
│   │   │   │   ├── scheduler-experimental
│   │   │   │   │   └── cjs
│   │   │   │   ├── schema-utils2
│   │   │   │   ├── schema-utils3
│   │   │   │   ├── semver
│   │   │   │   ├── send
│   │   │   │   ├── server-only
│   │   │   │   ├── setimmediate
│   │   │   │   ├── shell-quote
│   │   │   │   ├── source-map
│   │   │   │   ├── source-map08
│   │   │   │   ├── stacktrace-parser
│   │   │   │   ├── stream-browserify
│   │   │   │   ├── stream-http
│   │   │   │   ├── string-hash
│   │   │   │   ├── string_decoder
│   │   │   │   ├── strip-ansi
│   │   │   │   ├── superstruct
│   │   │   │   ├── tar
│   │   │   │   ├── terser
│   │   │   │   ├── text-table
│   │   │   │   ├── timers-browserify
│   │   │   │   ├── tty-browserify
│   │   │   │   ├── ua-parser-js
│   │   │   │   ├── unistore
│   │   │   │   ├── util
│   │   │   │   ├── vm-browserify
│   │   │   │   ├── watchpack
│   │   │   │   ├── web-vitals
│   │   │   │   ├── web-vitals-attribution
│   │   │   │   ├── webpack
│   │   │   │   ├── webpack-sources1
│   │   │   │   ├── webpack-sources3
│   │   │   │   ├── ws
│   │   │   │   ├── zod
│   │   │   │   └── zod-validation-error
│   │   │   ├── diagnostics
│   │   │   ├── esm
│   │   │   │   ├── api
│   │   │   │   ├── build
│   │   │   │   │   ├── analysis
│   │   │   │   │   ├── babel
│   │   │   │   │   │   ├── loader
│   │   │   │   │   │   └── plugins
│   │   │   │   │   ├── flying-shuttle
│   │   │   │   │   ├── manifests
│   │   │   │   │   │   └── formatter
│   │   │   │   │   ├── next-config-ts
│   │   │   │   │   ├── output
│   │   │   │   │   ├── polyfills
│   │   │   │   │   │   ├── fetch
│   │   │   │   │   │   └── object.assign
│   │   │   │   │   ├── segment-config
│   │   │   │   │   │   ├── app
│   │   │   │   │   │   ├── middleware
│   │   │   │   │   │   └── pages
│   │   │   │   │   ├── swc
│   │   │   │   │   ├── templates
│   │   │   │   │   ├── turborepo-access-trace
│   │   │   │   │   ├── webpack
│   │   │   │   │   │   ├── alias
│   │   │   │   │   │   ├── config
│   │   │   │   │   │   │   └── blocks
│   │   │   │   │   │   │       ├── css
│   │   │   │   │   │   │       │   └── loaders
│   │   │   │   │   │   │       └── images
│   │   │   │   │   │   ├── loaders
│   │   │   │   │   │   │   ├── css-loader
│   │   │   │   │   │   │   │   └── src
│   │   │   │   │   │   │   │       ├── plugins
│   │   │   │   │   │   │   │       └── runtime
│   │   │   │   │   │   │   ├── lightningcss-loader
│   │   │   │   │   │   │   │   └── src
│   │   │   │   │   │   │   ├── metadata
│   │   │   │   │   │   │   ├── next-app-loader
│   │   │   │   │   │   │   ├── next-edge-app-route-loader
│   │   │   │   │   │   │   ├── next-edge-ssr-loader
│   │   │   │   │   │   │   ├── next-flight-loader
│   │   │   │   │   │   │   ├── next-font-loader
│   │   │   │   │   │   │   ├── next-image-loader
│   │   │   │   │   │   │   ├── next-route-loader
│   │   │   │   │   │   │   ├── next-style-loader
│   │   │   │   │   │   │   │   └── runtime
│   │   │   │   │   │   │   ├── postcss-loader
│   │   │   │   │   │   │   │   └── src
│   │   │   │   │   │   │   └── resolve-url-loader
│   │   │   │   │   │   │       └── lib
│   │   │   │   │   │   └── plugins
│   │   │   │   │   │       ├── minify-webpack-plugin
│   │   │   │   │   │       │   └── src
│   │   │   │   │   │       ├── next-types-plugin
│   │   │   │   │   │       └── wellknown-errors-plugin
│   │   │   │   │   ├── webpack-build
│   │   │   │   │   └── webpack-config-rules
│   │   │   │   ├── client
│   │   │   │   │   ├── compat
│   │   │   │   │   ├── components
│   │   │   │   │   │   ├── globals
│   │   │   │   │   │   ├── react-dev-overlay
│   │   │   │   │   │   │   ├── app
│   │   │   │   │   │   │   ├── internal
│   │   │   │   │   │   │   │   ├── components
│   │   │   │   │   │   │   │   │   ├── CodeFrame
│   │   │   │   │   │   │   │   │   ├── Dialog
│   │   │   │   │   │   │   │   │   ├── LeftRightDialogHeader
│   │   │   │   │   │   │   │   │   ├── Overlay
│   │   │   │   │   │   │   │   │   ├── Terminal
│   │   │   │   │   │   │   │   │   ├── Toast
│   │   │   │   │   │   │   │   │   ├── VersionStalenessInfo
│   │   │   │   │   │   │   │   │   ├── copy-button
│   │   │   │   │   │   │   │   │   └── hot-linked-text
│   │   │   │   │   │   │   │   ├── container
│   │   │   │   │   │   │   │   │   └── RuntimeError
│   │   │   │   │   │   │   │   ├── helpers
│   │   │   │   │   │   │   │   ├── hooks
│   │   │   │   │   │   │   │   ├── icons
│   │   │   │   │   │   │   │   └── styles
│   │   │   │   │   │   │   ├── pages
│   │   │   │   │   │   │   └── server
│   │   │   │   │   │   └── router-reducer
│   │   │   │   │   │       └── reducers
│   │   │   │   │   ├── dev
│   │   │   │   │   │   └── error-overlay
│   │   │   │   │   ├── legacy
│   │   │   │   │   ├── lib
│   │   │   │   │   ├── portal
│   │   │   │   │   ├── react-client-callbacks
│   │   │   │   │   └── tracing
│   │   │   │   ├── export
│   │   │   │   │   ├── helpers
│   │   │   │   │   └── routes
│   │   │   │   ├── lib
│   │   │   │   │   ├── eslint
│   │   │   │   │   ├── fs
│   │   │   │   │   ├── helpers
│   │   │   │   │   ├── memory
│   │   │   │   │   ├── metadata
│   │   │   │   │   │   ├── generate
│   │   │   │   │   │   ├── resolvers
│   │   │   │   │   │   └── types
│   │   │   │   │   └── typescript
│   │   │   │   ├── pages
│   │   │   │   ├── server
│   │   │   │   │   ├── after
│   │   │   │   │   ├── api-utils
│   │   │   │   │   │   └── node
│   │   │   │   │   ├── app-render
│   │   │   │   │   │   └── rsc
│   │   │   │   │   ├── async-storage
│   │   │   │   │   ├── base-http
│   │   │   │   │   ├── dev
│   │   │   │   │   │   └── turbopack
│   │   │   │   │   ├── instrumentation
│   │   │   │   │   ├── lib
│   │   │   │   │   │   ├── cache-handlers
│   │   │   │   │   │   ├── experimental
│   │   │   │   │   │   ├── incremental-cache
│   │   │   │   │   │   ├── module-loader
│   │   │   │   │   │   ├── router-utils
│   │   │   │   │   │   ├── server-ipc
│   │   │   │   │   │   └── trace
│   │   │   │   │   ├── node-environment-extensions
│   │   │   │   │   ├── normalizers
│   │   │   │   │   │   ├── built
│   │   │   │   │   │   │   ├── app
│   │   │   │   │   │   │   └── pages
│   │   │   │   │   │   └── request
│   │   │   │   │   ├── og
│   │   │   │   │   ├── request
│   │   │   │   │   ├── response-cache
│   │   │   │   │   ├── resume-data-cache
│   │   │   │   │   ├── route-definitions
│   │   │   │   │   ├── route-matcher-managers
│   │   │   │   │   ├── route-matcher-providers
│   │   │   │   │   │   ├── dev
│   │   │   │   │   │   │   └── helpers
│   │   │   │   │   │   │       └── file-reader
│   │   │   │   │   │   └── helpers
│   │   │   │   │   │       └── manifest-loaders
│   │   │   │   │   ├── route-matchers
│   │   │   │   │   ├── route-matches
│   │   │   │   │   ├── route-modules
│   │   │   │   │   │   ├── app-page
│   │   │   │   │   │   │   └── vendored
│   │   │   │   │   │   │       ├── contexts
│   │   │   │   │   │   │       ├── rsc
│   │   │   │   │   │   │       └── ssr
│   │   │   │   │   │   ├── app-route
│   │   │   │   │   │   │   └── helpers
│   │   │   │   │   │   ├── pages
│   │   │   │   │   │   │   ├── builtin
│   │   │   │   │   │   │   └── vendored
│   │   │   │   │   │   │       └── contexts
│   │   │   │   │   │   └── pages-api
│   │   │   │   │   ├── stream-utils
│   │   │   │   │   ├── typescript
│   │   │   │   │   │   └── rules
│   │   │   │   │   ├── use-cache
│   │   │   │   │   └── web
│   │   │   │   │       ├── exports
│   │   │   │   │       ├── sandbox
│   │   │   │   │       └── spec-extension
│   │   │   │   │           └── adapters
│   │   │   │   └── shared
│   │   │   │       └── lib
│   │   │   │           ├── i18n
│   │   │   │           ├── isomorphic
│   │   │   │           ├── lazy-dynamic
│   │   │   │           ├── page-path
│   │   │   │           ├── router
│   │   │   │           │   └── utils
│   │   │   │           └── utils
│   │   │   ├── experimental
│   │   │   │   ├── testing
│   │   │   │   │   └── server
│   │   │   │   └── testmode
│   │   │   │       ├── playwright
│   │   │   │       └── proxy
│   │   │   ├── export
│   │   │   │   ├── helpers
│   │   │   │   └── routes
│   │   │   ├── lib
│   │   │   │   ├── eslint
│   │   │   │   ├── fs
│   │   │   │   ├── helpers
│   │   │   │   ├── memory
│   │   │   │   ├── metadata
│   │   │   │   │   ├── generate
│   │   │   │   │   ├── resolvers
│   │   │   │   │   └── types
│   │   │   │   └── typescript
│   │   │   ├── pages
│   │   │   ├── server
│   │   │   │   ├── after
│   │   │   │   ├── api-utils
│   │   │   │   │   └── node
│   │   │   │   ├── app-render
│   │   │   │   │   └── rsc
│   │   │   │   ├── async-storage
│   │   │   │   ├── base-http
│   │   │   │   ├── dev
│   │   │   │   │   └── turbopack
│   │   │   │   ├── instrumentation
│   │   │   │   ├── lib
│   │   │   │   │   ├── cache-handlers
│   │   │   │   │   ├── experimental
│   │   │   │   │   ├── incremental-cache
│   │   │   │   │   ├── module-loader
│   │   │   │   │   ├── router-utils
│   │   │   │   │   ├── server-ipc
│   │   │   │   │   └── trace
│   │   │   │   ├── node-environment-extensions
│   │   │   │   ├── normalizers
│   │   │   │   │   ├── built
│   │   │   │   │   │   ├── app
│   │   │   │   │   │   └── pages
│   │   │   │   │   └── request
│   │   │   │   ├── og
│   │   │   │   ├── request
│   │   │   │   ├── response-cache
│   │   │   │   ├── resume-data-cache
│   │   │   │   ├── route-definitions
│   │   │   │   ├── route-matcher-managers
│   │   │   │   ├── route-matcher-providers
│   │   │   │   │   ├── dev
│   │   │   │   │   │   └── helpers
│   │   │   │   │   │       └── file-reader
│   │   │   │   │   └── helpers
│   │   │   │   │       └── manifest-loaders
│   │   │   │   ├── route-matchers
│   │   │   │   ├── route-matches
│   │   │   │   ├── route-modules
│   │   │   │   │   ├── app-page
│   │   │   │   │   │   └── vendored
│   │   │   │   │   │       ├── contexts
│   │   │   │   │   │       ├── rsc
│   │   │   │   │   │       └── ssr
│   │   │   │   │   ├── app-route
│   │   │   │   │   │   └── helpers
│   │   │   │   │   ├── pages
│   │   │   │   │   │   ├── builtin
│   │   │   │   │   │   └── vendored
│   │   │   │   │   │       └── contexts
│   │   │   │   │   └── pages-api
│   │   │   │   ├── stream-utils
│   │   │   │   ├── typescript
│   │   │   │   │   └── rules
│   │   │   │   ├── use-cache
│   │   │   │   └── web
│   │   │   │       ├── exports
│   │   │   │       ├── sandbox
│   │   │   │       └── spec-extension
│   │   │   │           └── adapters
│   │   │   ├── shared
│   │   │   │   └── lib
│   │   │   │       ├── i18n
│   │   │   │       ├── isomorphic
│   │   │   │       ├── lazy-dynamic
│   │   │   │       ├── page-path
│   │   │   │       ├── router
│   │   │   │       │   └── utils
│   │   │   │       └── utils
│   │   │   ├── styled-jsx
│   │   │   │   └── types
│   │   │   ├── telemetry
│   │   │   │   └── events
│   │   │   └── trace
│   │   │       └── report
│   │   ├── experimental
│   │   │   ├── testing
│   │   │   └── testmode
│   │   │       └── playwright
│   │   ├── font
│   │   │   ├── google
│   │   │   └── local
│   │   ├── image-types
│   │   ├── legacy
│   │   ├── navigation-types
│   │   │   └── compat
│   │   ├── node_modules
│   │   │   └── postcss
│   │   │       └── lib
│   │   └── types
│   ├── node-domexception
│   ├── node-fetch
│   │   ├── lib
│   │   └── node_modules
│   │       ├── tr46
│   │       │   └── lib
│   │       ├── webidl-conversions
│   │       │   └── lib
│   │       └── whatwg-url
│   │           └── lib
│   ├── node-int64
│   ├── node-releases
│   │   └── data
│   │       ├── processed
│   │       └── release-schedule
│   ├── normalize-path
│   ├── npm-run-path
│   ├── nwsapi
│   │   ├── dist
│   │   └── src
│   │       └── modules
│   ├── object-assign
│   ├── object-hash
│   │   └── dist
│   ├── object-inspect
│   │   ├── example
│   │   └── test
│   │       └── browser
│   ├── object-is
│   │   └── test
│   ├── object-keys
│   │   └── test
│   ├── object.assign
│   │   ├── dist
│   │   └── test
│   ├── object.entries
│   │   └── test
│   ├── object.fromentries
│   │   └── test
│   ├── object.groupby
│   │   └── test
│   ├── object.values
│   │   └── test
│   ├── once
│   ├── onetime
│   ├── optionator
│   │   └── lib
│   ├── outvariant
│   │   └── lib
│   ├── p-limit
│   ├── p-locate
│   ├── p-try
│   ├── package-json-from-dist
│   │   └── dist
│   │       ├── commonjs
│   │       └── esm
│   ├── parent-module
│   ├── parse-entities
│   │   ├── lib
│   │   └── node_modules
│   │       └── @types
│   │           └── unist
│   ├── parse-json
│   ├── parse5
│   │   └── dist
│   │       ├── cjs
│   │       │   ├── common
│   │       │   ├── parser
│   │       │   ├── serializer
│   │       │   ├── tokenizer
│   │       │   └── tree-adapters
│   │       ├── common
│   │       ├── parser
│   │       ├── serializer
│   │       ├── tokenizer
│   │       └── tree-adapters
│   ├── path-exists
│   ├── path-is-absolute
│   ├── path-key
│   ├── path-parse
│   ├── path-scurry
│   │   ├── dist
│   │   │   ├── commonjs
│   │   │   └── esm
│   │   └── node_modules
│   │       └── lru-cache
│   │           └── dist
│   │               ├── commonjs
│   │               └── esm
│   ├── path-to-regexp
│   │   ├── dist
│   │   └── dist.es2015
│   ├── picocolors
│   ├── picomatch
│   │   └── lib
│   ├── pify
│   ├── pirates
│   │   └── lib
│   ├── pkg-dir
│   │   └── node_modules
│   │       ├── find-up
│   │       ├── locate-path
│   │       ├── p-limit
│   │       └── p-locate
│   ├── possible-typed-array-names
│   │   └── test
│   ├── postcss
│   │   └── lib
│   ├── postcss-import
│   │   └── lib
│   ├── postcss-js
│   ├── postcss-load-config
│   │   ├── node_modules
│   │   │   └── lilconfig
│   │   │       └── src
│   │   └── src
│   ├── postcss-nested
│   ├── postcss-selector-parser
│   │   └── dist
│   │       ├── selectors
│   │       └── util
│   ├── postcss-value-parser
│   │   └── lib
│   ├── prelude-ls
│   │   └── lib
│   ├── pretty-format
│   │   ├── build
│   │   │   └── plugins
│   │   │       └── lib
│   │   └── node_modules
│   │       └── ansi-styles
│   ├── prismjs
│   │   ├── components
│   │   ├── plugins
│   │   │   ├── autolinker
│   │   │   ├── autoloader
│   │   │   ├── command-line
│   │   │   ├── copy-to-clipboard
│   │   │   ├── custom-class
│   │   │   ├── data-uri-highlight
│   │   │   ├── diff-highlight
│   │   │   ├── download-button
│   │   │   ├── file-highlight
│   │   │   ├── filter-highlight-all
│   │   │   ├── highlight-keywords
│   │   │   ├── inline-color
│   │   │   ├── jsonp-highlight
│   │   │   ├── keep-markup
│   │   │   ├── line-highlight
│   │   │   ├── line-numbers
│   │   │   ├── match-braces
│   │   │   ├── normalize-whitespace
│   │   │   ├── previewers
│   │   │   ├── remove-initial-line-feed
│   │   │   ├── show-invisibles
│   │   │   ├── show-language
│   │   │   ├── toolbar
│   │   │   ├── treeview
│   │   │   ├── unescaped-markup
│   │   │   └── wpd
│   │   └── themes
│   ├── prompts
│   │   ├── dist
│   │   │   ├── dateparts
│   │   │   ├── elements
│   │   │   └── util
│   │   └── lib
│   │       ├── dateparts
│   │       ├── elements
│   │       └── util
│   ├── prop-types
│   │   ├── lib
│   │   └── node_modules
│   │       └── react-is
│   │           ├── cjs
│   │           └── umd
│   ├── property-information
│   │   └── lib
│   │       └── util
│   ├── psl
│   │   ├── data
│   │   ├── dist
│   │   ├── log
│   │   └── test-results
│   ├── punycode
│   ├── pure-rand
│   │   └── lib
│   │       ├── distribution
│   │       │   └── internals
│   │       ├── esm
│   │       │   ├── distribution
│   │       │   │   └── internals
│   │       │   ├── generator
│   │       │   └── types
│   │       │       ├── distribution
│   │       │       │   └── internals
│   │       │       └── generator
│   │       ├── generator
│   │       └── types
│   │           ├── distribution
│   │           │   └── internals
│   │           └── generator
│   ├── querystringify
│   ├── queue-microtask
│   ├── react
│   │   ├── cjs
│   │   └── umd
│   ├── react-dom
│   │   ├── cjs
│   │   └── umd
│   ├── react-is
│   │   ├── cjs
│   │   └── umd
│   ├── react-markdown
│   │   └── lib
│   ├── react-syntax-highlighter
│   │   ├── dist
│   │   │   ├── cjs
│   │   │   │   ├── async-languages
│   │   │   │   ├── languages
│   │   │   │   │   ├── hljs
│   │   │   │   │   └── prism
│   │   │   │   └── styles
│   │   │   │       ├── hljs
│   │   │   │       └── prism
│   │   │   └── esm
│   │   │       ├── async-languages
│   │   │       ├── languages
│   │   │       │   ├── hljs
│   │   │       │   └── prism
│   │   │       └── styles
│   │   │           ├── hljs
│   │   │           └── prism
│   │   ├── scripts
│   │   └── src
│   │       ├── async-languages
│   │       ├── languages
│   │       │   ├── hljs
│   │       │   └── prism
│   │       └── styles
│   │           ├── hljs
│   │           └── prism
│   ├── read-cache
│   ├── readdirp
│   ├── redent
│   ├── reflect.getprototypeof
│   │   └── test
│   ├── refractor
│   │   ├── lang
│   │   └── node_modules
│   │       ├── character-entities
│   │       ├── character-entities-legacy
│   │       ├── character-reference-invalid
│   │       ├── is-alphabetical
│   │       ├── is-alphanumerical
│   │       ├── is-decimal
│   │       ├── is-hexadecimal
│   │       ├── parse-entities
│   │       │   └── types
│   │       └── prismjs
│   │           ├── components
│   │           ├── plugins
│   │           │   ├── autolinker
│   │           │   ├── autoloader
│   │           │   ├── command-line
│   │           │   ├── copy-to-clipboard
│   │           │   ├── custom-class
│   │           │   ├── data-uri-highlight
│   │           │   ├── diff-highlight
│   │           │   ├── download-button
│   │           │   ├── file-highlight
│   │           │   ├── filter-highlight-all
│   │           │   ├── highlight-keywords
│   │           │   ├── inline-color
│   │           │   ├── jsonp-highlight
│   │           │   ├── keep-markup
│   │           │   ├── line-highlight
│   │           │   ├── line-numbers
│   │           │   ├── match-braces
│   │           │   ├── normalize-whitespace
│   │           │   ├── previewers
│   │           │   ├── remove-initial-line-feed
│   │           │   ├── show-invisibles
│   │           │   ├── show-language
│   │           │   ├── toolbar
│   │           │   ├── treeview
│   │           │   ├── unescaped-markup
│   │           │   └── wpd
│   │           └── themes
│   ├── regenerator-runtime
│   ├── regexp.prototype.flags
│   │   └── test
│   ├── rehype-katex
│   │   └── lib
│   ├── remark-gfm
│   │   └── lib
│   ├── remark-math
│   │   └── lib
│   ├── remark-parse
│   │   └── lib
│   ├── remark-rehype
│   │   └── lib
│   ├── remark-stringify
│   │   └── lib
│   ├── require-directory
│   ├── requires-port
│   ├── resolve
│   │   ├── bin
│   │   ├── example
│   │   ├── lib
│   │   └── test
│   │       ├── dotdot
│   │       │   └── abc
│   │       ├── module_dir
│   │       │   ├── xmodules
│   │       │   │   └── aaa
│   │       │   ├── ymodules
│   │       │   │   └── aaa
│   │       │   └── zmodules
│   │       │       └── bbb
│   │       ├── node_path
│   │       │   ├── x
│   │       │   │   ├── aaa
│   │       │   │   └── ccc
│   │       │   └── y
│   │       │       ├── bbb
│   │       │       └── ccc
│   │       ├── pathfilter
│   │       │   └── deep_ref
│   │       ├── precedence
│   │       │   ├── aaa
│   │       │   └── bbb
│   │       ├── resolver
│   │       │   ├── baz
│   │       │   ├── browser_field
│   │       │   ├── dot_main
│   │       │   ├── dot_slash_main
│   │       │   ├── false_main
│   │       │   ├── incorrect_main
│   │       │   ├── invalid_main
│   │       │   ├── multirepo
│   │       │   │   └── packages
│   │       │   │       ├── package-a
│   │       │   │       └── package-b
│   │       │   ├── nested_symlinks
│   │       │   │   └── mylib
│   │       │   ├── other_path
│   │       │   │   └── lib
│   │       │   ├── quux
│   │       │   │   └── foo
│   │       │   ├── same_names
│   │       │   │   └── foo
│   │       │   ├── symlinked
│   │       │   │   ├── _
│   │       │   │   │   ├── node_modules
│   │       │   │   │   └── symlink_target
│   │       │   │   └── package
│   │       │   └── without_basedir
│   │       └── shadowed_core
│   │           └── node_modules
│   │               └── util
│   ├── resolve-cwd
│   │   └── node_modules
│   │       └── resolve-from
│   ├── resolve-from
│   ├── resolve-pkg-maps
│   │   └── dist
│   ├── resolve.exports
│   │   └── dist
│   ├── reusify
│   │   └── benchmarks
│   ├── rimraf
│   ├── run-parallel
│   ├── safe-array-concat
│   │   └── test
│   ├── safe-regex-test
│   │   └── test
│   ├── safer-buffer
│   ├── saxes
│   ├── scheduler
│   │   ├── cjs
│   │   └── umd
│   ├── semver
│   │   ├── bin
│   │   ├── classes
│   │   ├── functions
│   │   ├── internal
│   │   └── ranges
│   ├── set-function-length
│   ├── set-function-name
│   ├── sharp
│   │   ├── install
│   │   ├── lib
│   │   └── src
│   ├── shebang-command
│   ├── shebang-regex
│   ├── side-channel
│   │   └── test
│   ├── signal-exit
│   ├── simple-swizzle
│   │   └── node_modules
│   │       └── is-arrayish
│   ├── sisteransi
│   │   └── src
│   ├── slash
│   ├── source-map
│   │   ├── dist
│   │   └── lib
│   ├── source-map-js
│   │   └── lib
│   ├── source-map-support
│   ├── space-separated-tokens
│   ├── sprintf-js
│   │   ├── demo
│   │   ├── dist
│   │   ├── src
│   │   └── test
│   ├── stack-utils
│   │   └── node_modules
│   │       └── escape-string-regexp
│   ├── statuses
│   ├── stop-iteration-iterator
│   │   └── test
│   ├── streamsearch
│   │   ├── lib
│   │   └── test
│   ├── strict-event-emitter
│   │   └── lib
│   ├── string-length
│   ├── string-width
│   │   └── node_modules
│   │       └── emoji-regex
│   │           └── es2015
│   ├── string-width-cjs
│   │   └── node_modules
│   │       └── emoji-regex
│   │           └── es2015
│   ├── string.prototype.includes
│   │   └── tests
│   ├── string.prototype.matchall
│   │   └── test
│   ├── string.prototype.repeat
│   │   └── tests
│   ├── string.prototype.trim
│   │   └── test
│   ├── string.prototype.trimend
│   │   └── test
│   ├── string.prototype.trimstart
│   │   └── test
│   ├── stringify-entities
│   │   └── lib
│   │       ├── constant
│   │       └── util
│   ├── strip-ansi
│   ├── strip-ansi-cjs
│   ├── strip-bom
│   ├── strip-final-newline
│   ├── strip-indent
│   ├── strip-json-comments
│   ├── style-to-object
│   │   ├── cjs
│   │   ├── dist
│   │   ├── esm
│   │   └── src
│   ├── styled-jsx
│   │   ├── dist
│   │   │   ├── babel
│   │   │   ├── index
│   │   │   └── webpack
│   │   └── lib
│   ├── sucrase
│   │   ├── bin
│   │   ├── dist
│   │   │   ├── esm
│   │   │   │   ├── parser
│   │   │   │   │   ├── plugins
│   │   │   │   │   │   └── jsx
│   │   │   │   │   ├── tokenizer
│   │   │   │   │   ├── traverser
│   │   │   │   │   └── util
│   │   │   │   ├── transformers
│   │   │   │   └── util
│   │   │   ├── parser
│   │   │   │   ├── plugins
│   │   │   │   │   └── jsx
│   │   │   │   ├── tokenizer
│   │   │   │   ├── traverser
│   │   │   │   └── util
│   │   │   ├── transformers
│   │   │   ├── types
│   │   │   │   ├── parser
│   │   │   │   │   ├── plugins
│   │   │   │   │   │   └── jsx
│   │   │   │   │   ├── tokenizer
│   │   │   │   │   ├── traverser
│   │   │   │   │   └── util
│   │   │   │   ├── transformers
│   │   │   │   └── util
│   │   │   └── util
│   │   ├── node_modules
│   │   │   ├── brace-expansion
│   │   │   ├── glob
│   │   │   │   └── dist
│   │   │   │       ├── commonjs
│   │   │   │       └── esm
│   │   │   └── minimatch
│   │   │       └── dist
│   │   │           ├── commonjs
│   │   │           └── esm
│   │   ├── register
│   │   └── ts-node-plugin
│   ├── supports-color
│   ├── supports-preserve-symlinks-flag
│   │   └── test
│   ├── symbol-tree
│   │   └── lib
│   ├── tailwind-merge
│   │   ├── dist
│   │   │   └── es5
│   │   └── src
│   │       └── lib
│   ├── tailwindcss
│   │   ├── lib
│   │   │   ├── cli
│   │   │   │   ├── build
│   │   │   │   ├── help
│   │   │   │   └── init
│   │   │   ├── css
│   │   │   ├── lib
│   │   │   ├── postcss-plugins
│   │   │   │   └── nesting
│   │   │   ├── public
│   │   │   ├── util
│   │   │   └── value-parser
│   │   ├── nesting
│   │   ├── node_modules
│   │   │   └── fast-glob
│   │   │       ├── node_modules
│   │   │       │   └── glob-parent
│   │   │       └── out
│   │   │           ├── managers
│   │   │           ├── providers
│   │   │           │   ├── filters
│   │   │           │   ├── matchers
│   │   │           │   └── transformers
│   │   │           ├── readers
│   │   │           ├── types
│   │   │           └── utils
│   │   ├── peers
│   │   ├── scripts
│   │   ├── src
│   │   │   ├── cli
│   │   │   │   ├── build
│   │   │   │   ├── help
│   │   │   │   └── init
│   │   │   ├── css
│   │   │   ├── lib
│   │   │   ├── postcss-plugins
│   │   │   │   └── nesting
│   │   │   ├── public
│   │   │   ├── util
│   │   │   └── value-parser
│   │   ├── stubs
│   │   └── types
│   │       └── generated
│   ├── tapable
│   │   └── lib
│   ├── test-exclude
│   ├── text-table
│   │   ├── example
│   │   └── test
│   ├── thenify
│   ├── thenify-all
│   ├── tmpl
│   │   └── lib
│   ├── to-regex-range
│   ├── tough-cookie
│   │   └── lib
│   ├── tr46
│   │   └── lib
│   ├── trim-lines
│   ├── trough
│   │   └── lib
│   ├── ts-api-utils
│   │   └── lib
│   ├── ts-interface-checker
│   │   └── dist
│   ├── ts-node
│   │   ├── dist
│   │   │   ├── child
│   │   │   └── transpilers
│   │   ├── dist-raw
│   │   ├── esm
│   │   ├── node10
│   │   ├── node12
│   │   ├── node14
│   │   ├── node16
│   │   ├── node_modules
│   │   │   └── arg
│   │   ├── register
│   │   └── transpilers
│   ├── tsconfig-paths
│   │   ├── lib
│   │   │   └── __tests__
│   │   │       └── data
│   │   ├── node_modules
│   │   │   ├── json5
│   │   │   │   ├── dist
│   │   │   │   └── lib
│   │   │   └── strip-bom
│   │   └── src
│   │       └── __tests__
│   │           └── data
│   ├── tslib
│   │   └── modules
│   ├── type-check
│   │   └── lib
│   ├── type-detect
│   ├── type-fest
│   │   ├── source
│   │   └── ts41
│   ├── typed-array-buffer
│   │   └── test
│   ├── typed-array-byte-length
│   │   └── test
│   ├── typed-array-byte-offset
│   │   └── test
│   ├── typed-array-length
│   │   └── test
│   ├── typescript
│   │   ├── bin
│   │   └── lib
│   │       ├── cs
│   │       ├── de
│   │       ├── es
│   │       ├── fr
│   │       ├── it
│   │       ├── ja
│   │       ├── ko
│   │       ├── pl
│   │       ├── pt-br
│   │       ├── ru
│   │       ├── tr
│   │       ├── zh-cn
│   │       └── zh-tw
│   ├── unbox-primitive
│   │   └── test
│   ├── undici-types
│   ├── unified
│   │   └── lib
│   ├── unist-util-find-after
│   │   └── lib
│   ├── unist-util-is
│   │   └── lib
│   ├── unist-util-position
│   │   └── lib
│   ├── unist-util-remove-position
│   │   └── lib
│   ├── unist-util-stringify-position
│   │   └── lib
│   ├── unist-util-visit
│   │   └── lib
│   ├── unist-util-visit-parents
│   │   └── lib
│   ├── universalify
│   ├── update-browserslist-db
│   ├── uri-js
│   │   └── dist
│   │       ├── es5
│   │       └── esnext
│   │           └── schemes
│   ├── url-parse
│   │   └── dist
│   ├── util-deprecate
│   ├── v8-compile-cache-lib
│   ├── v8-to-istanbul
│   │   └── lib
│   ├── vfile
│   │   └── lib
│   ├── vfile-location
│   │   └── lib
│   ├── vfile-message
│   │   └── lib
│   ├── w3c-xmlserializer
│   │   └── lib
│   ├── walker
│   │   └── lib
│   ├── web-namespaces
│   ├── web-streams-polyfill
│   │   ├── dist
│   │   ├── es5
│   │   ├── polyfill
│   │   │   └── es5
│   │   └── types
│   ├── webidl-conversions
│   │   └── lib
│   ├── whatwg-encoding
│   │   └── lib
│   ├── whatwg-mimetype
│   │   └── lib
│   ├── whatwg-url
│   │   └── lib
│   ├── which
│   │   └── bin
│   ├── which-boxed-primitive
│   │   └── test
│   ├── which-builtin-type
│   │   └── test
│   ├── which-collection
│   │   └── test
│   ├── which-typed-array
│   │   └── test
│   ├── word-wrap
│   ├── wrap-ansi
│   ├── wrap-ansi-cjs
│   ├── wrappy
│   ├── write-file-atomic
│   │   └── lib
│   ├── ws
│   │   └── lib
│   ├── xml-name-validator
│   │   └── lib
│   ├── xmlchars
│   │   ├── xml
│   │   │   ├── 1.0
│   │   │   └── 1.1
│   │   └── xmlns
│   │       └── 1.0
│   ├── xtend
│   ├── y18n
│   │   └── build
│   │       └── lib
│   │           └── platform-shims
│   ├── yallist
│   ├── yaml
│   │   ├── browser
│   │   │   └── dist
│   │   │       ├── compose
│   │   │       ├── doc
│   │   │       ├── nodes
│   │   │       ├── parse
│   │   │       ├── schema
│   │   │       │   ├── common
│   │   │       │   ├── core
│   │   │       │   ├── json
│   │   │       │   └── yaml-1.1
│   │   │       └── stringify
│   │   └── dist
│   │       ├── compose
│   │       ├── doc
│   │       ├── nodes
│   │       ├── parse
│   │       ├── schema
│   │       │   ├── common
│   │       │   ├── core
│   │       │   ├── json
│   │       │   └── yaml-1.1
│   │       └── stringify
│   ├── yargs
│   │   ├── build
│   │   │   └── lib
│   │   │       ├── typings
│   │   │       └── utils
│   │   ├── helpers
│   │   ├── lib
│   │   │   └── platform-shims
│   │   └── locales
│   ├── yargs-parser
│   │   └── build
│   │       └── lib
│   ├── yn
│   ├── yocto-queue
│   ├── yoctocolors-cjs
│   └── zwitch
├── public
└── src
    ├── __tests__
    │   └── components
    ├── app
    │   ├── (marketing)
    │   │   └── blog
    │   │       └── [slug]
    │   ├── about
    │   ├── api
    │   │   ├── backend-test
    │   │   └── test
    │   ├── fonts
    │   ├── services
    │   │   ├── [slug]
    │   │   ├── ai-readiness
    │   │   ├── data-strategy
    │   │   └── fractional-cdo
    │   └── test-helper
    ├── components
    │   ├── calculators
    │   ├── layout
    │   ├── marketing
    │   │   └── blog
    │   └── ui
    ├── lib
    │   └── api
    ├── tests
    │   ├── components
    │   └── integration
    └── utils

3541 directories

================
File: package.json
================
{
  "name": "neural-nexus-strategies",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest --silent",
    "test:watch": "jest --watch --silent",
    "test:coverage": "jest --coverage --silent"
  },
  "dependencies": {
    "@anthropic-ai/sdk": "^0.33.1",
    "@fingerprintjs/fingerprintjs": "^4.5.1",
    "@hookform/resolvers": "^3.3.4",
    "@radix-ui/react-alert-dialog": "^1.0.5",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-navigation-menu": "^1.2.3",
    "@radix-ui/react-popover": "^1.0.7",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-tooltip": "^1.0.7",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "critters": "^0.0.23",
    "encoding": "^0.1.13",
    "express": "^4.21.1",
    "framer-motion": "^11.0.3",
    "geist": "^1.2.1",
    "lucide-react": "^0.309.0",
    "next": "^14.2.20",
    "next-cloudinary": "^6.16.0",
    "next-themes": "^0.2.1",
    "payload": "^3.3.0",
    "react": "^18.2.0",
    "react-calendly": "^4.3.1",
    "react-countup": "^6.5.3",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.51.0",
    "styled-components": "^6.1.8",
    "tailwind-merge": "^2.6.0",
    "vaul": "^0.8.0",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@shadcn/ui": "^0.0.4",
    "@tailwindcss/forms": "^0.5.7",
    "@tailwindcss/typography": "^0.5.10",
    "@testing-library/jest-dom": "^6.4.2",
    "@testing-library/react": "^14.2.1",
    "@testing-library/user-event": "^14.5.2",
    "@types/express": "^5.0.0",
    "@types/jest": "^29.5.12",
    "@types/node": "^20.11.20",
    "@types/react": "^18.2.58",
    "@types/react-dom": "^18.2.19",
    "@types/styled-components": "^5.1.34",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "autoprefixer": "^10.4.17",
    "eslint": "^8.57.0",
    "eslint-config-next": "^14.1.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-jest": "^27.9.0",
    "eslint-plugin-jest-dom": "^5.1.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-testing-library": "^6.2.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-styled-components": "^7.2.0",
    "msw": "^2.7.0",
    "nodemon": "^3.1.0",
    "postcss": "^8.4.35",
    "postcss-loader": "^8.1.0",
    "prettier": "^3.2.5",
    "prettier-plugin-tailwindcss": "^0.5.11",
    "shadcn-ui": "^0.8.0",
    "tailwindcss": "^3.4.1",
    "ts-jest": "^29.1.2",
    "ts-node": "^10.9.2",
    "typescript": "^5.3.3",
    "whatwg-fetch": "^3.6.20"
  }
}

================
File: package.json.backup
================
{
  "name": "neural-nexus-strategies",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "test": "jest --silent",
    "test:watch": "jest --watch --silent",
    "test:coverage": "jest --coverage --silent",
    "test-storybook": "test-storybook",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build"
  },
  "dependencies": {
    "@fingerprintjs/fingerprintjs": "4.5.1",
    "@hookform/resolvers": "3.3.2",
    "@radix-ui/react-alert-dialog": "1.0.5",
    "@radix-ui/react-avatar": "1.0.4",
    "@radix-ui/react-dialog": "1.0.5",
    "@radix-ui/react-dropdown-menu": "2.0.6",
    "@radix-ui/react-label": "2.0.2",
    "@radix-ui/react-navigation-menu": "1.1.4",
    "@radix-ui/react-popover": "1.0.7",
    "@radix-ui/react-select": "2.0.0",
    "@radix-ui/react-tabs": "1.0.4",
    "@radix-ui/react-toast": "1.1.5",
    "@radix-ui/react-tooltip": "1.0.7",
    "express": "4.18.2",
    "framer-motion": "10.16.4",
    "geist": "1.1.0",
    "lucide-react": "0.309.0",
    "next": "14.0.4",
    "next-themes": "0.2.1",
    "react": "18.2.0",
    "react-calendly": "4.3.0",
    "react-dom": "18.2.0",
    "react-hook-form": "7.49.2",
    "styled-components": "6.1.1",
    "vaul": "0.8.0",
    "zod": "3.22.4"
  },
  "devDependencies": {
    "@chromatic-com/storybook": "1.2.1",
    "@shadcn/ui": "0.0.4",
    "@storybook/addon-a11y": "7.6.7",
    "@storybook/addon-essentials": "7.6.7",
    "@storybook/addon-interactions": "7.6.7",
    "@storybook/blocks": "7.6.7",
    "@storybook/nextjs": "7.6.7",
    "@storybook/react": "7.6.7",
    "@storybook/test": "7.6.7",
    "@tailwindcss/forms": "0.5.7",
    "@tailwindcss/typography": "0.5.10",
    "@testing-library/jest-dom": "6.1.5",
    "@testing-library/react": "14.1.2",
    "@testing-library/user-event": "14.5.1",
    "@types/express": "4.17.21",
    "@types/jest": "29.5.11",
    "@types/node": "20.10.6",
    "@types/react": "18.2.46",
    "@types/react-dom": "18.2.18",
    "@types/styled-components": "5.1.34",
    "@typescript-eslint/eslint-plugin": "6.10.0",
    "@typescript-eslint/parser": "6.10.0",
    "autoprefixer": "10.4.16",
    "eslint": "8.56.0",
    "eslint-config-next": "14.0.4",
    "eslint-config-prettier": "9.1.0",
    "eslint-plugin-jest": "27.6.0",
    "eslint-plugin-jest-dom": "5.1.0",
    "eslint-plugin-react": "7.33.2",
    "eslint-plugin-react-hooks": "4.6.0",
    "eslint-plugin-storybook": "0.6.15",
    "eslint-plugin-testing-library": "6.2.0",
    "jest": "29.7.0",
    "jest-environment-jsdom": "29.7.0",
    "jest-styled-components": "7.2.0",
    "nodemon": "3.0.2",
    "postcss": "8.4.32",
    "postcss-loader": "7.3.4",
    "prettier": "3.1.1",
    "prettier-plugin-tailwindcss": "0.5.9",
    "shadcn-ui": "0.8.0",
    "storybook": "7.6.7",
    "tailwindcss": "3.4.0",
    "ts-jest": "29.1.1",
    "ts-node": "10.9.2",
    "typescript": "5.3.3",
    "whatwg-fetch": "3.6.20"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: railway.toml
================
[build]
builder = "nixpacks"
buildCommand = "npm run build"

[deploy]
startCommand = "npm start"
healthcheckPath = "/"
healthcheckTimeout = 100
restartPolicyType = "ON_FAILURE"
numReplicas = 1

[deploy.env]
PORT = "3000"
NODE_ENV = "production"

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
// tailwind.config.ts - Updated
import type { Config } from "tailwindcss";
import typography from "@tailwindcss/typography";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        // Primary Blues
        primary: {
          navy: "#000080", // Navy Blue base
          DEFAULT: "#0047AB", // Cobalt Blue base
          light: "#0067CD", // Lighter variation
          lighter: "#0087FF", // Even lighter for hover states
        },
        // Foreground section
        foreground: {
          DEFAULT: "#FFFFFF", // White text for dark backgrounds
          muted: "#334155", // Dark text for light backgrounds
        },
        // Accent Colors (Yellow-Green)
        accent: {
          DEFAULT: "#9ACD32", // Yellow-Green base
          light: "#B8DC70", // Lighter variation
          dark: "#7BA428", // Darker variation
        },
        // Neutral tones
        neutral: {
          50: "#F8FAFC",
          100: "#F1F5F9",
          200: "#E2E8F0",
          300: "#CBD5E1",
          400: "#94A3B8",
          500: "#64748B",
          600: "#475569",
          700: "#334155",
          800: "#1E293B",
          900: "#0F172A",
        },
      },
      typography: {
        DEFAULT: {
          css: {
            maxWidth: "none",
            color: "#334155", // Updated to neutral-700
            a: {
              color: "#0047AB", // Updated to primary
              "&:hover": {
                color: "#0067CD", // Updated to primary-light
              },
            },
          },
        },
      },
    },
  },
  plugins: [typography],
};

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es2015",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "jest.config.ts",
    "src/__tests__/**/*.ts",
    "src/__tests__/**/*.tsx"
  ],
  "exclude": ["node_modules"]
}

================
File: tsconfig.test.json
================
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "module": "CommonJS",
        "moduleResolution": "node",
        "esModuleInterop": true,
        "baseUrl": ".",
        "paths": {
            "@/*": ["./src/*"]
        }
    },
    "include": ["src/**/*.ts", "src/**/*.tsx"],
    "exclude": ["node_modules"]
}

================
File: tsconfig.tsbuildinfo
================
{"fileNames":["./node_modules/typescript/lib/lib.es5.d.ts","./node_modules/typescript/lib/lib.es2015.d.ts","./node_modules/typescript/lib/lib.es2016.d.ts","./node_modules/typescript/lib/lib.es2017.d.ts","./node_modules/typescript/lib/lib.es2018.d.ts","./node_modules/typescript/lib/lib.es2019.d.ts","./node_modules/typescript/lib/lib.es2020.d.ts","./node_modules/typescript/lib/lib.es2021.d.ts","./node_modules/typescript/lib/lib.es2022.d.ts","./node_modules/typescript/lib/lib.es2023.d.ts","./node_modules/typescript/lib/lib.es2024.d.ts","./node_modules/typescript/lib/lib.esnext.d.ts","./node_modules/typescript/lib/lib.dom.d.ts","./node_modules/typescript/lib/lib.dom.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.core.d.ts","./node_modules/typescript/lib/lib.es2015.collection.d.ts","./node_modules/typescript/lib/lib.es2015.generator.d.ts","./node_modules/typescript/lib/lib.es2015.iterable.d.ts","./node_modules/typescript/lib/lib.es2015.promise.d.ts","./node_modules/typescript/lib/lib.es2015.proxy.d.ts","./node_modules/typescript/lib/lib.es2015.reflect.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.d.ts","./node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2016.array.include.d.ts","./node_modules/typescript/lib/lib.es2016.intl.d.ts","./node_modules/typescript/lib/lib.es2017.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2017.date.d.ts","./node_modules/typescript/lib/lib.es2017.object.d.ts","./node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2017.string.d.ts","./node_modules/typescript/lib/lib.es2017.intl.d.ts","./node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","./node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","./node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","./node_modules/typescript/lib/lib.es2018.intl.d.ts","./node_modules/typescript/lib/lib.es2018.promise.d.ts","./node_modules/typescript/lib/lib.es2018.regexp.d.ts","./node_modules/typescript/lib/lib.es2019.array.d.ts","./node_modules/typescript/lib/lib.es2019.object.d.ts","./node_modules/typescript/lib/lib.es2019.string.d.ts","./node_modules/typescript/lib/lib.es2019.symbol.d.ts","./node_modules/typescript/lib/lib.es2019.intl.d.ts","./node_modules/typescript/lib/lib.es2020.bigint.d.ts","./node_modules/typescript/lib/lib.es2020.date.d.ts","./node_modules/typescript/lib/lib.es2020.promise.d.ts","./node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2020.string.d.ts","./node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","./node_modules/typescript/lib/lib.es2020.intl.d.ts","./node_modules/typescript/lib/lib.es2020.number.d.ts","./node_modules/typescript/lib/lib.es2021.promise.d.ts","./node_modules/typescript/lib/lib.es2021.string.d.ts","./node_modules/typescript/lib/lib.es2021.weakref.d.ts","./node_modules/typescript/lib/lib.es2021.intl.d.ts","./node_modules/typescript/lib/lib.es2022.array.d.ts","./node_modules/typescript/lib/lib.es2022.error.d.ts","./node_modules/typescript/lib/lib.es2022.intl.d.ts","./node_modules/typescript/lib/lib.es2022.object.d.ts","./node_modules/typescript/lib/lib.es2022.string.d.ts","./node_modules/typescript/lib/lib.es2022.regexp.d.ts","./node_modules/typescript/lib/lib.es2023.array.d.ts","./node_modules/typescript/lib/lib.es2023.collection.d.ts","./node_modules/typescript/lib/lib.es2023.intl.d.ts","./node_modules/typescript/lib/lib.es2024.arraybuffer.d.ts","./node_modules/typescript/lib/lib.es2024.collection.d.ts","./node_modules/typescript/lib/lib.es2024.object.d.ts","./node_modules/typescript/lib/lib.es2024.promise.d.ts","./node_modules/typescript/lib/lib.es2024.regexp.d.ts","./node_modules/typescript/lib/lib.es2024.sharedmemory.d.ts","./node_modules/typescript/lib/lib.es2024.string.d.ts","./node_modules/typescript/lib/lib.esnext.array.d.ts","./node_modules/typescript/lib/lib.esnext.collection.d.ts","./node_modules/typescript/lib/lib.esnext.intl.d.ts","./node_modules/typescript/lib/lib.esnext.disposable.d.ts","./node_modules/typescript/lib/lib.esnext.decorators.d.ts","./node_modules/typescript/lib/lib.esnext.iterator.d.ts","./node_modules/typescript/lib/lib.decorators.d.ts","./node_modules/typescript/lib/lib.decorators.legacy.d.ts","./node_modules/next/dist/styled-jsx/types/css.d.ts","./node_modules/@types/react/global.d.ts","./node_modules/csstype/index.d.ts","./node_modules/@types/prop-types/index.d.ts","./node_modules/@types/react/index.d.ts","./node_modules/next/dist/styled-jsx/types/index.d.ts","./node_modules/next/dist/styled-jsx/types/macro.d.ts","./node_modules/next/dist/styled-jsx/types/style.d.ts","./node_modules/next/dist/styled-jsx/types/global.d.ts","./node_modules/next/dist/shared/lib/amp.d.ts","./node_modules/next/amp.d.ts","./node_modules/@types/node/compatibility/disposable.d.ts","./node_modules/@types/node/compatibility/indexable.d.ts","./node_modules/@types/node/compatibility/iterators.d.ts","./node_modules/@types/node/compatibility/index.d.ts","./node_modules/@types/node/globals.typedarray.d.ts","./node_modules/@types/node/buffer.buffer.d.ts","./node_modules/buffer/index.d.ts","./node_modules/undici-types/header.d.ts","./node_modules/undici-types/readable.d.ts","./node_modules/undici-types/file.d.ts","./node_modules/undici-types/fetch.d.ts","./node_modules/undici-types/formdata.d.ts","./node_modules/undici-types/connector.d.ts","./node_modules/undici-types/client.d.ts","./node_modules/undici-types/errors.d.ts","./node_modules/undici-types/dispatcher.d.ts","./node_modules/undici-types/global-dispatcher.d.ts","./node_modules/undici-types/global-origin.d.ts","./node_modules/undici-types/pool-stats.d.ts","./node_modules/undici-types/pool.d.ts","./node_modules/undici-types/handlers.d.ts","./node_modules/undici-types/balanced-pool.d.ts","./node_modules/undici-types/agent.d.ts","./node_modules/undici-types/mock-interceptor.d.ts","./node_modules/undici-types/mock-agent.d.ts","./node_modules/undici-types/mock-client.d.ts","./node_modules/undici-types/mock-pool.d.ts","./node_modules/undici-types/mock-errors.d.ts","./node_modules/undici-types/proxy-agent.d.ts","./node_modules/undici-types/env-http-proxy-agent.d.ts","./node_modules/undici-types/retry-handler.d.ts","./node_modules/undici-types/retry-agent.d.ts","./node_modules/undici-types/api.d.ts","./node_modules/undici-types/interceptors.d.ts","./node_modules/undici-types/util.d.ts","./node_modules/undici-types/cookies.d.ts","./node_modules/undici-types/patch.d.ts","./node_modules/undici-types/websocket.d.ts","./node_modules/undici-types/eventsource.d.ts","./node_modules/undici-types/filereader.d.ts","./node_modules/undici-types/diagnostics-channel.d.ts","./node_modules/undici-types/content-type.d.ts","./node_modules/undici-types/cache.d.ts","./node_modules/undici-types/index.d.ts","./node_modules/@types/node/globals.d.ts","./node_modules/@types/node/assert.d.ts","./node_modules/@types/node/assert/strict.d.ts","./node_modules/@types/node/async_hooks.d.ts","./node_modules/@types/node/buffer.d.ts","./node_modules/@types/node/child_process.d.ts","./node_modules/@types/node/cluster.d.ts","./node_modules/@types/node/console.d.ts","./node_modules/@types/node/constants.d.ts","./node_modules/@types/node/crypto.d.ts","./node_modules/@types/node/dgram.d.ts","./node_modules/@types/node/diagnostics_channel.d.ts","./node_modules/@types/node/dns.d.ts","./node_modules/@types/node/dns/promises.d.ts","./node_modules/@types/node/domain.d.ts","./node_modules/@types/node/dom-events.d.ts","./node_modules/@types/node/events.d.ts","./node_modules/@types/node/fs.d.ts","./node_modules/@types/node/fs/promises.d.ts","./node_modules/@types/node/http.d.ts","./node_modules/@types/node/http2.d.ts","./node_modules/@types/node/https.d.ts","./node_modules/@types/node/inspector.d.ts","./node_modules/@types/node/module.d.ts","./node_modules/@types/node/net.d.ts","./node_modules/@types/node/os.d.ts","./node_modules/@types/node/path.d.ts","./node_modules/@types/node/perf_hooks.d.ts","./node_modules/@types/node/process.d.ts","./node_modules/@types/node/punycode.d.ts","./node_modules/@types/node/querystring.d.ts","./node_modules/@types/node/readline.d.ts","./node_modules/@types/node/readline/promises.d.ts","./node_modules/@types/node/repl.d.ts","./node_modules/@types/node/sea.d.ts","./node_modules/@types/node/stream.d.ts","./node_modules/@types/node/stream/promises.d.ts","./node_modules/@types/node/stream/consumers.d.ts","./node_modules/@types/node/stream/web.d.ts","./node_modules/@types/node/string_decoder.d.ts","./node_modules/@types/node/test.d.ts","./node_modules/@types/node/timers.d.ts","./node_modules/@types/node/timers/promises.d.ts","./node_modules/@types/node/tls.d.ts","./node_modules/@types/node/trace_events.d.ts","./node_modules/@types/node/tty.d.ts","./node_modules/@types/node/url.d.ts","./node_modules/@types/node/util.d.ts","./node_modules/@types/node/v8.d.ts","./node_modules/@types/node/vm.d.ts","./node_modules/@types/node/wasi.d.ts","./node_modules/@types/node/worker_threads.d.ts","./node_modules/@types/node/zlib.d.ts","./node_modules/@types/node/index.d.ts","./node_modules/next/dist/server/get-page-files.d.ts","./node_modules/@types/react/canary.d.ts","./node_modules/@types/react/experimental.d.ts","./node_modules/@types/react-dom/index.d.ts","./node_modules/@types/react-dom/canary.d.ts","./node_modules/@types/react-dom/experimental.d.ts","./node_modules/next/dist/compiled/webpack/webpack.d.ts","./node_modules/next/dist/server/config.d.ts","./node_modules/next/dist/lib/load-custom-routes.d.ts","./node_modules/next/dist/shared/lib/image-config.d.ts","./node_modules/next/dist/build/webpack/plugins/subresource-integrity-plugin.d.ts","./node_modules/next/dist/server/body-streams.d.ts","./node_modules/next/dist/server/future/route-kind.d.ts","./node_modules/next/dist/server/future/route-definitions/route-definition.d.ts","./node_modules/next/dist/server/future/route-matches/route-match.d.ts","./node_modules/next/dist/client/components/app-router-headers.d.ts","./node_modules/next/dist/server/request-meta.d.ts","./node_modules/next/dist/server/lib/revalidate.d.ts","./node_modules/next/dist/server/config-shared.d.ts","./node_modules/next/dist/server/base-http/index.d.ts","./node_modules/next/dist/server/api-utils/index.d.ts","./node_modules/next/dist/server/node-environment.d.ts","./node_modules/next/dist/server/require-hook.d.ts","./node_modules/next/dist/server/node-polyfill-crypto.d.ts","./node_modules/next/dist/lib/page-types.d.ts","./node_modules/next/dist/build/analysis/get-page-static-info.d.ts","./node_modules/next/dist/build/webpack/loaders/get-module-build-info.d.ts","./node_modules/next/dist/build/webpack/plugins/middleware-plugin.d.ts","./node_modules/next/dist/server/render-result.d.ts","./node_modules/next/dist/server/future/helpers/i18n-provider.d.ts","./node_modules/next/dist/server/web/next-url.d.ts","./node_modules/next/dist/compiled/@edge-runtime/cookies/index.d.ts","./node_modules/next/dist/server/web/spec-extension/cookies.d.ts","./node_modules/next/dist/server/web/spec-extension/request.d.ts","./node_modules/next/dist/server/web/spec-extension/fetch-event.d.ts","./node_modules/next/dist/server/web/spec-extension/response.d.ts","./node_modules/next/dist/server/web/types.d.ts","./node_modules/next/dist/lib/setup-exception-listeners.d.ts","./node_modules/next/dist/lib/constants.d.ts","./node_modules/next/dist/build/index.d.ts","./node_modules/next/dist/build/webpack/plugins/pages-manifest-plugin.d.ts","./node_modules/next/dist/shared/lib/router/utils/route-regex.d.ts","./node_modules/next/dist/shared/lib/router/utils/route-matcher.d.ts","./node_modules/next/dist/shared/lib/router/utils/parse-url.d.ts","./node_modules/next/dist/server/base-http/node.d.ts","./node_modules/next/dist/server/font-utils.d.ts","./node_modules/next/dist/build/webpack/plugins/flight-manifest-plugin.d.ts","./node_modules/next/dist/server/future/route-modules/route-module.d.ts","./node_modules/next/dist/shared/lib/deep-readonly.d.ts","./node_modules/next/dist/server/load-components.d.ts","./node_modules/next/dist/shared/lib/router/utils/middleware-route-matcher.d.ts","./node_modules/next/dist/build/webpack/plugins/next-font-manifest-plugin.d.ts","./node_modules/next/dist/server/future/route-definitions/locale-route-definition.d.ts","./node_modules/next/dist/server/future/route-definitions/pages-route-definition.d.ts","./node_modules/next/dist/shared/lib/mitt.d.ts","./node_modules/next/dist/client/with-router.d.ts","./node_modules/next/dist/client/router.d.ts","./node_modules/next/dist/client/route-loader.d.ts","./node_modules/next/dist/client/page-loader.d.ts","./node_modules/next/dist/shared/lib/bloom-filter.d.ts","./node_modules/next/dist/shared/lib/router/router.d.ts","./node_modules/next/dist/shared/lib/router-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/loadable-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/loadable.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/hooks-client-context.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.d.ts","./node_modules/next/dist/server/future/route-definitions/app-page-route-definition.d.ts","./node_modules/next/dist/shared/lib/modern-browserslist-target.d.ts","./node_modules/next/dist/shared/lib/constants.d.ts","./node_modules/next/dist/build/webpack/loaders/metadata/types.d.ts","./node_modules/next/dist/build/page-extensions-type.d.ts","./node_modules/next/dist/build/webpack/loaders/next-app-loader.d.ts","./node_modules/next/dist/server/lib/app-dir-module.d.ts","./node_modules/next/dist/server/response-cache/types.d.ts","./node_modules/next/dist/server/response-cache/index.d.ts","./node_modules/next/dist/server/lib/incremental-cache/index.d.ts","./node_modules/next/dist/client/components/hooks-server-context.d.ts","./node_modules/next/dist/server/app-render/dynamic-rendering.d.ts","./node_modules/next/dist/client/components/static-generation-async-storage-instance.d.ts","./node_modules/next/dist/client/components/static-generation-async-storage.external.d.ts","./node_modules/next/dist/server/web/spec-extension/adapters/request-cookies.d.ts","./node_modules/next/dist/server/async-storage/draft-mode-provider.d.ts","./node_modules/next/dist/server/web/spec-extension/adapters/headers.d.ts","./node_modules/next/dist/client/components/request-async-storage-instance.d.ts","./node_modules/next/dist/client/components/request-async-storage.external.d.ts","./node_modules/next/dist/server/app-render/create-error-handler.d.ts","./node_modules/next/dist/server/app-render/app-render.d.ts","./node_modules/next/dist/shared/lib/server-inserted-html.shared-runtime.d.ts","./node_modules/next/dist/shared/lib/amp-context.shared-runtime.d.ts","./node_modules/next/dist/server/future/route-modules/app-page/vendored/contexts/entrypoints.d.ts","./node_modules/next/dist/server/future/route-modules/app-page/module.compiled.d.ts","./node_modules/@types/react/jsx-runtime.d.ts","./node_modules/next/dist/client/components/error-boundary.d.ts","./node_modules/next/dist/client/components/router-reducer/create-initial-router-state.d.ts","./node_modules/next/dist/client/components/app-router.d.ts","./node_modules/next/dist/client/components/layout-router.d.ts","./node_modules/next/dist/client/components/render-from-template-context.d.ts","./node_modules/next/dist/client/components/action-async-storage-instance.d.ts","./node_modules/next/dist/client/components/action-async-storage.external.d.ts","./node_modules/next/dist/client/components/client-page.d.ts","./node_modules/next/dist/client/components/search-params.d.ts","./node_modules/next/dist/client/components/not-found-boundary.d.ts","./node_modules/next/dist/server/app-render/rsc/preloads.d.ts","./node_modules/next/dist/server/app-render/rsc/postpone.d.ts","./node_modules/next/dist/server/app-render/rsc/taint.d.ts","./node_modules/next/dist/server/app-render/entry-base.d.ts","./node_modules/next/dist/build/templates/app-page.d.ts","./node_modules/next/dist/server/future/route-modules/app-page/module.d.ts","./node_modules/next/dist/server/app-render/types.d.ts","./node_modules/next/dist/client/components/router-reducer/fetch-server-response.d.ts","./node_modules/next/dist/client/components/router-reducer/router-reducer-types.d.ts","./node_modules/next/dist/shared/lib/app-router-context.shared-runtime.d.ts","./node_modules/next/dist/server/future/route-modules/pages/vendored/contexts/entrypoints.d.ts","./node_modules/next/dist/server/future/route-modules/pages/module.compiled.d.ts","./node_modules/next/dist/build/templates/pages.d.ts","./node_modules/next/dist/server/future/route-modules/pages/module.d.ts","./node_modules/next/dist/server/render.d.ts","./node_modules/next/dist/server/future/route-definitions/pages-api-route-definition.d.ts","./node_modules/next/dist/server/future/route-matches/pages-api-route-match.d.ts","./node_modules/next/dist/server/future/route-matchers/route-matcher.d.ts","./node_modules/next/dist/server/future/route-matcher-providers/route-matcher-provider.d.ts","./node_modules/next/dist/server/future/route-matcher-managers/route-matcher-manager.d.ts","./node_modules/next/dist/server/future/normalizers/normalizer.d.ts","./node_modules/next/dist/server/future/normalizers/locale-route-normalizer.d.ts","./node_modules/next/dist/server/future/normalizers/request/pathname-normalizer.d.ts","./node_modules/next/dist/server/future/normalizers/request/suffix.d.ts","./node_modules/next/dist/server/future/normalizers/request/rsc.d.ts","./node_modules/next/dist/server/future/normalizers/request/prefix.d.ts","./node_modules/next/dist/server/future/normalizers/request/postponed.d.ts","./node_modules/next/dist/server/future/normalizers/request/action.d.ts","./node_modules/next/dist/server/future/normalizers/request/prefetch-rsc.d.ts","./node_modules/next/dist/server/future/normalizers/request/next-data.d.ts","./node_modules/next/dist/server/base-server.d.ts","./node_modules/next/dist/server/image-optimizer.d.ts","./node_modules/next/dist/server/next-server.d.ts","./node_modules/next/dist/lib/coalesced-function.d.ts","./node_modules/next/dist/server/lib/router-utils/types.d.ts","./node_modules/next/dist/trace/types.d.ts","./node_modules/next/dist/trace/trace.d.ts","./node_modules/next/dist/trace/shared.d.ts","./node_modules/next/dist/trace/index.d.ts","./node_modules/next/dist/build/load-jsconfig.d.ts","./node_modules/next/dist/build/webpack-config.d.ts","./node_modules/next/dist/build/webpack/plugins/define-env-plugin.d.ts","./node_modules/next/dist/build/swc/index.d.ts","./node_modules/next/dist/server/dev/parse-version-info.d.ts","./node_modules/next/dist/server/dev/hot-reloader-types.d.ts","./node_modules/next/dist/telemetry/storage.d.ts","./node_modules/next/dist/server/lib/types.d.ts","./node_modules/next/dist/server/lib/render-server.d.ts","./node_modules/next/dist/server/lib/router-server.d.ts","./node_modules/next/dist/shared/lib/router/utils/path-match.d.ts","./node_modules/next/dist/server/lib/router-utils/filesystem.d.ts","./node_modules/next/dist/server/lib/router-utils/setup-dev-bundler.d.ts","./node_modules/next/dist/server/lib/dev-bundler-service.d.ts","./node_modules/next/dist/server/dev/static-paths-worker.d.ts","./node_modules/next/dist/server/dev/next-dev-server.d.ts","./node_modules/next/dist/server/next.d.ts","./node_modules/next/dist/lib/metadata/types/alternative-urls-types.d.ts","./node_modules/next/dist/lib/metadata/types/extra-types.d.ts","./node_modules/next/dist/lib/metadata/types/metadata-types.d.ts","./node_modules/next/dist/lib/metadata/types/manifest-types.d.ts","./node_modules/next/dist/lib/metadata/types/opengraph-types.d.ts","./node_modules/next/dist/lib/metadata/types/twitter-types.d.ts","./node_modules/next/dist/lib/metadata/types/metadata-interface.d.ts","./node_modules/next/types/index.d.ts","./node_modules/next/dist/shared/lib/html-context.shared-runtime.d.ts","./node_modules/@next/env/dist/index.d.ts","./node_modules/next/dist/shared/lib/utils.d.ts","./node_modules/next/dist/pages/_app.d.ts","./node_modules/next/app.d.ts","./node_modules/next/dist/server/web/spec-extension/unstable-cache.d.ts","./node_modules/next/dist/server/web/spec-extension/revalidate.d.ts","./node_modules/next/dist/server/web/spec-extension/unstable-no-store.d.ts","./node_modules/next/cache.d.ts","./node_modules/next/dist/shared/lib/runtime-config.external.d.ts","./node_modules/next/config.d.ts","./node_modules/next/dist/pages/_document.d.ts","./node_modules/next/document.d.ts","./node_modules/next/dist/shared/lib/dynamic.d.ts","./node_modules/next/dynamic.d.ts","./node_modules/next/dist/pages/_error.d.ts","./node_modules/next/error.d.ts","./node_modules/next/dist/shared/lib/head.d.ts","./node_modules/next/head.d.ts","./node_modules/next/dist/client/components/draft-mode.d.ts","./node_modules/next/dist/client/components/headers.d.ts","./node_modules/next/headers.d.ts","./node_modules/next/dist/shared/lib/get-img-props.d.ts","./node_modules/next/dist/client/image-component.d.ts","./node_modules/next/dist/shared/lib/image-external.d.ts","./node_modules/next/image.d.ts","./node_modules/next/dist/client/link.d.ts","./node_modules/next/link.d.ts","./node_modules/next/dist/client/components/redirect-status-code.d.ts","./node_modules/next/dist/client/components/redirect.d.ts","./node_modules/next/dist/client/components/not-found.d.ts","./node_modules/next/dist/client/components/navigation.react-server.d.ts","./node_modules/next/dist/client/components/navigation.d.ts","./node_modules/next/navigation.d.ts","./node_modules/next/router.d.ts","./node_modules/next/dist/client/script.d.ts","./node_modules/next/script.d.ts","./node_modules/next/dist/server/web/spec-extension/user-agent.d.ts","./node_modules/next/dist/compiled/@edge-runtime/primitives/url.d.ts","./node_modules/next/dist/server/web/spec-extension/image-response.d.ts","./node_modules/next/dist/compiled/@vercel/og/satori/index.d.ts","./node_modules/next/dist/compiled/@vercel/og/emoji/index.d.ts","./node_modules/next/dist/compiled/@vercel/og/types.d.ts","./node_modules/next/server.d.ts","./node_modules/next/types/global.d.ts","./node_modules/next/types/compiled.d.ts","./node_modules/next/index.d.ts","./node_modules/next/image-types/global.d.ts","./node_modules/next/navigation-types/compat/navigation.d.ts","./next-env.d.ts","./node_modules/source-map-js/source-map.d.ts","./node_modules/postcss/lib/previous-map.d.ts","./node_modules/postcss/lib/input.d.ts","./node_modules/postcss/lib/css-syntax-error.d.ts","./node_modules/postcss/lib/declaration.d.ts","./node_modules/postcss/lib/root.d.ts","./node_modules/postcss/lib/warning.d.ts","./node_modules/postcss/lib/lazy-result.d.ts","./node_modules/postcss/lib/no-work-result.d.ts","./node_modules/postcss/lib/processor.d.ts","./node_modules/postcss/lib/result.d.ts","./node_modules/postcss/lib/document.d.ts","./node_modules/postcss/lib/rule.d.ts","./node_modules/postcss/lib/node.d.ts","./node_modules/postcss/lib/comment.d.ts","./node_modules/postcss/lib/container.d.ts","./node_modules/postcss/lib/at-rule.d.ts","./node_modules/postcss/lib/list.d.ts","./node_modules/postcss/lib/postcss.d.ts","./node_modules/tailwindcss/types/generated/corepluginlist.d.ts","./node_modules/tailwindcss/types/generated/colors.d.ts","./node_modules/tailwindcss/types/config.d.ts","./node_modules/tailwindcss/types/index.d.ts","./node_modules/@tailwindcss/typography/src/index.d.ts","./tailwind.config.ts","./node_modules/@jest/expect-utils/build/index.d.ts","./node_modules/jest-matcher-utils/node_modules/chalk/index.d.ts","./node_modules/@sinclair/typebox/typebox.d.ts","./node_modules/@jest/schemas/build/index.d.ts","./node_modules/jest-diff/node_modules/pretty-format/build/index.d.ts","./node_modules/jest-diff/build/index.d.ts","./node_modules/jest-matcher-utils/build/index.d.ts","./node_modules/expect/build/index.d.ts","./node_modules/@types/jest/node_modules/pretty-format/build/index.d.ts","./node_modules/@types/jest/index.d.ts","./node_modules/@types/aria-query/index.d.ts","./node_modules/@testing-library/jest-dom/types/matchers.d.ts","./node_modules/@testing-library/jest-dom/types/jest.d.ts","./node_modules/@testing-library/jest-dom/types/index.d.ts","./node_modules/pretty-format/build/types.d.ts","./node_modules/pretty-format/build/index.d.ts","./node_modules/styled-components/dist/sheet/types.d.ts","./node_modules/styled-components/dist/sheet/sheet.d.ts","./node_modules/styled-components/dist/sheet/index.d.ts","./node_modules/styled-components/dist/models/componentstyle.d.ts","./node_modules/styled-components/dist/models/themeprovider.d.ts","./node_modules/styled-components/dist/utils/createwarntoomanyclasses.d.ts","./node_modules/styled-components/dist/utils/domelements.d.ts","./node_modules/styled-components/dist/types.d.ts","./node_modules/styled-components/dist/constructors/constructwithoptions.d.ts","./node_modules/styled-components/dist/constructors/styled.d.ts","./node_modules/styled-components/dist/constants.d.ts","./node_modules/styled-components/dist/constructors/createglobalstyle.d.ts","./node_modules/styled-components/dist/constructors/css.d.ts","./node_modules/styled-components/dist/models/keyframes.d.ts","./node_modules/styled-components/dist/constructors/keyframes.d.ts","./node_modules/styled-components/dist/hoc/withtheme.d.ts","./node_modules/styled-components/dist/models/serverstylesheet.d.ts","./node_modules/@types/stylis/index.d.ts","./node_modules/styled-components/dist/models/stylesheetmanager.d.ts","./node_modules/styled-components/dist/utils/isstyledcomponent.d.ts","./node_modules/styled-components/dist/secretinternals.d.ts","./node_modules/styled-components/dist/base.d.ts","./node_modules/styled-components/dist/index.d.ts","./node_modules/jest-styled-components/typings/index.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/matches.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/wait-for.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/query-helpers.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/queries.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/get-queries-for-element.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/screen.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/wait-for-element-to-be-removed.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/get-node-text.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/events.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/pretty-dom.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/role-helpers.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/config.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/suggestions.d.ts","./node_modules/@testing-library/react/node_modules/@testing-library/dom/types/index.d.ts","./node_modules/@types/react-dom/test-utils/index.d.ts","./node_modules/@testing-library/react/types/index.d.ts","./src/setuptests.ts","./src/app/api/test/route.ts","./src/components/_lib/types.ts","./src/components/composite/content/content-card/types.ts","./src/components/composite/content/section-header/types.ts","./node_modules/lucide-react/dist/lucide-react.d.ts","./node_modules/clsx/clsx.d.ts","./node_modules/tailwind-merge/dist/types.d.ts","./src/lib/utils.ts","./src/components/ui/input/types.ts","./src/components/ui/input/index.tsx","./src/components/ui/select/types.ts","./src/components/ui/select/index.tsx","./src/components/ui/textarea/types.ts","./src/components/ui/textarea/index.tsx","./src/components/composite/form/form-field/types.ts","./src/components/composite/form/form-section/types.ts","./src/components/composite/form/form-submit/types.ts","./src/components/composite/navigation/nav-link/types.ts","./node_modules/@radix-ui/react-context/dist/index.d.ts","./node_modules/@radix-ui/react-primitive/dist/index.d.ts","./node_modules/@radix-ui/react-dismissable-layer/dist/index.d.ts","./node_modules/@radix-ui/react-visually-hidden/dist/index.d.ts","./node_modules/@radix-ui/react-navigation-menu/dist/index.d.ts","./src/components/composite/navigation/nav-menu/types.ts","./src/components/features/calculators/roicalculator/roi-calculator.styles.ts","./src/components/features/calculators/roicalculator/types.ts","./node_modules/class-variance-authority/dist/types.d.ts","./node_modules/class-variance-authority/dist/index.d.ts","./src/components/ui/alert.tsx","./node_modules/@radix-ui/react-slot/dist/index.d.ts","./src/components/ui/button/index.tsx","./src/components/ui/card/types.ts","./src/components/ui/card/index.tsx","./src/components/ui/index.ts","./src/components/ui/alert/types.ts","./src/components/ui/button/types.ts","./node_modules/@radix-ui/react-label/dist/index.d.ts","./node_modules/react-hook-form/dist/constants.d.ts","./node_modules/react-hook-form/dist/utils/createsubject.d.ts","./node_modules/react-hook-form/dist/types/events.d.ts","./node_modules/react-hook-form/dist/types/path/common.d.ts","./node_modules/react-hook-form/dist/types/path/eager.d.ts","./node_modules/react-hook-form/dist/types/path/index.d.ts","./node_modules/react-hook-form/dist/types/fieldarray.d.ts","./node_modules/react-hook-form/dist/types/resolvers.d.ts","./node_modules/react-hook-form/dist/types/form.d.ts","./node_modules/react-hook-form/dist/types/utils.d.ts","./node_modules/react-hook-form/dist/types/fields.d.ts","./node_modules/react-hook-form/dist/types/errors.d.ts","./node_modules/react-hook-form/dist/types/validator.d.ts","./node_modules/react-hook-form/dist/types/controller.d.ts","./node_modules/react-hook-form/dist/types/index.d.ts","./node_modules/react-hook-form/dist/controller.d.ts","./node_modules/react-hook-form/dist/form.d.ts","./node_modules/react-hook-form/dist/logic/appenderrors.d.ts","./node_modules/react-hook-form/dist/logic/index.d.ts","./node_modules/react-hook-form/dist/usecontroller.d.ts","./node_modules/react-hook-form/dist/usefieldarray.d.ts","./node_modules/react-hook-form/dist/useform.d.ts","./node_modules/react-hook-form/dist/useformcontext.d.ts","./node_modules/react-hook-form/dist/useformstate.d.ts","./node_modules/react-hook-form/dist/usewatch.d.ts","./node_modules/react-hook-form/dist/utils/get.d.ts","./node_modules/react-hook-form/dist/utils/set.d.ts","./node_modules/react-hook-form/dist/utils/index.d.ts","./node_modules/react-hook-form/dist/index.d.ts","./src/components/ui/form/types.ts","./src/components/ui/label/types.ts","./src/config/calendly.ts","./src/docs/token-mapping-guide.ts","./node_modules/zod/lib/helpers/typealiases.d.ts","./node_modules/zod/lib/helpers/util.d.ts","./node_modules/zod/lib/zoderror.d.ts","./node_modules/zod/lib/locales/en.d.ts","./node_modules/zod/lib/errors.d.ts","./node_modules/zod/lib/helpers/parseutil.d.ts","./node_modules/zod/lib/helpers/enumutil.d.ts","./node_modules/zod/lib/helpers/errorutil.d.ts","./node_modules/zod/lib/helpers/partialutil.d.ts","./node_modules/zod/lib/standard-schema.d.ts","./node_modules/zod/lib/types.d.ts","./node_modules/zod/lib/external.d.ts","./node_modules/zod/lib/index.d.ts","./node_modules/zod/index.d.ts","./node_modules/@hookform/resolvers/zod/dist/types.d.ts","./node_modules/@hookform/resolvers/zod/dist/zod.d.ts","./node_modules/@hookform/resolvers/zod/dist/index.d.ts","./src/hooks/use-form-validation.ts","./src/lib/analytics/types.ts","./src/types/blog.ts","./src/lib/api/blog.ts","./src/lib/api/case-studies.ts","./src/lib/api/services.ts","./src/lib/tracking/types.ts","./node_modules/@fingerprintjs/fingerprintjs/dist/fp.d.ts","./src/lib/tracking/devicefingerprint.ts","./src/lib/tracking/sessionmanager.ts","./src/lib/tracking/trackingservice.ts","./src/lib/tracking/index.ts","./node_modules/strict-event-emitter/lib/index.d.ts","./node_modules/msw/lib/core/utils/request/onunhandledrequest.d.ts","./node_modules/msw/lib/core/sharedoptions.d.ts","./node_modules/msw/lib/core/utils/internal/isiterable.d.ts","./node_modules/msw/lib/core/typeutils.d.ts","./node_modules/msw/lib/core/httpresponse-5sn2vnaj.d.ts","./node_modules/msw/lib/core/handlers/requesthandler.d.ts","./node_modules/@open-draft/logger/lib/index.d.ts","./node_modules/@mswjs/interceptors/lib/browser/interceptor-af98b768.d.ts","./node_modules/@mswjs/interceptors/lib/browser/interceptors/websocket/index.d.ts","./node_modules/msw/lib/core/utils/matching/matchrequesturl.d.ts","./node_modules/msw/lib/core/handlers/websockethandler.d.ts","./node_modules/msw/lib/core/utils/internal/disposable.d.ts","./node_modules/msw/lib/core/setupapi.d.ts","./node_modules/msw/lib/browser/index.d.ts","./node_modules/msw/lib/core/handlers/httphandler.d.ts","./node_modules/msw/lib/core/http.d.ts","./node_modules/graphql/version.d.ts","./node_modules/graphql/jsutils/maybe.d.ts","./node_modules/graphql/language/source.d.ts","./node_modules/graphql/jsutils/objmap.d.ts","./node_modules/graphql/jsutils/path.d.ts","./node_modules/graphql/jsutils/promiseorvalue.d.ts","./node_modules/graphql/language/kinds.d.ts","./node_modules/graphql/language/tokenkind.d.ts","./node_modules/graphql/language/ast.d.ts","./node_modules/graphql/language/location.d.ts","./node_modules/graphql/error/graphqlerror.d.ts","./node_modules/graphql/language/directivelocation.d.ts","./node_modules/graphql/type/directives.d.ts","./node_modules/graphql/type/schema.d.ts","./node_modules/graphql/type/definition.d.ts","./node_modules/graphql/execution/execute.d.ts","./node_modules/graphql/graphql.d.ts","./node_modules/graphql/type/scalars.d.ts","./node_modules/graphql/type/introspection.d.ts","./node_modules/graphql/type/validate.d.ts","./node_modules/graphql/type/assertname.d.ts","./node_modules/graphql/type/index.d.ts","./node_modules/graphql/language/printlocation.d.ts","./node_modules/graphql/language/lexer.d.ts","./node_modules/graphql/language/parser.d.ts","./node_modules/graphql/language/printer.d.ts","./node_modules/graphql/language/visitor.d.ts","./node_modules/graphql/language/predicates.d.ts","./node_modules/graphql/language/index.d.ts","./node_modules/graphql/execution/subscribe.d.ts","./node_modules/graphql/execution/values.d.ts","./node_modules/graphql/execution/index.d.ts","./node_modules/graphql/subscription/index.d.ts","./node_modules/graphql/utilities/typeinfo.d.ts","./node_modules/graphql/validation/validationcontext.d.ts","./node_modules/graphql/validation/validate.d.ts","./node_modules/graphql/validation/rules/maxintrospectiondepthrule.d.ts","./node_modules/graphql/validation/specifiedrules.d.ts","./node_modules/graphql/validation/rules/executabledefinitionsrule.d.ts","./node_modules/graphql/validation/rules/fieldsoncorrecttyperule.d.ts","./node_modules/graphql/validation/rules/fragmentsoncompositetypesrule.d.ts","./node_modules/graphql/validation/rules/knownargumentnamesrule.d.ts","./node_modules/graphql/validation/rules/knowndirectivesrule.d.ts","./node_modules/graphql/validation/rules/knownfragmentnamesrule.d.ts","./node_modules/graphql/validation/rules/knowntypenamesrule.d.ts","./node_modules/graphql/validation/rules/loneanonymousoperationrule.d.ts","./node_modules/graphql/validation/rules/nofragmentcyclesrule.d.ts","./node_modules/graphql/validation/rules/noundefinedvariablesrule.d.ts","./node_modules/graphql/validation/rules/nounusedfragmentsrule.d.ts","./node_modules/graphql/validation/rules/nounusedvariablesrule.d.ts","./node_modules/graphql/validation/rules/overlappingfieldscanbemergedrule.d.ts","./node_modules/graphql/validation/rules/possiblefragmentspreadsrule.d.ts","./node_modules/graphql/validation/rules/providedrequiredargumentsrule.d.ts","./node_modules/graphql/validation/rules/scalarleafsrule.d.ts","./node_modules/graphql/validation/rules/singlefieldsubscriptionsrule.d.ts","./node_modules/graphql/validation/rules/uniqueargumentnamesrule.d.ts","./node_modules/graphql/validation/rules/uniquedirectivesperlocationrule.d.ts","./node_modules/graphql/validation/rules/uniquefragmentnamesrule.d.ts","./node_modules/graphql/validation/rules/uniqueinputfieldnamesrule.d.ts","./node_modules/graphql/validation/rules/uniqueoperationnamesrule.d.ts","./node_modules/graphql/validation/rules/uniquevariablenamesrule.d.ts","./node_modules/graphql/validation/rules/valuesofcorrecttyperule.d.ts","./node_modules/graphql/validation/rules/variablesareinputtypesrule.d.ts","./node_modules/graphql/validation/rules/variablesinallowedpositionrule.d.ts","./node_modules/graphql/validation/rules/loneschemadefinitionrule.d.ts","./node_modules/graphql/validation/rules/uniqueoperationtypesrule.d.ts","./node_modules/graphql/validation/rules/uniquetypenamesrule.d.ts","./node_modules/graphql/validation/rules/uniqueenumvaluenamesrule.d.ts","./node_modules/graphql/validation/rules/uniquefielddefinitionnamesrule.d.ts","./node_modules/graphql/validation/rules/uniqueargumentdefinitionnamesrule.d.ts","./node_modules/graphql/validation/rules/uniquedirectivenamesrule.d.ts","./node_modules/graphql/validation/rules/possibletypeextensionsrule.d.ts","./node_modules/graphql/validation/rules/custom/nodeprecatedcustomrule.d.ts","./node_modules/graphql/validation/rules/custom/noschemaintrospectioncustomrule.d.ts","./node_modules/graphql/validation/index.d.ts","./node_modules/graphql/error/syntaxerror.d.ts","./node_modules/graphql/error/locatederror.d.ts","./node_modules/graphql/error/index.d.ts","./node_modules/graphql/utilities/getintrospectionquery.d.ts","./node_modules/graphql/utilities/getoperationast.d.ts","./node_modules/graphql/utilities/getoperationroottype.d.ts","./node_modules/graphql/utilities/introspectionfromschema.d.ts","./node_modules/graphql/utilities/buildclientschema.d.ts","./node_modules/graphql/utilities/buildastschema.d.ts","./node_modules/graphql/utilities/extendschema.d.ts","./node_modules/graphql/utilities/lexicographicsortschema.d.ts","./node_modules/graphql/utilities/printschema.d.ts","./node_modules/graphql/utilities/typefromast.d.ts","./node_modules/graphql/utilities/valuefromast.d.ts","./node_modules/graphql/utilities/valuefromastuntyped.d.ts","./node_modules/graphql/utilities/astfromvalue.d.ts","./node_modules/graphql/utilities/coerceinputvalue.d.ts","./node_modules/graphql/utilities/concatast.d.ts","./node_modules/graphql/utilities/separateoperations.d.ts","./node_modules/graphql/utilities/stripignoredcharacters.d.ts","./node_modules/graphql/utilities/typecomparators.d.ts","./node_modules/graphql/utilities/assertvalidname.d.ts","./node_modules/graphql/utilities/findbreakingchanges.d.ts","./node_modules/graphql/utilities/typedquerydocumentnode.d.ts","./node_modules/graphql/utilities/index.d.ts","./node_modules/graphql/index.d.ts","./node_modules/msw/lib/core/graphqlhandler-c5cuis_n.d.ts","./node_modules/msw/lib/core/graphql.d.ts","./node_modules/msw/lib/core/ws.d.ts","./node_modules/msw/lib/core/utils/handlerequest.d.ts","./node_modules/msw/lib/core/getresponse.d.ts","./node_modules/msw/lib/core/utils/url/cleanurl.d.ts","./node_modules/msw/lib/core/delay.d.ts","./node_modules/msw/lib/core/bypass.d.ts","./node_modules/msw/lib/core/passthrough.d.ts","./node_modules/msw/lib/core/index.d.ts","./src/mocks/handlers.ts","./src/mocks/browser.ts","./node_modules/msw/node_modules/type-fest/source/primitive.d.ts","./node_modules/msw/node_modules/type-fest/source/typed-array.d.ts","./node_modules/msw/node_modules/type-fest/source/basic.d.ts","./node_modules/msw/node_modules/type-fest/source/observable-like.d.ts","./node_modules/msw/node_modules/type-fest/source/keys-of-union.d.ts","./node_modules/msw/node_modules/type-fest/source/distributed-omit.d.ts","./node_modules/msw/node_modules/type-fest/source/distributed-pick.d.ts","./node_modules/msw/node_modules/type-fest/source/empty-object.d.ts","./node_modules/msw/node_modules/type-fest/source/if-empty-object.d.ts","./node_modules/msw/node_modules/type-fest/source/required-keys-of.d.ts","./node_modules/msw/node_modules/type-fest/source/has-required-keys.d.ts","./node_modules/msw/node_modules/type-fest/source/is-equal.d.ts","./node_modules/msw/node_modules/type-fest/source/except.d.ts","./node_modules/msw/node_modules/type-fest/source/require-at-least-one.d.ts","./node_modules/msw/node_modules/type-fest/source/non-empty-object.d.ts","./node_modules/msw/node_modules/type-fest/source/unknown-record.d.ts","./node_modules/msw/node_modules/type-fest/source/unknown-array.d.ts","./node_modules/msw/node_modules/type-fest/source/tagged-union.d.ts","./node_modules/msw/node_modules/type-fest/source/simplify.d.ts","./node_modules/msw/node_modules/type-fest/source/writable.d.ts","./node_modules/msw/node_modules/type-fest/source/internal/array.d.ts","./node_modules/msw/node_modules/type-fest/source/internal/characters.d.ts","./node_modules/msw/node_modules/type-fest/source/is-any.d.ts","./node_modules/msw/node_modules/type-fest/source/is-float.d.ts","./node_modules/msw/node_modules/type-fest/source/is-integer.d.ts","./node_modules/msw/node_modules/type-fest/source/numeric.d.ts","./node_modules/msw/node_modules/type-fest/source/is-never.d.ts","./node_modules/msw/node_modules/type-fest/source/is-literal.d.ts","./node_modules/msw/node_modules/type-fest/source/trim.d.ts","./node_modules/msw/node_modules/type-fest/source/and.d.ts","./node_modules/msw/node_modules/type-fest/source/or.d.ts","./node_modules/msw/node_modules/type-fest/source/greater-than.d.ts","./node_modules/msw/node_modules/type-fest/source/greater-than-or-equal.d.ts","./node_modules/msw/node_modules/type-fest/source/less-than.d.ts","./node_modules/msw/node_modules/type-fest/source/internal/tuple.d.ts","./node_modules/msw/node_modules/type-fest/source/internal/string.d.ts","./node_modules/msw/node_modules/type-fest/source/internal/keys.d.ts","./node_modules/msw/node_modules/type-fest/source/internal/numeric.d.ts","./node_modules/msw/node_modules/type-fest/source/internal/type.d.ts","./node_modules/msw/node_modules/type-fest/source/internal/object.d.ts","./node_modules/msw/node_modules/type-fest/source/internal/index.d.ts","./node_modules/msw/node_modules/type-fest/source/writable-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/omit-index-signature.d.ts","./node_modules/msw/node_modules/type-fest/source/pick-index-signature.d.ts","./node_modules/msw/node_modules/type-fest/source/merge.d.ts","./node_modules/msw/node_modules/type-fest/source/conditional-simplify.d.ts","./node_modules/msw/node_modules/type-fest/source/non-empty-tuple.d.ts","./node_modules/msw/node_modules/type-fest/source/array-tail.d.ts","./node_modules/msw/node_modules/type-fest/source/enforce-optional.d.ts","./node_modules/msw/node_modules/type-fest/source/simplify-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/merge-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/merge-exclusive.d.ts","./node_modules/msw/node_modules/type-fest/source/require-exactly-one.d.ts","./node_modules/msw/node_modules/type-fest/source/require-all-or-none.d.ts","./node_modules/msw/node_modules/type-fest/source/require-one-or-none.d.ts","./node_modules/msw/node_modules/type-fest/source/single-key-object.d.ts","./node_modules/msw/node_modules/type-fest/source/partial-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/required-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/sum.d.ts","./node_modules/msw/node_modules/type-fest/source/subtract.d.ts","./node_modules/msw/node_modules/type-fest/source/paths.d.ts","./node_modules/msw/node_modules/type-fest/source/union-to-intersection.d.ts","./node_modules/msw/node_modules/type-fest/source/pick-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/array-splice.d.ts","./node_modules/msw/node_modules/type-fest/source/literal-union.d.ts","./node_modules/msw/node_modules/type-fest/source/shared-union-fields-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/omit-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/is-null.d.ts","./node_modules/msw/node_modules/type-fest/source/is-unknown.d.ts","./node_modules/msw/node_modules/type-fest/source/if-unknown.d.ts","./node_modules/msw/node_modules/type-fest/source/partial-on-undefined-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/undefined-on-partial-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/readonly-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/promisable.d.ts","./node_modules/msw/node_modules/type-fest/source/arrayable.d.ts","./node_modules/msw/node_modules/type-fest/source/tagged.d.ts","./node_modules/msw/node_modules/type-fest/source/invariant-of.d.ts","./node_modules/msw/node_modules/type-fest/source/set-optional.d.ts","./node_modules/msw/node_modules/type-fest/source/set-readonly.d.ts","./node_modules/msw/node_modules/type-fest/source/set-required.d.ts","./node_modules/msw/node_modules/type-fest/source/set-non-nullable.d.ts","./node_modules/msw/node_modules/type-fest/source/value-of.d.ts","./node_modules/msw/node_modules/type-fest/source/async-return-type.d.ts","./node_modules/msw/node_modules/type-fest/source/if-never.d.ts","./node_modules/msw/node_modules/type-fest/source/conditional-keys.d.ts","./node_modules/msw/node_modules/type-fest/source/conditional-except.d.ts","./node_modules/msw/node_modules/type-fest/source/conditional-pick.d.ts","./node_modules/msw/node_modules/type-fest/source/conditional-pick-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/stringified.d.ts","./node_modules/msw/node_modules/type-fest/source/join.d.ts","./node_modules/msw/node_modules/type-fest/source/less-than-or-equal.d.ts","./node_modules/msw/node_modules/type-fest/source/array-slice.d.ts","./node_modules/msw/node_modules/type-fest/source/string-slice.d.ts","./node_modules/msw/node_modules/type-fest/source/fixed-length-array.d.ts","./node_modules/msw/node_modules/type-fest/source/multidimensional-array.d.ts","./node_modules/msw/node_modules/type-fest/source/multidimensional-readonly-array.d.ts","./node_modules/msw/node_modules/type-fest/source/iterable-element.d.ts","./node_modules/msw/node_modules/type-fest/source/entry.d.ts","./node_modules/msw/node_modules/type-fest/source/entries.d.ts","./node_modules/msw/node_modules/type-fest/source/set-return-type.d.ts","./node_modules/msw/node_modules/type-fest/source/set-parameter-type.d.ts","./node_modules/msw/node_modules/type-fest/source/asyncify.d.ts","./node_modules/msw/node_modules/type-fest/source/jsonify.d.ts","./node_modules/msw/node_modules/type-fest/source/jsonifiable.d.ts","./node_modules/msw/node_modules/type-fest/source/find-global-type.d.ts","./node_modules/msw/node_modules/type-fest/source/structured-cloneable.d.ts","./node_modules/msw/node_modules/type-fest/source/schema.d.ts","./node_modules/msw/node_modules/type-fest/source/literal-to-primitive.d.ts","./node_modules/msw/node_modules/type-fest/source/literal-to-primitive-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/string-key-of.d.ts","./node_modules/msw/node_modules/type-fest/source/exact.d.ts","./node_modules/msw/node_modules/type-fest/source/readonly-tuple.d.ts","./node_modules/msw/node_modules/type-fest/source/optional-keys-of.d.ts","./node_modules/msw/node_modules/type-fest/source/override-properties.d.ts","./node_modules/msw/node_modules/type-fest/source/has-optional-keys.d.ts","./node_modules/msw/node_modules/type-fest/source/readonly-keys-of.d.ts","./node_modules/msw/node_modules/type-fest/source/has-readonly-keys.d.ts","./node_modules/msw/node_modules/type-fest/source/writable-keys-of.d.ts","./node_modules/msw/node_modules/type-fest/source/has-writable-keys.d.ts","./node_modules/msw/node_modules/type-fest/source/spread.d.ts","./node_modules/msw/node_modules/type-fest/source/tuple-to-union.d.ts","./node_modules/msw/node_modules/type-fest/source/union-to-tuple.d.ts","./node_modules/msw/node_modules/type-fest/source/int-range.d.ts","./node_modules/msw/node_modules/type-fest/source/int-closed-range.d.ts","./node_modules/msw/node_modules/type-fest/source/if-any.d.ts","./node_modules/msw/node_modules/type-fest/source/array-indices.d.ts","./node_modules/msw/node_modules/type-fest/source/array-values.d.ts","./node_modules/msw/node_modules/type-fest/source/set-field-type.d.ts","./node_modules/msw/node_modules/type-fest/source/shared-union-fields.d.ts","./node_modules/msw/node_modules/type-fest/source/if-null.d.ts","./node_modules/msw/node_modules/type-fest/source/words.d.ts","./node_modules/msw/node_modules/type-fest/source/camel-case.d.ts","./node_modules/msw/node_modules/type-fest/source/camel-cased-properties.d.ts","./node_modules/msw/node_modules/type-fest/source/camel-cased-properties-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/delimiter-case.d.ts","./node_modules/msw/node_modules/type-fest/source/kebab-case.d.ts","./node_modules/msw/node_modules/type-fest/source/delimiter-cased-properties.d.ts","./node_modules/msw/node_modules/type-fest/source/kebab-cased-properties.d.ts","./node_modules/msw/node_modules/type-fest/source/delimiter-cased-properties-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/kebab-cased-properties-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/pascal-case.d.ts","./node_modules/msw/node_modules/type-fest/source/pascal-cased-properties.d.ts","./node_modules/msw/node_modules/type-fest/source/pascal-cased-properties-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/snake-case.d.ts","./node_modules/msw/node_modules/type-fest/source/snake-cased-properties.d.ts","./node_modules/msw/node_modules/type-fest/source/snake-cased-properties-deep.d.ts","./node_modules/msw/node_modules/type-fest/source/includes.d.ts","./node_modules/msw/node_modules/type-fest/source/screaming-snake-case.d.ts","./node_modules/msw/node_modules/type-fest/source/split.d.ts","./node_modules/msw/node_modules/type-fest/source/replace.d.ts","./node_modules/msw/node_modules/type-fest/source/string-repeat.d.ts","./node_modules/msw/node_modules/type-fest/source/get.d.ts","./node_modules/msw/node_modules/type-fest/source/last-array-element.d.ts","./node_modules/msw/node_modules/type-fest/source/global-this.d.ts","./node_modules/msw/node_modules/type-fest/source/package-json.d.ts","./node_modules/msw/node_modules/type-fest/source/tsconfig-json.d.ts","./node_modules/msw/node_modules/type-fest/index.d.ts","./node_modules/@open-draft/deferred-promise/build/index.d.ts","./node_modules/@mswjs/interceptors/lib/node/interceptor-436630be.d.ts","./node_modules/@mswjs/interceptors/lib/node/batchinterceptor-67bf41ba.d.ts","./node_modules/@mswjs/interceptors/lib/node/index.d.ts","./node_modules/msw/lib/node/index.d.ts","./src/mocks/server.ts","./src/styles/tokens/colors.ts","./src/styles/tokens/typography.ts","./src/styles/tokens/spacing.ts","./src/styles/tokens/animation.ts","./src/styles/tokens/index.ts","./src/styles/theme/themes.ts","./src/styles/global/globalstyles.ts","./src/styles/tokens/__tests__/animation.test.ts","./src/test/setup.ts","./src/test/setup/browser-mocks.ts","./src/test/setup/global-polyfills.ts","./src/test/setup/jest.setup.ts","./src/types/calendly.d.ts","./src/types/newsletter.ts","./src/types/window.d.ts","./src/utils/api.ts","./node_modules/next/dist/compiled/@next/font/dist/types.d.ts","./node_modules/next/dist/compiled/@next/font/dist/google/index.d.ts","./node_modules/next/font/google/index.d.ts","./src/components/layout/header.tsx","./src/components/layout/footer.tsx","./src/components/providers/trackingprovider.tsx","./src/app/layout.tsx","./src/components/marketing/home/featured-insight.tsx","./src/components/marketing/home/enhanced-features-section.tsx","./src/components/marketing/newsletter/newsletterbanner.tsx","./src/components/layout/layout.tsx","./src/components/features/booking/bookdiscoverybutton.tsx","./node_modules/motion-utils/dist/index.d.ts","./node_modules/motion-dom/dist/index.d.ts","./node_modules/framer-motion/dist/index.d.ts","./node_modules/countup.js/dist/countup.d.ts","./node_modules/react-countup/build/types.d.ts","./node_modules/react-countup/build/countup.d.ts","./node_modules/react-countup/build/usecountup.d.ts","./node_modules/react-countup/build/index.d.ts","./src/components/marketing/home/animatedmetrics.tsx","./src/components/marketing/home/geometricpatterns.tsx","./src/app/page.tsx","./src/app/(marketing)/blog/error.tsx","./src/components/marketing/blog/blog-image.tsx","./src/lib/analytics.tsx","./src/components/marketing/blog/blog-card.tsx","./src/components/marketing/blog/blog-list.tsx","./src/components/marketing/blog/blog-sidebar.tsx","./src/components/marketing/blog/blog-search.tsx","./src/components/marketing/blog/blog-loading.tsx","./src/components/marketing/blog/blog-analytics.tsx","./src/components/marketing/blog/blog-breadcrumb.tsx","./src/app/(marketing)/blog/page.tsx","./src/app/(marketing)/blog/[slug]/loading.tsx","./src/app/(marketing)/blog/[slug]/not-found.tsx","./src/components/marketing/newsletter/newsletter-content-end.tsx","./src/app/(marketing)/blog/[slug]/page.tsx","./src/components/marketing/case-studies/case-study-loading.tsx","./src/app/(marketing)/case-studies/loading.tsx","./src/components/marketing/case-studies/case-study-error-boundary.tsx","./src/components/marketing/case-studies/case-study-analytics.tsx","./src/components/marketing/case-studies/case-study-card.tsx","./src/components/marketing/case-studies/case-study-list.tsx","./src/components/marketing/case-studies/case-study-search.tsx","./src/app/(marketing)/case-studies/page.tsx","./src/app/(marketing)/case-studies/[slug]/loading.tsx","./src/app/(marketing)/case-studies/[slug]/not-found.tsx","./src/app/(marketing)/case-studies/[slug]/page.tsx","./src/app/about/page.tsx","./src/app/api/backend-test/route.tsx","./src/app/api/newsletter/subscribe/route.tsx","./src/components/contact/contactform.tsx","./src/components/contact/faq.tsx","./src/components/contact/contactinfo.tsx","./src/app/contact/page.tsx","./src/components/marketing/services/service-breadcrumb.tsx","./src/app/services/page.tsx","./src/app/services/[slug]/not-found.tsx","./src/app/services/[slug]/page.tsx","./src/components/calculators/airoicalculator.tsx","./src/app/services/ai-readiness/page.tsx","./src/app/services/data-strategy/page.tsx","./src/app/services/fractional-cdo/page.tsx","./src/app/test/page.tsx","./src/components/test/trackingtest.tsx","./src/app/test-tracking/page.tsx","./node_modules/next-themes/dist/types.d.ts","./node_modules/next-themes/dist/index.d.ts","./src/components/theme-provider.tsx","./src/components/composite/content/content-card/index.tsx","./src/components/composite/content/content-card/content-card.test.tsx","./src/components/composite/content/section-header/index.tsx","./src/components/composite/content/section-header/section-header.test.tsx","./src/components/ui/form/index.tsx","./src/components/composite/form/form-field/index.tsx","./src/components/composite/form/form-field/examples.tsx","./node_modules/@testing-library/user-event/dist/types/event/eventmap.d.ts","./node_modules/@testing-library/user-event/dist/types/event/types.d.ts","./node_modules/@testing-library/user-event/dist/types/event/dispatchevent.d.ts","./node_modules/@testing-library/user-event/dist/types/event/focus.d.ts","./node_modules/@testing-library/user-event/dist/types/event/input.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/click/isclickableinput.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/datatransfer/blob.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/datatransfer/datatransfer.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/datatransfer/filelist.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/datatransfer/clipboard.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/edit/timevalue.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/edit/iscontenteditable.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/edit/iseditable.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/edit/maxlength.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/edit/setfiles.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/focus/cursor.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/focus/getactiveelement.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/focus/gettabdestination.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/focus/isfocusable.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/focus/selection.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/focus/selector.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/keydef/readnextdescriptor.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/cloneevent.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/findclosest.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/getdocumentfromnode.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/gettreediff.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/getwindow.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/isdescendantorself.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/iselementtype.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/isvisible.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/isdisabled.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/level.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/misc/wait.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/pointer/csspointerevents.d.ts","./node_modules/@testing-library/user-event/dist/types/utils/index.d.ts","./node_modules/@testing-library/user-event/dist/types/document/ui.d.ts","./node_modules/@testing-library/user-event/dist/types/document/getvalueortextcontent.d.ts","./node_modules/@testing-library/user-event/dist/types/document/copyselection.d.ts","./node_modules/@testing-library/user-event/dist/types/document/trackvalue.d.ts","./node_modules/@testing-library/user-event/dist/types/document/index.d.ts","./node_modules/@testing-library/user-event/dist/types/event/selection/getinputrange.d.ts","./node_modules/@testing-library/user-event/dist/types/event/selection/modifyselection.d.ts","./node_modules/@testing-library/user-event/dist/types/event/selection/moveselection.d.ts","./node_modules/@testing-library/user-event/dist/types/event/selection/setselectionpermouse.d.ts","./node_modules/@testing-library/user-event/dist/types/event/selection/modifyselectionpermouse.d.ts","./node_modules/@testing-library/user-event/dist/types/event/selection/selectall.d.ts","./node_modules/@testing-library/user-event/dist/types/event/selection/setselectionrange.d.ts","./node_modules/@testing-library/user-event/dist/types/event/selection/setselection.d.ts","./node_modules/@testing-library/user-event/dist/types/event/selection/updateselectiononfocus.d.ts","./node_modules/@testing-library/user-event/dist/types/event/selection/index.d.ts","./node_modules/@testing-library/user-event/dist/types/event/index.d.ts","./node_modules/@testing-library/user-event/dist/types/system/pointer/buttons.d.ts","./node_modules/@testing-library/user-event/dist/types/system/pointer/shared.d.ts","./node_modules/@testing-library/user-event/dist/types/system/pointer/index.d.ts","./node_modules/@testing-library/user-event/dist/types/system/index.d.ts","./node_modules/@testing-library/user-event/dist/types/system/keyboard.d.ts","./node_modules/@testing-library/user-event/dist/types/options.d.ts","./node_modules/@testing-library/user-event/dist/types/convenience/click.d.ts","./node_modules/@testing-library/user-event/dist/types/convenience/hover.d.ts","./node_modules/@testing-library/user-event/dist/types/convenience/tab.d.ts","./node_modules/@testing-library/user-event/dist/types/convenience/index.d.ts","./node_modules/@testing-library/user-event/dist/types/keyboard/index.d.ts","./node_modules/@testing-library/user-event/dist/types/clipboard/copy.d.ts","./node_modules/@testing-library/user-event/dist/types/clipboard/cut.d.ts","./node_modules/@testing-library/user-event/dist/types/clipboard/paste.d.ts","./node_modules/@testing-library/user-event/dist/types/clipboard/index.d.ts","./node_modules/@testing-library/user-event/dist/types/pointer/index.d.ts","./node_modules/@testing-library/user-event/dist/types/utility/clear.d.ts","./node_modules/@testing-library/user-event/dist/types/utility/selectoptions.d.ts","./node_modules/@testing-library/user-event/dist/types/utility/type.d.ts","./node_modules/@testing-library/user-event/dist/types/utility/upload.d.ts","./node_modules/@testing-library/user-event/dist/types/utility/index.d.ts","./node_modules/@testing-library/user-event/dist/types/setup/api.d.ts","./node_modules/@testing-library/user-event/dist/types/setup/directapi.d.ts","./node_modules/@testing-library/user-event/dist/types/setup/setup.d.ts","./node_modules/@testing-library/user-event/dist/types/setup/index.d.ts","./node_modules/@testing-library/user-event/dist/types/index.d.ts","./src/test/utils/form.tsx","./src/components/composite/form/form-field/form-field.integration.test.tsx","./src/components/composite/form/form-field/form-field.test.tsx","./src/components/composite/form/form-section/index.tsx","./src/components/composite/form/form-submit/index.tsx","./src/components/composite/navigation/nav-link/index.tsx","./src/components/composite/navigation/nav-link/nav-link.test.tsx","./src/components/ui/navigation-menu/index.tsx","./src/components/composite/navigation/nav-menu/index.tsx","./src/components/composite/navigation/nav-menu/nav-menu.test.tsx","./src/components/examples/signup-form.tsx","./src/components/features/booking/bookdiscoverycall.tsx","./src/components/ui/label/index.tsx","./src/components/features/calculators/roicalculator/index.tsx","./src/components/features/calculators/roicalculator/roi-calculator.test.tsx","./src/components/landing-page/sections/hero.tsx","./src/components/landing-page/sections/valueprops.tsx","./src/components/landing-page/sections/ctadownload.tsx","./src/components/landing-page/landingpage.tsx","./src/components/layout/navigation-menu.tsx","./src/components/marketing/blog/blog-error-boundary.tsx","./src/components/marketing/case-studies/case-study-pagination.tsx","./src/components/marketing/home/0ld_geometricpatterns.tsx","./src/components/ui/alert/index.tsx","./src/components/ui/alert/alert.test.tsx","./src/components/ui/card/card.test.tsx","./src/components/ui/form/form.test.tsx","./src/components/ui/form/__tests__/test-utils.tsx","./src/components/ui/input/input.test.tsx","./src/components/ui/label/label.test.tsx","./src/components/ui/select/select.test.tsx","./src/lib/analytics/index.tsx","./src/lib/utils/image.tsx","./src/pages/[slug].tsx","./src/styles/__tests__/globalstyles.test.tsx","./src/styles/__tests__/themes.test.tsx","./src/styles/__tests__/tokens.test.tsx","./src/styles/theme/themeprovider.tsx","./src/test/test-utils.tsx","./src/test/components/simpletest.tsx","./src/test/unit/components/button.test.tsx","./src/test/unit/components/form.test.tsx","./src/test/utils/test-utils.tsx","./src/utils/form.tsx","./node_modules/@babel/types/lib/index.d.ts","./node_modules/@types/babel__generator/index.d.ts","./node_modules/@babel/parser/typings/babel-parser.d.ts","./node_modules/@types/babel__template/index.d.ts","./node_modules/@types/babel__traverse/index.d.ts","./node_modules/@types/babel__core/index.d.ts","./node_modules/@types/connect/index.d.ts","./node_modules/@types/body-parser/index.d.ts","./node_modules/@types/busboy/index.d.ts","./node_modules/@types/cookie/index.d.ts","./node_modules/@types/estree/index.d.ts","./node_modules/@types/json-schema/index.d.ts","./node_modules/@types/eslint/use-at-your-own-risk.d.ts","./node_modules/@types/eslint/index.d.ts","./node_modules/@types/eslint-scope/index.d.ts","./node_modules/@types/mime/index.d.ts","./node_modules/@types/send/index.d.ts","./node_modules/@types/qs/index.d.ts","./node_modules/@types/range-parser/index.d.ts","./node_modules/@types/express-serve-static-core/index.d.ts","./node_modules/@types/http-errors/index.d.ts","./node_modules/@types/serve-static/index.d.ts","./node_modules/@types/express/index.d.ts","./node_modules/@types/graceful-fs/index.d.ts","./node_modules/@types/hoist-non-react-statics/index.d.ts","./node_modules/@types/istanbul-lib-coverage/index.d.ts","./node_modules/@types/istanbul-lib-report/index.d.ts","./node_modules/@types/istanbul-reports/index.d.ts","./node_modules/parse5/dist/common/html.d.ts","./node_modules/parse5/dist/common/token.d.ts","./node_modules/parse5/dist/common/error-codes.d.ts","./node_modules/parse5/dist/tokenizer/preprocessor.d.ts","./node_modules/entities/lib/generated/decode-data-html.d.ts","./node_modules/entities/lib/generated/decode-data-xml.d.ts","./node_modules/entities/lib/decode_codepoint.d.ts","./node_modules/entities/lib/decode.d.ts","./node_modules/parse5/dist/tokenizer/index.d.ts","./node_modules/parse5/dist/tree-adapters/interface.d.ts","./node_modules/parse5/dist/parser/open-element-stack.d.ts","./node_modules/parse5/dist/parser/formatting-element-list.d.ts","./node_modules/parse5/dist/parser/index.d.ts","./node_modules/parse5/dist/tree-adapters/default.d.ts","./node_modules/parse5/dist/serializer/index.d.ts","./node_modules/parse5/dist/common/foreign-content.d.ts","./node_modules/parse5/dist/index.d.ts","./node_modules/@types/tough-cookie/index.d.ts","./node_modules/@types/jsdom/base.d.ts","./node_modules/@types/jsdom/index.d.ts","./node_modules/@types/json5/index.d.ts","./node_modules/@types/lodash/common/common.d.ts","./node_modules/@types/lodash/common/array.d.ts","./node_modules/@types/lodash/common/collection.d.ts","./node_modules/@types/lodash/common/date.d.ts","./node_modules/@types/lodash/common/function.d.ts","./node_modules/@types/lodash/common/lang.d.ts","./node_modules/@types/lodash/common/math.d.ts","./node_modules/@types/lodash/common/number.d.ts","./node_modules/@types/lodash/common/object.d.ts","./node_modules/@types/lodash/common/seq.d.ts","./node_modules/@types/lodash/common/string.d.ts","./node_modules/@types/lodash/common/util.d.ts","./node_modules/@types/lodash/index.d.ts","./node_modules/form-data/index.d.ts","./node_modules/@types/node-fetch/externals.d.ts","./node_modules/@types/node-fetch/index.d.ts","./node_modules/@types/semver/classes/semver.d.ts","./node_modules/@types/semver/functions/parse.d.ts","./node_modules/@types/semver/functions/valid.d.ts","./node_modules/@types/semver/functions/clean.d.ts","./node_modules/@types/semver/functions/inc.d.ts","./node_modules/@types/semver/functions/diff.d.ts","./node_modules/@types/semver/functions/major.d.ts","./node_modules/@types/semver/functions/minor.d.ts","./node_modules/@types/semver/functions/patch.d.ts","./node_modules/@types/semver/functions/prerelease.d.ts","./node_modules/@types/semver/functions/compare.d.ts","./node_modules/@types/semver/functions/rcompare.d.ts","./node_modules/@types/semver/functions/compare-loose.d.ts","./node_modules/@types/semver/functions/compare-build.d.ts","./node_modules/@types/semver/functions/sort.d.ts","./node_modules/@types/semver/functions/rsort.d.ts","./node_modules/@types/semver/functions/gt.d.ts","./node_modules/@types/semver/functions/lt.d.ts","./node_modules/@types/semver/functions/eq.d.ts","./node_modules/@types/semver/functions/neq.d.ts","./node_modules/@types/semver/functions/gte.d.ts","./node_modules/@types/semver/functions/lte.d.ts","./node_modules/@types/semver/functions/cmp.d.ts","./node_modules/@types/semver/functions/coerce.d.ts","./node_modules/@types/semver/classes/comparator.d.ts","./node_modules/@types/semver/classes/range.d.ts","./node_modules/@types/semver/functions/satisfies.d.ts","./node_modules/@types/semver/ranges/max-satisfying.d.ts","./node_modules/@types/semver/ranges/min-satisfying.d.ts","./node_modules/@types/semver/ranges/to-comparators.d.ts","./node_modules/@types/semver/ranges/min-version.d.ts","./node_modules/@types/semver/ranges/valid.d.ts","./node_modules/@types/semver/ranges/outside.d.ts","./node_modules/@types/semver/ranges/gtr.d.ts","./node_modules/@types/semver/ranges/ltr.d.ts","./node_modules/@types/semver/ranges/intersects.d.ts","./node_modules/@types/semver/ranges/simplify.d.ts","./node_modules/@types/semver/ranges/subset.d.ts","./node_modules/@types/semver/internals/identifiers.d.ts","./node_modules/@types/semver/index.d.ts","./node_modules/@types/stack-utils/index.d.ts","./node_modules/@types/statuses/index.d.ts","./node_modules/@types/styled-components/index.d.ts","./node_modules/@types/yargs-parser/index.d.ts","./node_modules/@types/yargs/index.d.ts"],"fileIdsList":[[95,138,401,402,403],[95,138,1093],[95,138],[95,138,571,572],[95,138,552,570],[95,138,571],[95,138,432],[95,138,586,593],[95,138,586,593,594],[95,138,586,874],[95,138,586,593,873,874,875],[95,138,586,593,873],[83,95,138],[83,95,138,506],[83,95,138,505,506,507,508],[83,95,138,280],[95,138,442],[95,138,439,441],[95,138,440],[95,138,473],[95,138,470,471,472,473,474,475,476,477,478,479,480,481,482],[95,138,445],[95,138,470,471,472],[95,138,470,471],[95,138,445,473,474],[95,138,471],[95,138,483,484],[95,138,1047],[95,138,1034,1035,1036],[95,138,1029,1030,1031],[95,138,1007,1008,1009,1010],[95,138,973,1047],[95,138,973],[95,138,973,974,975,976,1021],[95,138,1011],[95,138,1006,1012,1013,1014,1015,1016,1017,1018,1019,1020],[95,138,1021],[95,138,972],[95,138,1025,1027,1028,1046,1047],[95,138,1025,1027],[95,138,1022,1025,1047],[95,138,1032,1033,1037,1038,1043],[95,138,1026,1028,1038,1046],[95,138,1045,1046],[95,138,1022,1026,1028,1044,1045],[95,138,1026,1047],[95,138,1024],[95,138,1024,1026,1047],[95,138,1022,1023],[95,138,1039,1040,1041,1042],[95,138,1028,1047],[95,138,983],[95,138,977,984],[95,138,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005],[95,138,1003,1047],[95,138,1093,1094,1095,1096,1097],[95,138,1093,1095],[95,138,153,187,1099],[95,138,153,169,187],[95,138,153,187],[95,138,1103,1106],[95,138,1103,1104,1105],[95,138,1106],[95,138,150,153,187,1109,1110,1111],[95,138,1100,1110,1112,1114],[95,138,151,187],[95,138,1118],[95,138,1119],[95,138,434,437],[95,138,433],[95,138,150,183,187,1137,1138,1140],[95,138,1139],[95,138,1142,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154],[95,138,1142,1143,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154],[95,138,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154],[95,138,1142,1143,1144,1146,1147,1148,1149,1150,1151,1152,1153,1154],[95,138,1142,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154],[95,138,1142,1143,1144,1145,1146,1148,1149,1150,1151,1152,1153,1154],[95,138,1142,1143,1144,1145,1146,1147,1149,1150,1151,1152,1153,1154],[95,138,1142,1143,1144,1145,1146,1147,1148,1150,1151,1152,1153,1154],[95,138,1142,1143,1144,1145,1146,1147,1148,1149,1151,1152,1153,1154],[95,138,1142,1143,1144,1145,1146,1147,1148,1149,1150,1152,1153,1154],[95,138,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1153,1154],[95,138,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1154],[95,138,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153],[95,138,153,180,187,1155,1156],[95,135,138],[95,137,138],[138],[95,138,143,172],[95,138,139,144,150,151,158,169,180],[95,138,139,140,150,158],[90,91,92,95,138],[95,138,141,181],[95,138,142,143,151,159],[95,138,143,169,177],[95,138,144,146,150,158],[95,137,138,145],[95,138,146,147],[95,138,150],[95,138,148,150],[95,137,138,150],[95,138,150,151,152,169,180],[95,138,150,151,152,165,169,172],[95,133,138,185],[95,138,146,150,153,158,169,180],[95,138,150,151,153,154,158,169,177,180],[95,138,153,155,169,177,180],[93,94,95,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186],[95,138,150,156],[95,138,157,180,185],[95,138,146,150,158,169],[95,138,159],[95,138,160],[95,137,138,161],[95,135,136,137,138,139,140,141,142,143,144,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186],[95,138,163],[95,138,164],[95,138,150,165,166],[95,138,165,167,181,183],[95,138,150,169,170,171,172],[95,138,169,171],[95,138,169,170],[95,138,172],[95,138,173],[95,135,138,169],[95,138,150,175,176],[95,138,175,176],[95,138,143,158,169,177],[95,138,178],[95,138,158,179],[95,138,153,164,180],[95,138,143,181],[95,138,169,182],[95,138,157,183],[95,138,184],[95,138,143,150,152,161,169,180,183,185],[95,138,169,186],[83,95,138,191,192,193],[83,95,138,191,192],[83,95,138,484],[83,87,95,138,190,354,397],[83,87,95,138,189,354,397],[80,81,82,95,138],[95,138,1158,1197],[95,138,1158,1182,1197],[95,138,1197],[95,138,1158],[95,138,1158,1183,1197],[95,138,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196],[95,138,1183,1197],[95,138,151,169,187,1108],[95,138,153,187,1109,1113],[81,83,95,138,1117],[95,138,1201],[95,138,492,513],[95,138,492],[95,138,1125,1126,1127],[95,138,430,436],[83,95,138,280,907,908],[95,138,604,605,611,612],[95,138,613,678,679],[95,138,604,611,613],[95,138,605,613],[95,138,604,606,607,608,611,613,616,617],[95,138,607,618,632,633],[95,138,604,611,616,617,618],[95,138,604,606,611,613,615,616,617],[95,138,604,605,616,617,618],[95,138,603,619,624,631,634,635,677,680,702],[95,138,604],[95,138,605,609,610],[95,138,605,609,610,611,612,614,625,626,627,628,629,630],[95,138,605,610,611],[95,138,605],[95,138,604,605,610,611,613,626],[95,138,611],[95,138,605,611,612],[95,138,609,611],[95,138,618,632],[95,138,604,606,607,608,611,616],[95,138,604,611,614,617],[95,138,607,615,616,617,620,621,622,623],[95,138,617],[95,138,604,606,611,613,615,617],[95,138,613,616],[95,138,613],[95,138,604,611,617],[95,138,605,611,616,627],[95,138,616,681],[95,138,613,617],[95,138,611,616],[95,138,616],[95,138,604,614],[95,138,604,611],[95,138,611,616,617],[95,138,636,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701],[95,138,616,617],[95,138,606,611],[95,138,604,611,615,616,617,629],[95,138,604,606,611,617],[95,138,604,606,611],[95,138,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676],[95,138,629,637],[95,138,637,639],[95,138,604,611,613,616,636,637],[95,138,604,611,613,615,616,617,629,636],[95,138,434],[95,138,431,435],[95,138,445,468],[95,138,588,592,597,599],[95,138,589,590,591],[95,138,589,590,591,596,703,704],[95,138,591,596,703],[95,138,589,590,591,596],[95,138,586,595,596],[95,138,589,590,591,596,601],[95,138,589,590],[95,138,586,587,588,589,590,591,595,596,597,598,599,601,602,703,704,705,706,707,708,709,710,711,712],[95,138,586,587,588,589,590,591,595,596,597,598],[95,138,586,587],[95,138,586,587,588,589,590,591],[95,138,586,595,596,597],[95,138,588,592,597,599,872,876],[95,138,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,738,739,740,741,742,743,744,745,746,747,748,749,757,758,759,760,762,763,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871],[95,138,727],[95,138,727,741,745,747,748,756,774,779,806],[95,138,732,748,756,775],[95,138,756],[95,138,815],[95,138,846],[95,138,732,756,847],[95,138,847],[95,138,728,800],[95,138,799],[95,138,723,727,731,756,761,801],[95,138,800],[95,138,732,756,850],[95,138,850],[95,138,720],[95,138,734],[95,138,813],[95,138,716,720,727,756,784],[95,138,756,776,780,825,864],[95,138,747],[95,138,727,741,745,746,756],[95,138,828],[95,138,831],[95,138,725],[95,138,833],[95,138,738],[95,138,723],[95,138,742],[95,138,783],[95,138,784],[95,138,774,838],[95,138,756,775],[95,138,732],[95,138,736,737,750,751,752,753,754,755],[95,138,738,743,751],[95,138,732,742,751],[95,138,720,732,734,751,752,754],[95,138,737,741,744,750],[95,138,732,741,747,749],[95,138,716,742],[95,138,741],[95,138,739,741,756],[95,138,716,741,742,756],[95,138,718],[95,138,717,718,723,732,738,741,742,756,784],[95,138,854],[95,138,852],[95,138,748],[95,138,758,823],[95,138,716],[95,138,731,732,756,758,759,760,761,762,763,764,765],[95,138,734,758,759],[95,138,727,775],[95,138,726,729],[95,138,739,740],[95,138,727,732,742,756,765,776,779,780,781],[95,138,760],[95,138,718,780],[95,138,756,760,785],[95,138,847,856],[95,138,723,732,738,747,756,775],[95,138,732,734,742,756,776,777],[95,138,728],[95,138,756,768],[95,138,850,859,862],[95,138,720,728,734,756],[95,138,732,756,784],[95,138,732,742,756],[95,138,732,734,742,756],[95,138,756,761],[95,138,724,756],[95,138,725,734],[95,138,741,775],[95,138,756,805,807],[95,138,717,820],[95,138,727,741,745,746,749,756,774],[95,138,727,741,745,746,756,775],[95,138,742,777],[95,138,728,734],[83,95,138,962],[88,95,138],[95,138,358],[95,138,360,361,362],[95,138,364],[95,138,196,206,212,214,354],[95,138,196,203,205,208,226],[95,138,206],[95,138,206,208,332],[95,138,261,279,294,400],[95,138,302],[95,138,196,206,213,247,257,329,330,400],[95,138,213,400],[95,138,206,257,258,259,400],[95,138,206,213,247,400],[95,138,400],[95,138,196,213,214,400],[95,138,287],[95,137,138,187,286],[83,95,138,280,281,282,299,300],[95,138,270],[95,138,269,271,374],[83,95,138,280,281,297],[95,138,276,300,386],[95,138,384,385],[95,138,220,383],[95,138,273],[95,137,138,187,220,236,269,270,271,272],[83,95,138,297,299,300],[95,138,297,299],[95,138,297,298,300],[95,138,164,187],[95,138,268],[95,137,138,187,205,207,264,265,266,267],[83,95,138,197,377],[83,95,138,180,187],[83,95,138,213,245],[83,95,138,213],[95,138,243,248],[83,95,138,244,357],[95,138,895],[83,87,95,138,153,187,189,190,354,395,396],[95,138,354],[95,138,195],[95,138,347,348,349,350,351,352],[95,138,349],[83,95,138,244,280,357],[83,95,138,280,355,357],[83,95,138,280,357],[95,138,153,187,207,357],[95,138,153,187,204,205,216,234,236,268,273,274,296,297],[95,138,265,268,273,281,283,284,285,287,288,289,290,291,292,293,400],[95,138,266],[83,95,138,164,187,205,206,234,236,237,239,264,296,300,354,400],[95,138,153,187,207,208,220,221,269],[95,138,153,187,206,208],[95,138,153,169,187,204,207,208],[95,138,153,164,180,187,204,205,206,207,208,213,216,217,227,228,230,233,234,236,237,238,239,263,264,297,305,307,310,312,315,317,318,319,320],[95,138,196,197,198,204,205,354,357,400],[95,138,153,169,180,187,201,331,333,334,400],[95,138,164,180,187,201,204,207,224,228,230,231,232,237,264,310,321,323,329,343,344],[95,138,206,210,264],[95,138,204,206],[95,138,217,311],[95,138,313,314],[95,138,313],[95,138,311],[95,138,313,316],[95,138,200,201],[95,138,200,240],[95,138,200],[95,138,202,217,309],[95,138,308],[95,138,201,202],[95,138,202,306],[95,138,201],[95,138,296],[95,138,153,187,204,216,235,255,261,275,278,295,297],[95,138,249,250,251,252,253,254,276,277,300,355],[95,138,304],[95,138,153,187,204,216,235,241,301,303,305,354,357],[95,138,153,180,187,197,204,206,263],[95,138,260],[95,138,153,187,337,342],[95,138,227,236,263,357],[95,138,325,329,343,346],[95,138,153,210,329,337,338,346],[95,138,196,206,227,238,340],[95,138,153,187,206,213,238,324,325,335,336,339,341],[95,138,188,234,235,236,354,357],[95,138,153,164,180,187,202,204,205,207,210,215,216,224,227,228,230,231,232,233,237,239,263,264,307,321,322,357],[95,138,153,187,204,206,210,323,345],[95,138,153,187,205,207],[83,95,138,153,164,187,195,197,204,205,208,216,233,234,236,237,239,304,354,357],[95,138,153,164,180,187,199,202,203,207],[95,138,200,262],[95,138,153,187,200,205,216],[95,138,153,187,206,217],[95,138,220],[95,138,219],[95,138,221],[95,138,206,218,220,224],[95,138,206,218,220],[95,138,153,187,199,206,207,213,221,222,223],[83,95,138,297,298,299],[95,138,256],[83,95,138,197],[83,95,138,230],[83,95,138,188,233,236,239,354,357],[95,138,197,377,378],[83,95,138,248],[83,95,138,164,180,187,195,242,244,246,247,357],[95,138,207,213,230],[95,138,229],[83,95,138,151,153,164,187,195,248,257,354,355,356],[79,83,84,85,86,95,138,189,190,354,397],[95,138,143],[95,138,326,327,328],[95,138,326],[95,138,366],[95,138,368],[95,138,370],[95,138,896],[95,138,372],[95,138,375],[95,138,379],[87,89,95,138,354,359,363,365,367,369,371,373,376,380,382,388,389,391,398,399,400],[95,138,381],[95,138,388,403],[95,138,387],[95,138,244],[95,138,390],[95,137,138,221,222,223,224,392,393,394,397],[95,138,187],[83,87,95,138,153,155,164,187,189,190,191,193,195,208,346,353,357,397],[95,138,1122],[95,138,1121,1122],[95,138,1121],[95,138,1121,1122,1123,1129,1130,1133,1134,1135,1136],[95,138,1122,1130],[95,138,1121,1122,1123,1129,1130,1131,1132],[95,138,1121,1130],[95,138,1130,1134],[95,138,1122,1123,1124,1128],[95,138,1123],[95,138,1121,1122,1130],[95,138,420],[95,138,418,420],[95,138,409,417,418,419,421],[95,138,407],[95,138,410,415,420,423],[95,138,406,423],[95,138,410,411,414,415,416,423],[95,138,410,411,412,414,415,423],[95,138,407,408,409,410,411,415,416,417,419,420,421,423],[95,138,405,407,408,409,410,411,412,414,415,416,417,418,419,420,421,422],[95,138,405,423],[95,138,410,412,413,415,416,423],[95,138,414,423],[95,138,415,416,420,423],[95,138,408,418],[95,138,444],[83,95,138,911],[95,138,912,913],[83,95,138,910],[83,95,138,538],[95,138,538,539,540,542,543,544,545,546,547,548,551],[95,138,538],[95,138,541],[83,95,138,536,538],[95,138,533,534,536],[95,138,529,532,534,536],[95,138,533,536],[83,95,138,524,525,526,529,530,531,533,534,535,536],[95,138,526,529,530,531,532,533,534,535,536,537],[95,138,533],[95,138,527,533,534],[95,138,527,528],[95,138,532,534,535],[95,138,532],[95,138,524,529,534,535],[95,138,549,550],[95,138,450,453,456,457,458,460,461,462,464,465,466],[83,95,138,453],[95,138,453],[95,138,453,459],[83,95,138,453,454],[95,138,453,455,467],[95,138,448,453],[83,95,138,169,187,448],[83,95,138,448,453,463],[95,138,448],[95,138,447],[95,138,446,453],[81,83,95,138,449,450,451,452],[95,138,424,425],[95,138,423,426],[95,105,109,138,180],[95,105,138,169,180],[95,100,138],[95,102,105,138,177,180],[95,138,158,177],[95,100,138,187],[95,102,105,138,158,180],[95,97,98,101,104,138,150,169,180],[95,105,112,138],[95,97,103,138],[95,105,126,127,138],[95,101,105,138,172,180,187],[95,126,138,187],[95,99,100,138,187],[95,105,138],[95,99,100,101,102,103,104,105,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,129,130,131,132,138],[95,105,120,138],[95,105,112,113,138],[95,103,105,113,114,138],[95,104,138],[95,97,100,105,138],[95,105,109,113,114,138],[95,109,138],[95,103,105,108,138,180],[95,97,102,105,112,138],[95,138,169],[95,100,105,126,138,185,187],[95,138,569],[95,138,559,560],[95,138,557,558,559,561,562,567],[95,138,558,559],[95,138,568],[95,138,559],[95,138,557,558,559,562,563,564,565,566],[95,138,557,558,569],[95,138,382,517],[95,138,388,403,494,577,923,927,931],[95,138,517],[83,95,138,922,923,924,925,926,927],[95,138,388,403,494,578,931],[95,138,933],[95,138,388,403,578,935,936,938,939],[95,138,382,517,906,909],[95,138,398],[95,138,398,892],[95,138,906,947,948,949],[95,138,401,897,898,899,900],[95,138,382,491,517,902,903,904,905,906,915,916],[95,138,382],[83,95,138,382,388,403,491,515,906],[95,138,382,517,906,955],[95,138,382,517,906],[83,95,138,382,517,905,951],[95,138,960],[95,138,916],[83,95,138,517,519],[95,138,485,965],[95,138,382,489,494,519],[83,95,138,488],[95,138,490,494],[95,138,485,967],[95,138,496,552,969,970],[95,138,485,971,1048,1049],[95,138,485,496,970,1049],[83,95,138,494,501,969],[95,138,488,496,498,500],[95,138,494,502],[95,138,488],[95,138,494,503,517],[95,138,382,388,403,491,494,504],[95,138,485,491,1054],[83,95,138,382,491,494,510,1056],[83,95,138,485,491,964,1048,1057],[83,95,138,509],[83,95,138,494,515,580,585],[83,95,138,496,574,970,1052,1053],[95,138,391,517],[83,95,138,517],[83,95,138,494,496,512,517,1061],[95,138,468],[83,95,138,485,964,1048,1062],[95,138,1064,1065,1066],[83,95,138,494,515],[95,138,491],[95,138,382,585],[83,95,138,898,899],[83,95,138,382,388,403,491,494,509,515,585],[83,95,138,388,403],[83,95,138,382,491,494],[83,95,138,382,494,576,919,920],[83,95,138,517,920],[83,95,138,380,494,576],[83,95,138,382,491,517,576,577,921],[95,138,519],[83,95,138,388,403,491,496],[95,138,382,576,577],[83,95,138,388,403,920],[83,95,138,382,494,578,936],[95,138,382,491,517,578,937],[83,95,138,382,491,517],[83,95,138,388,403,491,496,936],[95,138,909],[83,95,138,909,914],[95,138,382,491,517,519],[95,138,382,491,517],[83,95,138,909],[83,95,138,494,515,517,519],[83,95,138,494,515,517],[83,95,138,388,403,585],[83,95,138,580,585],[83,95,138,962,963],[83,95,138,494,514],[95,138,485,1072],[95,138,494,521],[83,95,138,494,516],[95,138,514],[95,138,485,519],[83,95,138,494,518],[83,95,138,485,964],[83,95,138,485,552,969],[83,95,138,491,494,516,523,552,553],[83,95,138,488,516,523,552],[95,138,496,498,515,517,519],[83,95,138,491,494,495],[83,95,138,485,491,496],[83,95,138,491,494,554],[83,95,138,485,1061],[83,95,138,491,494,509,514],[83,95,138,491,494,497],[95,138,485,491,498,1048],[83,95,138,494,499],[95,138,494],[95,138,552,570,573],[95,138,575],[95,138,576],[95,138,580,581],[95,138,580,582,583,584],[95,138,580],[95,138,580,582,583],[95,138,492,493],[95,138,600,714],[95,138,713],[95,138,714,877],[95,138,373,401,898,899,1067],[95,138,181,469,485],[83,95,138,468,485,884,885],[95,138,883,884],[95,138,883],[95,138,468,884],[83,95,138,468,884,885],[95,138,882],[95,138,879,880,881,882],[95,138,485],[95,138,469],[95,138,181],[83,95,138,485,964,1048],[95,138,491,517,1087],[95,138,485,496,517,964,969,1048],[83,95,138,485,552],[95,138,427,428]],"fileInfos":[{"version":"e41c290ef7dd7dab3493e6cbe5909e0148edf4a8dad0271be08edec368a0f7b9","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"e44bb8bbac7f10ecc786703fe0a6a4b952189f908707980ba8f3c8975a760962","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569","impliedFormat":1},{"version":"ee7bad0c15b58988daa84371e0b89d313b762ab83cb5b31b8a2d1162e8eb41c2","impliedFormat":1},{"version":"27bdc30a0e32783366a5abeda841bc22757c1797de8681bbe81fbc735eeb1c10","impliedFormat":1},{"version":"8fd575e12870e9944c7e1d62e1f5a73fcf23dd8d3a321f2a2c74c20d022283fe","impliedFormat":1},{"version":"e12a46ce14b817d4c9e6b2b478956452330bf00c9801b79de46f7a1815b5bd40","impliedFormat":1},{"version":"4fd3f3422b2d2a3dfd5cdd0f387b3a8ec45f006c6ea896a4cb41264c2100bb2c","affectsGlobalScope":true,"impliedFormat":1},{"version":"69e65d976bf166ce4a9e6f6c18f94d2424bf116e90837ace179610dbccad9b42","affectsGlobalScope":true,"impliedFormat":1},{"version":"c57796738e7f83dbc4b8e65132f11a377649c00dd3eee333f672b8f0a6bea671","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"62bb211266ee48b2d0edf0d8d1b191f0c24fc379a82bd4c1692a082c540bc6b1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"936e80ad36a2ee83fc3caf008e7c4c5afe45b3cf3d5c24408f039c1d47bdc1df","affectsGlobalScope":true,"impliedFormat":1},{"version":"d15bea3d62cbbdb9797079416b8ac375ae99162a7fba5de2c6c505446486ac0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"68d18b664c9d32a7336a70235958b8997ebc1c3b8505f4f1ae2b7e7753b87618","affectsGlobalScope":true,"impliedFormat":1},{"version":"eb3d66c8327153d8fa7dd03f9c58d351107fe824c79e9b56b462935176cdf12a","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"fef8cfad2e2dc5f5b3d97a6f4f2e92848eb1b88e897bb7318cef0e2820bceaab","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"954296b30da6d508a104a3a0b5d96b76495c709785c1d11610908e63481ee667","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"f1e2a172204962276504466a6393426d2ca9c54894b1ad0a6c9dad867a65f876","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"52ada8e0b6e0482b728070b7639ee42e83a9b1c22d205992756fe020fd9f4a47","affectsGlobalScope":true,"impliedFormat":1},{"version":"3bdefe1bfd4d6dee0e26f928f93ccc128f1b64d5d501ff4a8cf3c6371200e5e6","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"639e512c0dfc3fad96a84caad71b8834d66329a1f28dc95e3946c9b58176c73a","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true,"impliedFormat":1},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true,"impliedFormat":1},{"version":"959d36cddf5e7d572a65045b876f2956c973a586da58e5d26cde519184fd9b8a","affectsGlobalScope":true,"impliedFormat":1},{"version":"965f36eae237dd74e6cca203a43e9ca801ce38824ead814728a2807b1910117d","affectsGlobalScope":true,"impliedFormat":1},{"version":"3925a6c820dcb1a06506c90b1577db1fdbf7705d65b62b99dce4be75c637e26b","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a3d63ef2b853447ec4f749d3f368ce642264246e02911fcb1590d8c161b8005","affectsGlobalScope":true,"impliedFormat":1},{"version":"b5ce7a470bc3628408429040c4e3a53a27755022a32fd05e2cb694e7015386c7","affectsGlobalScope":true,"impliedFormat":1},{"version":"8444af78980e3b20b49324f4a16ba35024fef3ee069a0eb67616ea6ca821c47a","affectsGlobalScope":true,"impliedFormat":1},{"version":"3287d9d085fbd618c3971944b65b4be57859f5415f495b33a6adc994edd2f004","affectsGlobalScope":true,"impliedFormat":1},{"version":"b4b67b1a91182421f5df999988c690f14d813b9850b40acd06ed44691f6727ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"bab26767638ab3557de12c900f0b91f710c7dc40ee9793d5a27d32c04f0bf646","affectsGlobalScope":true,"impliedFormat":1},{"version":"436aaf437562f276ec2ddbee2f2cdedac7664c1e4c1d2c36839ddd582eeb3d0a","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e3c06ea092138bf9fa5e874a1fdbc9d54805d074bee1de31b99a11e2fec239d","affectsGlobalScope":true,"impliedFormat":1},{"version":"87dc0f382502f5bbce5129bdc0aea21e19a3abbc19259e0b43ae038a9fc4e326","affectsGlobalScope":true,"impliedFormat":1},{"version":"b1cb28af0c891c8c96b2d6b7be76bd394fddcfdb4709a20ba05a7c1605eea0f9","affectsGlobalScope":true,"impliedFormat":1},{"version":"2fef54945a13095fdb9b84f705f2b5994597640c46afeb2ce78352fab4cb3279","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac77cb3e8c6d3565793eb90a8373ee8033146315a3dbead3bde8db5eaf5e5ec6","affectsGlobalScope":true,"impliedFormat":1},{"version":"56e4ed5aab5f5920980066a9409bfaf53e6d21d3f8d020c17e4de584d29600ad","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ece9f17b3866cc077099c73f4983bddbcb1dc7ddb943227f1ec070f529dedd1","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a6282c8827e4b9a95f4bf4f5c205673ada31b982f50572d27103df8ceb8013c","affectsGlobalScope":true,"impliedFormat":1},{"version":"1c9319a09485199c1f7b0498f2988d6d2249793ef67edda49d1e584746be9032","affectsGlobalScope":true,"impliedFormat":1},{"version":"e3a2a0cee0f03ffdde24d89660eba2685bfbdeae955a6c67e8c4c9fd28928eeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true,"impliedFormat":1},{"version":"51ad4c928303041605b4d7ae32e0c1ee387d43a24cd6f1ebf4a2699e1076d4fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"d4b1d2c51d058fc21ec2629fff7a76249dec2e36e12960ea056e3ef89174080f","affectsGlobalScope":true,"impliedFormat":1},{"version":"61d6a2092f48af66dbfb220e31eea8b10bc02b6932d6e529005fd2d7b3281290","affectsGlobalScope":true,"impliedFormat":1},{"version":"8e7f8264d0fb4c5339605a15daadb037bf238c10b654bb3eee14208f860a32ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"0990a7576222f248f0a3b888adcb7389f957928ce2afb1cd5128169086ff4d29","impliedFormat":1},{"version":"36a2e4c9a67439aca5f91bb304611d5ae6e20d420503e96c230cf8fcdc948d94","affectsGlobalScope":true,"impliedFormat":1},{"version":"8a8eb4ebffd85e589a1cc7c178e291626c359543403d58c9cd22b81fab5b1fb9","impliedFormat":1},{"version":"65ff5a0aefd7817a03c1ad04fee85c9cdd3ec415cc3c9efec85d8008d4d5e4ee","impliedFormat":1},{"version":"b89c2ddec6bd955e8721d41e24ca667de06882338d88b183c2cdc1f41f4c5a34","affectsGlobalScope":true,"impliedFormat":1},{"version":"cc69795d9954ee4ad57545b10c7bf1a7260d990231b1685c147ea71a6faa265c","impliedFormat":1},{"version":"8bc6c94ff4f2af1f4023b7bb2379b08d3d7dd80c698c9f0b07431ea16101f05f","impliedFormat":1},{"version":"1b61d259de5350f8b1e5db06290d31eaebebc6baafd5f79d314b5af9256d7153","impliedFormat":1},{"version":"57194e1f007f3f2cbef26fa299d4c6b21f4623a2eddc63dfeef79e38e187a36e","impliedFormat":1},{"version":"0f6666b58e9276ac3a38fdc80993d19208442d6027ab885580d93aec76b4ef00","impliedFormat":1},{"version":"05fd364b8ef02fb1e174fbac8b825bdb1e5a36a016997c8e421f5fab0a6da0a0","impliedFormat":1},{"version":"70521b6ab0dcba37539e5303104f29b721bfb2940b2776da4cc818c07e1fefc1","affectsGlobalScope":true,"impliedFormat":1},{"version":"ab41ef1f2cdafb8df48be20cd969d875602483859dc194e9c97c8a576892c052","affectsGlobalScope":true,"impliedFormat":1},{"version":"d153a11543fd884b596587ccd97aebbeed950b26933ee000f94009f1ab142848","affectsGlobalScope":true,"impliedFormat":1},{"version":"21d819c173c0cf7cc3ce57c3276e77fd9a8a01d35a06ad87158781515c9a438a","impliedFormat":1},{"version":"a79e62f1e20467e11a904399b8b18b18c0c6eea6b50c1168bf215356d5bebfaf","affectsGlobalScope":true,"impliedFormat":1},{"version":"0fd06258805d26c72f5997e07a23155d322d5f05387adb3744a791fe6a0b042d","affectsGlobalScope":true,"impliedFormat":1},{"version":"4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","impliedFormat":1},{"version":"5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","impliedFormat":1},{"version":"24bd580b5743dc56402c440dc7f9a4f5d592ad7a419f25414d37a7bfe11e342b","impliedFormat":1},{"version":"25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","impliedFormat":1},{"version":"c464d66b20788266e5353b48dc4aa6bc0dc4a707276df1e7152ab0c9ae21fad8","impliedFormat":1},{"version":"78d0d27c130d35c60b5e5566c9f1e5be77caf39804636bc1a40133919a949f21","impliedFormat":1},{"version":"c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","impliedFormat":1},{"version":"1d6e127068ea8e104a912e42fc0a110e2aa5a66a356a917a163e8cf9a65e4a75","impliedFormat":1},{"version":"5ded6427296cdf3b9542de4471d2aa8d3983671d4cac0f4bf9c637208d1ced43","impliedFormat":1},{"version":"6bdc71028db658243775263e93a7db2fd2abfce3ca569c3cca5aee6ed5eb186d","impliedFormat":1},{"version":"cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","impliedFormat":1},{"version":"385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","impliedFormat":1},{"version":"9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","impliedFormat":1},{"version":"0b8a9268adaf4da35e7fa830c8981cfa22adbbe5b3f6f5ab91f6658899e657a7","impliedFormat":1},{"version":"11396ed8a44c02ab9798b7dca436009f866e8dae3c9c25e8c1fbc396880bf1bb","impliedFormat":1},{"version":"ba7bc87d01492633cb5a0e5da8a4a42a1c86270e7b3d2dea5d156828a84e4882","impliedFormat":1},{"version":"4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","impliedFormat":1},{"version":"c21dc52e277bcfc75fac0436ccb75c204f9e1b3fa5e12729670910639f27343e","impliedFormat":1},{"version":"13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","impliedFormat":1},{"version":"9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","impliedFormat":1},{"version":"4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","impliedFormat":1},{"version":"24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","impliedFormat":1},{"version":"ea0148f897b45a76544ae179784c95af1bd6721b8610af9ffa467a518a086a43","impliedFormat":1},{"version":"24c6a117721e606c9984335f71711877293a9651e44f59f3d21c1ea0856f9cc9","impliedFormat":1},{"version":"dd3273ead9fbde62a72949c97dbec2247ea08e0c6952e701a483d74ef92d6a17","impliedFormat":1},{"version":"405822be75ad3e4d162e07439bac80c6bcc6dbae1929e179cf467ec0b9ee4e2e","impliedFormat":1},{"version":"0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","impliedFormat":1},{"version":"4d2b0eb911816f66abe4970898f97a2cfc902bcd743cbfa5017fad79f7ef90d8","impliedFormat":1},{"version":"bd0532fd6556073727d28da0edfd1736417a3f9f394877b6d5ef6ad88fba1d1a","impliedFormat":1},{"version":"89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","impliedFormat":1},{"version":"e53a3c2a9f624d90f24bf4588aacd223e7bec1b9d0d479b68d2f4a9e6011147f","impliedFormat":1},{"version":"24b8685c62562f5d98615c5a0c1d05f297cf5065f15246edfe99e81ec4c0e011","impliedFormat":1},{"version":"93507c745e8f29090efb99399c3f77bec07db17acd75634249dc92f961573387","impliedFormat":1},{"version":"339dc5265ee5ed92e536a93a04c4ebbc2128f45eeec6ed29f379e0085283542c","impliedFormat":1},{"version":"4732aec92b20fb28c5fe9ad99521fb59974289ed1e45aecb282616202184064f","impliedFormat":1},{"version":"2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","impliedFormat":1},{"version":"c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","impliedFormat":1},{"version":"bf67d53d168abc1298888693338cb82854bdb2e69ef83f8a0092093c2d562107","impliedFormat":1},{"version":"ca6d304b929748ea15c33f28c1f159df18a94470b424ab78c52d68d40a41e1e9","affectsGlobalScope":true,"impliedFormat":1},{"version":"a72ffc815104fb5c075106ebca459b2d55d07862a773768fce89efc621b3964b","impliedFormat":1},{"version":"7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","impliedFormat":1},{"version":"3d77c73be94570813f8cadd1f05ebc3dc5e2e4fdefe4d340ca20cd018724ee36","impliedFormat":1},{"version":"d674383111e06b6741c4ad2db962131b5b0fa4d0294b998566c635e86195a453","affectsGlobalScope":true,"impliedFormat":1},{"version":"f3e58c4c18a031cbb17abec7a4ad0bd5ae9fc70c1f4ba1e7fb921ad87c504aca","impliedFormat":1},{"version":"a3e8bafb2af8e850c644f4be7f5156cf7d23b7bfdc3b786bd4d10ed40329649c","impliedFormat":1},{"version":"35ec8b6760fd7138bbf5809b84551e31028fb2ba7b6dc91d95d098bf212ca8b4","affectsGlobalScope":true,"impliedFormat":1},{"version":"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","impliedFormat":1},{"version":"f77d9188e41291acf14f476e931972460a303e1952538f9546e7b370cb8d0d20","affectsGlobalScope":true,"impliedFormat":1},{"version":"b0c0d1d13be149f790a75b381b413490f98558649428bb916fd2d71a3f47a134","impliedFormat":1},{"version":"3c884d9d9ec454bdf0d5a0b8465bf8297d2caa4d853851d92cc417ac6f30b969","impliedFormat":1},{"version":"5a369483ac4cfbdf0331c248deeb36140e6907db5e1daed241546b4a2055f82c","impliedFormat":1},{"version":"e8f5b5cc36615c17d330eaf8eebbc0d6bdd942c25991f96ef122f246f4ff722f","impliedFormat":1},{"version":"f0bd7e6d931657b59605c44112eaf8b980ba7f957a5051ed21cb93d978cf2f45","impliedFormat":1},{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true,"impliedFormat":1},{"version":"0ada07543808f3b967624645a8e1ccd446f8b01ade47842acf1328aec899fed0","affectsGlobalScope":true,"impliedFormat":1},{"version":"a4bdde4e601e9554a844e1e0d0ccfa05e183ef9d82ab3ac25f17c1709033d360","impliedFormat":1},{"version":"ad23fd126ff06e72728dd7bfc84326a8ca8cec2b9d2dac0193d42a777df0e7d8","impliedFormat":1},{"version":"c60db41f7bee80fb80c0b12819f5e465c8c8b465578da43e36d04f4a4646f57d","impliedFormat":1},{"version":"93bd413918fa921c8729cef45302b24d8b6c7855d72d5bf82d3972595ae8dcbf","impliedFormat":1},{"version":"4ff41188773cbf465807dd2f7059c7494cbee5115608efc297383832a1150c43","impliedFormat":1},{"version":"dccdf1677e531e33f8ac961a68bc537418c9a414797c1ea7e91307501cdc3f5e","impliedFormat":1},{"version":"1f4fc6905c4c3ae701838f89484f477b8d9b3ef39270e016b5488600d247d9a5","affectsGlobalScope":true,"impliedFormat":1},{"version":"d206b4baf4ddcc15d9d69a9a2f4999a72a2c6adeaa8af20fa7a9960816287555","impliedFormat":1},{"version":"93f437e1398a4f06a984f441f7fa7a9f0535c04399619b5c22e0b87bdee182cb","impliedFormat":1},{"version":"afbe24ab0d74694372baa632ecb28bb375be53f3be53f9b07ecd7fc994907de5","impliedFormat":1},{"version":"70731d10d5311bd4cf710ef7f6539b62660f4b0bfdbb3f9fbe1d25fe6366a7fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"a20f1e119615bf7632729fd89b6c0b5ffdc2df3b512d6304146294528e3ebe19","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e043a1bc8fbf2a255bccf9bf27e0f1caf916c3b0518ea34aa72357c0afd42ec","impliedFormat":1},{"version":"137c2894e8f3e9672d401cc0a305dc7b1db7c69511cf6d3970fb53302f9eae09","impliedFormat":1},{"version":"3bc2f1e2c95c04048212c569ed38e338873f6a8593930cf5a7ef24ffb38fc3b6","impliedFormat":1},{"version":"8145e07aad6da5f23f2fcd8c8e4c5c13fb26ee986a79d03b0829b8fce152d8b2","impliedFormat":1},{"version":"f9d9d753d430ed050dc1bf2667a1bab711ccbb1c1507183d794cc195a5b085cc","impliedFormat":1},{"version":"9eece5e586312581ccd106d4853e861aaaa1a39f8e3ea672b8c3847eedd12f6e","impliedFormat":1},{"version":"235bfb54b4869c26f7e98e3d1f68dbfc85acf4cf5c38a4444a006fbf74a8a43d","impliedFormat":1},{"version":"37ba7b45141a45ce6e80e66f2a96c8a5ab1bcef0fc2d0f56bb58df96ec67e972","impliedFormat":1},{"version":"93452d394fdd1dc551ec62f5042366f011a00d342d36d50793b3529bfc9bd633","impliedFormat":1},{"version":"bb715efb4857eb94539eafb420352105a0cff40746837c5140bf6b035dd220ba","affectsGlobalScope":true,"impliedFormat":1},{"version":"1851a3b4db78664f83901bb9cac9e45e03a37bb5933cc5bf37e10bb7e91ab4eb","impliedFormat":1},{"version":"fdedf82878e4c744bc2a1c1e802ae407d63474da51f14a54babe039018e53d8f","affectsGlobalScope":true,"impliedFormat":1},{"version":"08353b04a3501d84fc8d7b49de99f6c1cc26026e6d9d697a18315f3bfe92ed03","affectsGlobalScope":true,"impliedFormat":1},{"version":"578d8bb6dcb2a1c03c4c3f8eb71abc9677e1a5c788b7f24848e3138ce17f3400","impliedFormat":1},{"version":"4f029899f9bae07e225c43aef893590541b2b43267383bf5e32e3a884d219ed5","impliedFormat":1},{"version":"ae56f65caf3be91108707bd8dfbccc2a57a91feb5daabf7165a06a945545ed26","impliedFormat":1},{"version":"a136d5de521da20f31631a0a96bf712370779d1c05b7015d7019a9b2a0446ca9","impliedFormat":1},{"version":"5b566927cad2ed2139655d55d690ffa87df378b956e7fe1c96024c4d9f75c4cf","affectsGlobalScope":true,"impliedFormat":1},{"version":"bce947017cb7a2deebcc4f5ba04cead891ce6ad1602a4438ae45ed9aa1f39104","affectsGlobalScope":true,"impliedFormat":1},{"version":"d3dffd70e6375b872f0b4e152de4ae682d762c61a24881ecc5eb9f04c5caf76f","impliedFormat":1},{"version":"e2c72c065a36bc9ab2a00ac6a6f51e71501619a72c0609defd304d46610487a4","impliedFormat":1},{"version":"d91a7d8b5655c42986f1bdfe2105c4408f472831c8f20cf11a8c3345b6b56c8c","impliedFormat":1},{"version":"616075a6ac578cf5a013ee12964188b4412823796ce0b202c6f1d2e4ca8480d7","affectsGlobalScope":true,"impliedFormat":1},{"version":"e8a979b8af001c9fc2e774e7809d233c8ca955a28756f52ee5dee88ccb0611d2","impliedFormat":1},{"version":"cac793cc47c29e26e4ac3601dcb00b4435ebed26203485790e44f2ad8b6ad847","impliedFormat":1},{"version":"8caa5c86be1b793cd5f599e27ecb34252c41e011980f7d61ae4989a149ff6ccc","impliedFormat":1},{"version":"3609e455ffcba8176c8ce0aa57f8258fe10cf03987e27f1fab68f702b4426521","impliedFormat":1},{"version":"d1bd4e51810d159899aad1660ccb859da54e27e08b8c9862b40cd36c1d9ff00f","impliedFormat":1},{"version":"17ed71200119e86ccef2d96b73b02ce8854b76ad6bd21b5021d4269bec527b5f","impliedFormat":1},{"version":"5dbf2a502a7fcd85bfe753b585cfc6c9f60294570ee6a18084e574cf93be3fa0","impliedFormat":1},{"version":"bb7a61dd55dc4b9422d13da3a6bb9cc5e89be888ef23bbcf6558aa9726b89a1c","impliedFormat":1},{"version":"db6d2d9daad8a6d83f281af12ce4355a20b9a3e71b82b9f57cddcca0a8964a96","impliedFormat":1},{"version":"cfe4ef4710c3786b6e23dae7c086c70b4f4835a2e4d77b75d39f9046106e83d3","impliedFormat":1},{"version":"cbea99888785d49bb630dcbb1613c73727f2b5a2cf02e1abcaab7bcf8d6bf3c5","impliedFormat":1},{"version":"3989ccb24f2526f7e82cf54268e23ce9e1df5b9982f8acd099ddd4853c26babd","impliedFormat":1},{"version":"a86f82d646a739041d6702101afa82dcb935c416dd93cbca7fd754fd0282ce1f","impliedFormat":1},{"version":"2dad084c67e649f0f354739ec7df7c7df0779a28a4f55c97c6b6883ae850d1ce","impliedFormat":1},{"version":"fa5bbc7ab4130dd8cdc55ea294ec39f76f2bc507a0f75f4f873e38631a836ca7","impliedFormat":1},{"version":"df45ca1176e6ac211eae7ddf51336dc075c5314bc5c253651bae639defd5eec5","impliedFormat":1},{"version":"cf86de1054b843e484a3c9300d62fbc8c97e77f168bbffb131d560ca0474d4a8","impliedFormat":1},{"version":"196c960b12253fde69b204aa4fbf69470b26daf7a430855d7f94107a16495ab0","impliedFormat":1},{"version":"ee15ea5dd7a9fc9f5013832e5843031817a880bf0f24f37a29fd8337981aae07","impliedFormat":1},{"version":"bf24f6d35f7318e246010ffe9924395893c4e96d34324cde77151a73f078b9ad","impliedFormat":1},{"version":"805c5db07d4b131bede36cc2dbded64cc3c8e49594e53119f4442af183f97935","impliedFormat":1},{"version":"10595c7ff5094dd5b6a959ccb1c00e6a06441b4e10a87bc09c15f23755d34439","impliedFormat":1},{"version":"9620c1ff645afb4a9ab4044c85c26676f0a93e8c0e4b593aea03a89ccb47b6d0","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"a9af0e608929aaf9ce96bd7a7b99c9360636c31d73670e4af09a09950df97841","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"c86fe861cf1b4c46a0fb7d74dffe596cf679a2e5e8b1456881313170f092e3fa","impliedFormat":1},{"version":"08ed0b3f0166787f84a6606f80aa3b1388c7518d78912571b203817406e471da","impliedFormat":1},{"version":"47e5af2a841356a961f815e7c55d72554db0c11b4cba4d0caab91f8717846a94","impliedFormat":1},{"version":"65f43099ded6073336e697512d9b80f2d4fec3182b7b2316abf712e84104db00","impliedFormat":1},{"version":"f5f541902bf7ae0512a177295de9b6bcd6809ea38307a2c0a18bfca72212f368","impliedFormat":1},{"version":"b0decf4b6da3ebc52ea0c96095bdfaa8503acc4ac8e9081c5f2b0824835dd3bd","impliedFormat":1},{"version":"ca1b882a105a1972f82cc58e3be491e7d750a1eb074ffd13b198269f57ed9e1b","impliedFormat":1},{"version":"fc3e1c87b39e5ba1142f27ec089d1966da168c04a859a4f6aab64dceae162c2b","impliedFormat":1},{"version":"3b414b99a73171e1c4b7b7714e26b87d6c5cb03d200352da5342ab4088a54c85","impliedFormat":1},{"version":"61888522cec948102eba94d831c873200aa97d00d8989fdfd2a3e0ee75ec65a2","impliedFormat":1},{"version":"4e10622f89fea7b05dd9b52fb65e1e2b5cbd96d4cca3d9e1a60bb7f8a9cb86a1","impliedFormat":1},{"version":"74b2a5e5197bd0f2e0077a1ea7c07455bbea67b87b0869d9786d55104006784f","impliedFormat":1},{"version":"59bf32919de37809e101acffc120596a9e45fdbab1a99de5087f31fdc36e2f11","impliedFormat":1},{"version":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","impliedFormat":1},{"version":"3c4b45e48c56c17fb44b3cab4e2a6c8f64c4fa2c0306fe27d33c52167c0b7fa7","impliedFormat":1},{"version":"c40c848daad198266370c1c72a7a8c3d18d2f50727c7859fcfefd3ff69a7f288","impliedFormat":1},{"version":"ac60bbee0d4235643cc52b57768b22de8c257c12bd8c2039860540cab1fa1d82","impliedFormat":1},{"version":"6428e6edd944ce6789afdf43f9376c1f2e4957eea34166177625aaff4c0da1a0","impliedFormat":1},{"version":"ada39cbb2748ab2873b7835c90c8d4620723aedf323550e8489f08220e477c7f","impliedFormat":1},{"version":"6e5f5cee603d67ee1ba6120815497909b73399842254fc1e77a0d5cdc51d8c9c","impliedFormat":1},{"version":"8dba67056cbb27628e9b9a1cba8e57036d359dceded0725c72a3abe4b6c79cd4","impliedFormat":1},{"version":"70f3814c457f54a7efe2d9ce9d2686de9250bb42eb7f4c539bd2280a42e52d33","impliedFormat":1},{"version":"154dd2e22e1e94d5bc4ff7726706bc0483760bae40506bdce780734f11f7ec47","impliedFormat":1},{"version":"ef61792acbfa8c27c9bd113f02731e66229f7d3a169e3c1993b508134f1a58e0","impliedFormat":1},{"version":"9c82171d836c47486074e4ca8e059735bf97b205e70b196535b5efd40cbe1bc5","impliedFormat":1},{"version":"0131e203d8560edb39678abe10db42564a068f98c4ebd1ed9ffe7279c78b3c81","impliedFormat":1},{"version":"f6404e7837b96da3ea4d38c4f1a3812c96c9dcdf264e93d5bdb199f983a3ef4b","impliedFormat":1},{"version":"c5426dbfc1cf90532f66965a7aa8c1136a78d4d0f96d8180ecbfc11d7722f1a5","impliedFormat":1},{"version":"65a15fc47900787c0bd18b603afb98d33ede930bed1798fc984d5ebb78b26cf9","impliedFormat":1},{"version":"9d202701f6e0744adb6314d03d2eb8fc994798fc83d91b691b75b07626a69801","impliedFormat":1},{"version":"de9d2df7663e64e3a91bf495f315a7577e23ba088f2949d5ce9ec96f44fba37d","impliedFormat":1},{"version":"c7af78a2ea7cb1cd009cfb5bdb48cd0b03dad3b54f6da7aab615c2e9e9d570c5","impliedFormat":1},{"version":"1ee45496b5f8bdee6f7abc233355898e5bf9bd51255db65f5ff7ede617ca0027","impliedFormat":1},{"version":"8b8f00491431fe82f060dfe8c7f2180a9fb239f3d851527db909b83230e75882","affectsGlobalScope":true,"impliedFormat":1},{"version":"db01d18853469bcb5601b9fc9826931cc84cc1a1944b33cad76fd6f1e3d8c544","affectsGlobalScope":true,"impliedFormat":1},{"version":"dba114fb6a32b355a9cfc26ca2276834d72fe0e94cd2c3494005547025015369","impliedFormat":1},{"version":"903e299a28282fa7b714586e28409ed73c3b63f5365519776bf78e8cf173db36","affectsGlobalScope":true,"impliedFormat":1},{"version":"fa6c12a7c0f6b84d512f200690bfc74819e99efae69e4c95c4cd30f6884c526e","impliedFormat":1},{"version":"f1c32f9ce9c497da4dc215c3bc84b722ea02497d35f9134db3bb40a8d918b92b","impliedFormat":1},{"version":"b73c319af2cc3ef8f6421308a250f328836531ea3761823b4cabbd133047aefa","affectsGlobalScope":true,"impliedFormat":1},{"version":"e433b0337b8106909e7953015e8fa3f2d30797cea27141d1c5b135365bb975a6","impliedFormat":1},{"version":"dd3900b24a6a8745efeb7ad27629c0f8a626470ac229c1d73f1fe29d67e44dca","impliedFormat":1},{"version":"ddff7fc6edbdc5163a09e22bf8df7bef75f75369ebd7ecea95ba55c4386e2441","impliedFormat":1},{"version":"106c6025f1d99fd468fd8bf6e5bda724e11e5905a4076c5d29790b6c3745e50c","impliedFormat":1},{"version":"ec29be0737d39268696edcec4f5e97ce26f449fa9b7afc2f0f99a86def34a418","impliedFormat":1},{"version":"aeab39e8e0b1a3b250434c3b2bb8f4d17bbec2a9dbce5f77e8a83569d3d2cbc2","impliedFormat":1},{"version":"ec6cba1c02c675e4dd173251b156792e8d3b0c816af6d6ad93f1a55d674591aa","impliedFormat":1},{"version":"b620391fe8060cf9bedc176a4d01366e6574d7a71e0ac0ab344a4e76576fcbb8","impliedFormat":1},{"version":"d729408dfde75b451530bcae944cf89ee8277e2a9df04d1f62f2abfd8b03c1e1","impliedFormat":1},{"version":"e15d3c84d5077bb4a3adee4c791022967b764dc41cb8fa3cfa44d4379b2c95f5","impliedFormat":1},{"version":"5f58e28cd22e8fc1ac1b3bc6b431869f1e7d0b39e2c21fbf79b9fa5195a85980","impliedFormat":1},{"version":"e1fc1a1045db5aa09366be2b330e4ce391550041fc3e925f60998ca0b647aa97","impliedFormat":1},{"version":"63533978dcda286422670f6e184ac516805a365fb37a086eeff4309e812f1402","impliedFormat":1},{"version":"43ba4f2fa8c698f5c304d21a3ef596741e8e85a810b7c1f9b692653791d8d97a","impliedFormat":1},{"version":"31fb49ef3aa3d76f0beb644984e01eab0ea222372ea9b49bb6533be5722d756c","impliedFormat":1},{"version":"33cd131e1461157e3e06b06916b5176e7a8ec3fce15a5cfe145e56de744e07d2","impliedFormat":1},{"version":"889ef863f90f4917221703781d9723278db4122d75596b01c429f7c363562b86","impliedFormat":1},{"version":"3556cfbab7b43da96d15a442ddbb970e1f2fc97876d055b6555d86d7ac57dae5","impliedFormat":1},{"version":"437751e0352c6e924ddf30e90849f1d9eb00ca78c94d58d6a37202ec84eb8393","impliedFormat":1},{"version":"48e8af7fdb2677a44522fd185d8c87deff4d36ee701ea003c6c780b1407a1397","impliedFormat":1},{"version":"d11308de5a36c7015bb73adb5ad1c1bdaac2baede4cc831a05cf85efa3cc7f2f","impliedFormat":1},{"version":"38e4684c22ed9319beda6765bab332c724103d3a966c2e5e1c5a49cf7007845f","impliedFormat":1},{"version":"f9812cfc220ecf7557183379531fa409acd249b9e5b9a145d0d52b76c20862de","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a403c4aeeb153bc0c1f11458d005f8e5a0af3535c4c93eedc6f7865a3593f8e","impliedFormat":1},{"version":"2e4f37ffe8862b14d8e24ae8763daaa8340c0df0b859d9a9733def0eee7562d9","impliedFormat":1},{"version":"13283350547389802aa35d9f2188effaeac805499169a06ef5cd77ce2a0bd63f","impliedFormat":1},{"version":"680793958f6a70a44c8d9ae7d46b7a385361c69ac29dcab3ed761edce1c14ab8","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"42c169fb8c2d42f4f668c624a9a11e719d5d07dacbebb63cbcf7ef365b0a75b3","impliedFormat":1},{"version":"913ddbba170240070bd5921b8f33ea780021bdf42fbdfcd4fcb2691b1884ddde","impliedFormat":1},{"version":"b4e6d416466999ff40d3fe5ceb95f7a8bfb7ac2262580287ac1a8391e5362431","impliedFormat":1},{"version":"5fe23bd829e6be57d41929ac374ee9551ccc3c44cee893167b7b5b77be708014","impliedFormat":1},{"version":"0a626484617019fcfbfc3c1bc1f9e84e2913f1adb73692aa9075817404fb41a1","impliedFormat":1},{"version":"438c7513b1df91dcef49b13cd7a1c4720f91a36e88c1df731661608b7c055f10","impliedFormat":1},{"version":"cf185cc4a9a6d397f416dd28cca95c227b29f0f27b160060a95c0e5e36cda865","impliedFormat":1},{"version":"0086f3e4ad898fd7ca56bb223098acfacf3fa065595182aaf0f6c4a6a95e6fbd","impliedFormat":1},{"version":"efaa078e392f9abda3ee8ade3f3762ab77f9c50b184e6883063a911742a4c96a","impliedFormat":1},{"version":"54a8bb487e1dc04591a280e7a673cdfb272c83f61e28d8a64cf1ac2e63c35c51","impliedFormat":1},{"version":"021a9498000497497fd693dd315325484c58a71b5929e2bbb91f419b04b24cea","impliedFormat":1},{"version":"9385cdc09850950bc9b59cca445a3ceb6fcca32b54e7b626e746912e489e535e","impliedFormat":1},{"version":"2894c56cad581928bb37607810af011764a2f511f575d28c9f4af0f2ef02d1ab","impliedFormat":1},{"version":"0a72186f94215d020cb386f7dca81d7495ab6c17066eb07d0f44a5bf33c1b21a","impliedFormat":1},{"version":"84124384abae2f6f66b7fbfc03862d0c2c0b71b826f7dbf42c8085d31f1d3f95","impliedFormat":1},{"version":"63a8e96f65a22604eae82737e409d1536e69a467bb738bec505f4f97cce9d878","impliedFormat":1},{"version":"3fd78152a7031315478f159c6a5872c712ece6f01212c78ea82aef21cb0726e2","impliedFormat":1},{"version":"250f9a1f11580b6b8a0a86835946f048eb605b3a596196741bfe72dc8f6c69cc","impliedFormat":1},{"version":"512fc15cca3a35b8dbbf6e23fe9d07e6f87ad03c895acffd3087ce09f352aad0","impliedFormat":1},{"version":"9a0946d15a005832e432ea0cd4da71b57797efb25b755cc07f32274296d62355","impliedFormat":1},{"version":"a52ff6c0a149e9f370372fc3c715d7f2beee1f3bab7980e271a7ab7d313ec677","impliedFormat":1},{"version":"fd933f824347f9edd919618a76cdb6a0c0085c538115d9a287fa0c7f59957ab3","impliedFormat":1},{"version":"6ac6715916fa75a1f7ebdfeacac09513b4d904b667d827b7535e84ff59679aff","impliedFormat":1},{"version":"6a1aa3e55bdc50503956c5cd09ae4cd72e3072692d742816f65c66ca14f4dfdd","impliedFormat":1},{"version":"ab75cfd9c4f93ffd601f7ca1753d6a9d953bbedfbd7a5b3f0436ac8a1de60dfa","impliedFormat":1},{"version":"f95180f03d827525ca4f990f49e17ec67198c316dd000afbe564655141f725cd","impliedFormat":1},{"version":"b73cbf0a72c8800cf8f96a9acfe94f3ad32ca71342a8908b8ae484d61113f647","impliedFormat":1},{"version":"bae6dd176832f6423966647382c0d7ba9e63f8c167522f09a982f086cd4e8b23","impliedFormat":1},{"version":"1364f64d2fb03bbb514edc42224abd576c064f89be6a990136774ecdd881a1da","impliedFormat":1},{"version":"c9958eb32126a3843deedda8c22fb97024aa5d6dd588b90af2d7f2bfac540f23","impliedFormat":1},{"version":"950fb67a59be4c2dbe69a5786292e60a5cb0e8612e0e223537784c731af55db1","impliedFormat":1},{"version":"e927c2c13c4eaf0a7f17e6022eee8519eb29ef42c4c13a31e81a611ab8c95577","impliedFormat":1},{"version":"07ca44e8d8288e69afdec7a31fa408ce6ab90d4f3d620006701d5544646da6aa","impliedFormat":1},{"version":"70246ad95ad8a22bdfe806cb5d383a26c0c6e58e7207ab9c431f1cb175aca657","impliedFormat":1},{"version":"f00f3aa5d64ff46e600648b55a79dcd1333458f7a10da2ed594d9f0a44b76d0b","impliedFormat":1},{"version":"772d8d5eb158b6c92412c03228bd9902ccb1457d7a705b8129814a5d1a6308fc","impliedFormat":1},{"version":"4e4475fba4ed93a72f167b061cd94a2e171b82695c56de9899275e880e06ba41","impliedFormat":1},{"version":"97c5f5d580ab2e4decd0a3135204050f9b97cd7908c5a8fbc041eadede79b2fa","impliedFormat":1},{"version":"c99a3a5f2215d5b9d735aa04cec6e61ed079d8c0263248e298ffe4604d4d0624","impliedFormat":1},{"version":"49b2375c586882c3ac7f57eba86680ff9742a8d8cb2fe25fe54d1b9673690d41","impliedFormat":1},{"version":"802e797bcab5663b2c9f63f51bdf67eff7c41bc64c0fd65e6da3e7941359e2f7","impliedFormat":1},{"version":"9ff1e8df66450af44161c1bfe34bc92c43074cfeec7a0a75f721830e9aabe379","impliedFormat":1},{"version":"3ecfccf916fea7c6c34394413b55eb70e817a73e39b4417d6573e523784e3f8e","impliedFormat":1},{"version":"5cdc27fbc5c166fc5c763a30ac21cbac9859dc5ba795d3230db6d4e52a1965bb","impliedFormat":1},{"version":"6459054aabb306821a043e02b89d54da508e3a6966601a41e71c166e4ea1474f","impliedFormat":1},{"version":"f416c9c3eee9d47ff49132c34f96b9180e50485d435d5748f0e8b72521d28d2e","impliedFormat":1},{"version":"05c97cddbaf99978f83d96de2d8af86aded9332592f08ce4a284d72d0952c391","impliedFormat":1},{"version":"14e5cdec6f8ae82dfd0694e64903a0a54abdfe37e1d966de3d4128362acbf35f","impliedFormat":1},{"version":"bbc183d2d69f4b59fd4dd8799ffdf4eb91173d1c4ad71cce91a3811c021bf80c","impliedFormat":1},{"version":"7b6ff760c8a240b40dab6e4419b989f06a5b782f4710d2967e67c695ef3e93c4","impliedFormat":1},{"version":"8dbc4134a4b3623fc476be5f36de35c40f2768e2e3d9ed437e0d5f1c4cd850f6","impliedFormat":1},{"version":"4e06330a84dec7287f7ebdd64978f41a9f70a668d3b5edc69d5d4a50b9b376bb","impliedFormat":1},{"version":"65bfa72967fbe9fc33353e1ac03f0480aa2e2ea346d61ff3ea997dfd850f641a","impliedFormat":1},{"version":"c06f0bb92d1a1a5a6c6e4b5389a5664d96d09c31673296cb7da5fe945d54d786","impliedFormat":1},{"version":"f974e4a06953682a2c15d5bd5114c0284d5abf8bc0fe4da25cb9159427b70072","impliedFormat":1},{"version":"872caaa31423f4345983d643e4649fb30f548e9883a334d6d1c5fff68ede22d4","impliedFormat":1},{"version":"94404c4a878fe291e7578a2a80264c6f18e9f1933fbb57e48f0eb368672e389c","impliedFormat":1},{"version":"5c1b7f03aa88be854bc15810bfd5bd5a1943c5a7620e1c53eddd2a013996343e","impliedFormat":1},{"version":"09dfc64fcd6a2785867f2368419859a6cc5a8d4e73cbe2538f205b1642eb0f51","impliedFormat":1},{"version":"bcf6f0a323653e72199105a9316d91463ad4744c546d1271310818b8cef7c608","impliedFormat":1},{"version":"01aa917531e116485beca44a14970834687b857757159769c16b228eb1e49c5f","impliedFormat":1},{"version":"351475f9c874c62f9b45b1f0dc7e2704e80dfd5f1af83a3a9f841f9dfe5b2912","impliedFormat":1},{"version":"ac457ad39e531b7649e7b40ee5847606eac64e236efd76c5d12db95bf4eacd17","impliedFormat":1},{"version":"187a6fdbdecb972510b7555f3caacb44b58415da8d5825d03a583c4b73fde4cf","impliedFormat":1},{"version":"d4c3250105a612202289b3a266bb7e323db144f6b9414f9dea85c531c098b811","impliedFormat":1},{"version":"95b444b8c311f2084f0fb51c616163f950fb2e35f4eaa07878f313a2d36c98a4","impliedFormat":1},{"version":"741067675daa6d4334a2dc80a4452ca3850e89d5852e330db7cb2b5f867173b1","impliedFormat":1},{"version":"f8acecec1114f11690956e007d920044799aefeb3cece9e7f4b1f8a1d542b2c9","impliedFormat":1},{"version":"178071ccd043967a58c5d1a032db0ddf9bd139e7920766b537d9783e88eb615e","impliedFormat":1},{"version":"3a17f09634c50cce884721f54fd9e7b98e03ac505889c560876291fcf8a09e90","impliedFormat":1},{"version":"32531dfbb0cdc4525296648f53b2b5c39b64282791e2a8c765712e49e6461046","impliedFormat":1},{"version":"0ce1b2237c1c3df49748d61568160d780d7b26693bd9feb3acb0744a152cd86d","impliedFormat":1},{"version":"e489985388e2c71d3542612685b4a7db326922b57ac880f299da7026a4e8a117","impliedFormat":1},{"version":"5cad4158616d7793296dd41e22e1257440910ea8d01c7b75045d4dfb20c5a41a","impliedFormat":1},{"version":"04d3aad777b6af5bd000bfc409907a159fe77e190b9d368da4ba649cdc28d39e","affectsGlobalScope":true,"impliedFormat":1},{"version":"74efc1d6523bd57eb159c18d805db4ead810626bc5bc7002a2c7f483044b2e0f","impliedFormat":1},{"version":"19252079538942a69be1645e153f7dbbc1ef56b4f983c633bf31fe26aeac32cd","impliedFormat":1},{"version":"bc11f3ac00ac060462597add171220aed628c393f2782ac75dd29ff1e0db871c","impliedFormat":1},{"version":"616775f16134fa9d01fc677ad3f76e68c051a056c22ab552c64cc281a9686790","impliedFormat":1},{"version":"65c24a8baa2cca1de069a0ba9fba82a173690f52d7e2d0f1f7542d59d5eb4db0","impliedFormat":1},{"version":"f9fe6af238339a0e5f7563acee3178f51db37f32a2e7c09f85273098cee7ec49","impliedFormat":1},{"version":"3b0b1d352b8d2e47f1c4df4fb0678702aee071155b12ef0185fce9eb4fa4af1e","impliedFormat":1},{"version":"77e71242e71ebf8528c5802993697878f0533db8f2299b4d36aa015bae08a79c","impliedFormat":1},{"version":"a344403e7a7384e0e7093942533d309194ad0a53eca2a3100c0b0ab4d3932773","impliedFormat":1},{"version":"b7fff2d004c5879cae335db8f954eb1d61242d9f2d28515e67902032723caeab","impliedFormat":1},{"version":"5f3dc10ae646f375776b4e028d2bed039a93eebbba105694d8b910feebbe8b9c","impliedFormat":1},{"version":"bb18bf4a61a17b4a6199eb3938ecfa4a59eb7c40843ad4a82b975ab6f7e3d925","impliedFormat":1},{"version":"4545c1a1ceca170d5d83452dd7c4994644c35cf676a671412601689d9a62da35","impliedFormat":1},{"version":"e9b6fc05f536dfddcdc65dbcf04e09391b1c968ab967382e48924f5cb90d88e1","impliedFormat":1},{"version":"a2d648d333cf67b9aeac5d81a1a379d563a8ffa91ddd61c6179f68de724260ff","impliedFormat":1},{"version":"2b664c3cc544d0e35276e1fb2d4989f7d4b4027ffc64da34ec83a6ccf2e5c528","impliedFormat":1},{"version":"a3f41ed1b4f2fc3049394b945a68ae4fdefd49fa1739c32f149d32c0545d67f5","impliedFormat":1},{"version":"3cd8f0464e0939b47bfccbb9bb474a6d87d57210e304029cd8eb59c63a81935d","impliedFormat":1},{"version":"47699512e6d8bebf7be488182427189f999affe3addc1c87c882d36b7f2d0b0e","impliedFormat":1},{"version":"3026abd48e5e312f2328629ede6e0f770d21c3cd32cee705c450e589d015ee09","impliedFormat":1},{"version":"8b140b398a6afbd17cc97c38aea5274b2f7f39b1ae5b62952cfe65bf493e3e75","impliedFormat":1},{"version":"7663d2c19ce5ef8288c790edba3d45af54e58c84f1b37b1249f6d49d962f3d91","impliedFormat":1},{"version":"5cce3b975cdb72b57ae7de745b3c5de5790781ee88bcb41ba142f07c0fa02e97","impliedFormat":1},{"version":"00bd6ebe607246b45296aa2b805bd6a58c859acecda154bfa91f5334d7c175c6","impliedFormat":1},{"version":"ad036a85efcd9e5b4f7dd5c1a7362c8478f9a3b6c3554654ca24a29aa850a9c5","impliedFormat":1},{"version":"fedebeae32c5cdd1a85b4e0504a01996e4a8adf3dfa72876920d3dd6e42978e7","impliedFormat":1},{"version":"0d28b974a7605c4eda20c943b3fa9ae16cb452c1666fc9b8c341b879992c7612","impliedFormat":1},{"version":"cdf21eee8007e339b1b9945abf4a7b44930b1d695cc528459e68a3adc39a622e","impliedFormat":1},{"version":"db036c56f79186da50af66511d37d9fe77fa6793381927292d17f81f787bb195","impliedFormat":1},{"version":"87ac2fb61e629e777f4d161dff534c2023ee15afd9cb3b1589b9b1f014e75c58","impliedFormat":1},{"version":"13c8b4348db91e2f7d694adc17e7438e6776bc506d5c8f5de9ad9989707fa3fe","impliedFormat":1},{"version":"3c1051617aa50b38e9efaabce25e10a5dd9b1f42e372ef0e8a674076a68742ed","impliedFormat":1},{"version":"07a3e20cdcb0f1182f452c0410606711fbea922ca76929a41aacb01104bc0d27","impliedFormat":1},{"version":"1de80059b8078ea5749941c9f863aa970b4735bdbb003be4925c853a8b6b4450","impliedFormat":1},{"version":"1d079c37fa53e3c21ed3fa214a27507bda9991f2a41458705b19ed8c2b61173d","impliedFormat":1},{"version":"4cd4b6b1279e9d744a3825cbd7757bbefe7f0708f3f1069179ad535f19e8ed2c","impliedFormat":1},{"version":"5835a6e0d7cd2738e56b671af0e561e7c1b4fb77751383672f4b009f4e161d70","impliedFormat":1},{"version":"c0eeaaa67c85c3bb6c52b629ebbfd3b2292dc67e8c0ffda2fc6cd2f78dc471e6","impliedFormat":1},{"version":"4b7f74b772140395e7af67c4841be1ab867c11b3b82a51b1aeb692822b76c872","impliedFormat":1},{"version":"27be6622e2922a1b412eb057faa854831b95db9db5035c3f6d4b677b902ab3b7","impliedFormat":1},{"version":"b95a6f019095dd1d48fd04965b50dfd63e5743a6e75478343c46d2582a5132bf","impliedFormat":99},{"version":"c2008605e78208cfa9cd70bd29856b72dda7ad89df5dc895920f8e10bcb9cd0a","impliedFormat":99},{"version":"b97cb5616d2ab82a98ec9ada7b9e9cabb1f5da880ec50ea2b8dc5baa4cbf3c16","impliedFormat":99},{"version":"d23df9ff06ae8bf1dcb7cc933e97ae7da418ac77749fecee758bb43a8d69f840","affectsGlobalScope":true,"impliedFormat":1},{"version":"040c71dde2c406f869ad2f41e8d4ce579cc60c8dbe5aa0dd8962ac943b846572","affectsGlobalScope":true,"impliedFormat":1},{"version":"3586f5ea3cc27083a17bd5c9059ede9421d587286d5a47f4341a4c2d00e4fa91","impliedFormat":1},{"version":"a6df929821e62f4719551f7955b9f42c0cd53c1370aec2dd322e24196a7dfe33","impliedFormat":1},{"version":"b789bf89eb19c777ed1e956dbad0925ca795701552d22e68fd130a032008b9f9","impliedFormat":1},{"version":"913f266e662b32666d6d68cd54e97a26fc7b58ddb247182f4ede6ec6d851c629","impliedFormat":1},"1a7899b03ba28f519a1d53f166fdc0ebdaf4d220209e8cb212414fefa524290d",{"version":"402e5c534fb2b85fa771170595db3ac0dd532112c8fa44fc23f233bc6967488b","impliedFormat":1},{"version":"8885cf05f3e2abf117590bbb951dcf6359e3e5ac462af1c901cfd24c6a6472e2","impliedFormat":1},{"version":"4d979e3c12ffb6497d2b1dc5613130196d986fff764c4526360c0716a162e7e7","impliedFormat":1},{"version":"e61df3640a38d535fd4bc9f4a53aef17c296b58dc4b6394fd576b808dd2fe5e6","impliedFormat":1},{"version":"80781460eca408fe8d2937d9fdbbb780d6aac35f549621e6200c9bee1da5b8fe","impliedFormat":1},{"version":"4719c209b9c00b579553859407a7e5dcfaa1c472994bd62aa5dd3cc0757eb077","impliedFormat":1},{"version":"7ec359bbc29b69d4063fe7dad0baaf35f1856f914db16b3f4f6e3e1bca4099fa","impliedFormat":1},{"version":"b9261ac3e9944d3d72c5ee4cf888ad35d9743a5563405c6963c4e43ee3708ca4","impliedFormat":1},{"version":"c84fd54e8400def0d1ef1569cafd02e9f39a622df9fa69b57ccc82128856b916","impliedFormat":1},{"version":"a022503e75d6953d0e82c2c564508a5c7f8556fad5d7f971372d2d40479e4034","impliedFormat":1},{"version":"2ed6489ef46eb61442d067c08e87e3db501c0bfb2837eee4041a27bf3e792bb0","impliedFormat":1},{"version":"644491cde678bd462bb922c1d0cfab8f17d626b195ccb7f008612dc31f445d2d","impliedFormat":1},{"version":"d60fe6d59d4e19ecc65359490b8535e359ca4b760d2cdb56897ca75d09d41ba3","impliedFormat":1},{"version":"f45a2a8b1777ecb50ed65e1a04bb899d4b676529b7921bd5d69b08573a00c832","impliedFormat":1},{"version":"774b783046ba3d473948132d28a69f52a295b2f378f2939304118ba571b1355e","impliedFormat":1},{"version":"b5734e05c787a40e4f9efe71f16683c5f7dc3bdb0de7c04440c855bd000f8fa7","impliedFormat":1},{"version":"14ba97f0907144771331e1349fdccb5a13526eba0647e6b447e572376d811b6f","impliedFormat":1},{"version":"2a771d907aebf9391ac1f50e4ad37952943515eeea0dcc7e78aa08f508294668","impliedFormat":1},{"version":"7165050eddaed878c2d2cd3cafcaf171072ac39e586a048c0603712b5555f536","impliedFormat":1},{"version":"b558c9a18ea4e6e4157124465c3ef1063e64640da139e67be5edb22f534f2f08","impliedFormat":1},{"version":"01374379f82be05d25c08d2f30779fa4a4c41895a18b93b33f14aeef51768692","impliedFormat":1},{"version":"b0dee183d4e65cf938242efaf3d833c6b645afb35039d058496965014f158141","impliedFormat":1},{"version":"c0bbbf84d3fbd85dd60d040c81e8964cc00e38124a52e9c5dcdedf45fea3f213","impliedFormat":1},{"version":"1dacb6ae2c0d095c0c085032f1f918cbb29f27f1f433c0374935347a0d99bb5b","impliedFormat":1},{"version":"c697d4b4bb7b34d62a437d010e85f53f9f5b2b5662bf5f8837fb2aebe8b25794","signature":"f65ce75c9085571e6321abf2bf9833709f4897e381f89e9925521833dbb7ab16"},{"version":"cdcc132f207d097d7d3aa75615ab9a2e71d6a478162dde8b67f88ea19f3e54de","impliedFormat":1},{"version":"0d14fa22c41fdc7277e6f71473b20ebc07f40f00e38875142335d5b63cdfc9d2","impliedFormat":1},{"version":"c085e9aa62d1ae1375794c1fb927a445fa105fed891a7e24edbb1c3300f7384a","impliedFormat":1},{"version":"f315e1e65a1f80992f0509e84e4ae2df15ecd9ef73df975f7c98813b71e4c8da","impliedFormat":1},{"version":"5b9586e9b0b6322e5bfbd2c29bd3b8e21ab9d871f82346cb71020e3d84bae73e","impliedFormat":1},{"version":"3e70a7e67c2cb16f8cd49097360c0309fe9d1e3210ff9222e9dac1f8df9d4fb6","impliedFormat":1},{"version":"ab68d2a3e3e8767c3fba8f80de099a1cfc18c0de79e42cb02ae66e22dfe14a66","impliedFormat":1},{"version":"d96cc6598148bf1a98fb2e8dcf01c63a4b3558bdaec6ef35e087fd0562eb40ec","impliedFormat":1},{"version":"5b9586e9b0b6322e5bfbd2c29bd3b8e21ab9d871f82346cb71020e3d84bae73e","impliedFormat":1},{"version":"f8db4fea512ab759b2223b90ecbbe7dae919c02f8ce95ec03f7fb1cf757cfbeb","affectsGlobalScope":true,"impliedFormat":1},{"version":"ae77d81a5541a8abb938a0efedf9ac4bea36fb3a24cc28cfa11c598863aba571","impliedFormat":1},{"version":"72e9425f1ba1eb7fd8122d08f48848a0d56de1cd4c7b51f26dc2612bd26c7241","impliedFormat":1},{"version":"841784cfa9046a2b3e453d638ea5c3e53680eb8225a45db1c13813f6ea4095e5","affectsGlobalScope":true,"impliedFormat":1},{"version":"646ef1cff0ec3cf8e96adb1848357788f244b217345944c2be2942a62764b771","impliedFormat":1},{"version":"462bccdf75fcafc1ae8c30400c9425e1a4681db5d605d1a0edb4f990a54d8094","impliedFormat":1},{"version":"5923d8facbac6ecf7c84739a5c701a57af94a6f6648d6229a6c768cf28f0f8cb","impliedFormat":1},{"version":"796d35ad18e3f2467aaf54b9b3fd6a94c77f8f9df1b41aaefe1c3dab8ce97438","impliedFormat":1},{"version":"40191405914c9e13ed32ed31eca4a74ef06be535b44594eb76b9ba04680d5031","impliedFormat":1},{"version":"e27bbd0b7b7e54b3703765eebb805658672c52752342d8dfaa56820c88fc8333","impliedFormat":1},{"version":"da2472f38d0822ed781c936487b660252404b621b37dd5da33759f13ba86c54e","impliedFormat":1},{"version":"b866f210782993cdbd699401da0bb2887bfd2106526c9f1eb2065a155bd256ff","impliedFormat":1},{"version":"e4e0883cbb3029c517406d2956c0745e44403afd820e89a473485129ad66359b","impliedFormat":1},{"version":"5f4138fcf24316124b815f3ab41a903ef327104836cdcb21dc91f0ca4fe28eb4","impliedFormat":1},{"version":"0946db5ba69c0a029c299eabc1f80f663a5e5d855250ea5dda75651bb36a5c7c","impliedFormat":1},{"version":"76e70ccd3b742aa3c1ef281b537203232c5b4f920c4dcb06417c8e165f7ea028","impliedFormat":1},{"version":"f53e235ded29e288104880b8efa5a7f57c93ca95dc2315abfbd97e0b96763af7","impliedFormat":1},{"version":"b0e1cfe960f00ad8bdab0c509cf212795f747b17b96b35494760e8d1fae2e885","impliedFormat":1},{"version":"a6c5c2ac61526348cfe38229080a552b7016d614df208b7c3ad2bbd8219c4a95","impliedFormat":1},{"version":"9971dead65b4e7c286ed2ca96d76e47681700005a8485e3b0c72b41f03c7c4b0","impliedFormat":1},{"version":"d870bf94d9274815d95f0d5658825747d3afc24bd010e607392b3f034e695199","impliedFormat":1},{"version":"bbdac91149ba4f40bf869adc0e15fa41815ef212b452948fc8e773ff6ee38808","impliedFormat":1},{"version":"dbcce14910b92dcfe89969aa3bcd10e8ae6be0164cae122ac8b681cd508498e3","impliedFormat":1},{"version":"16a684817cfa7433281c6cd908240b60c4b8fe95ca108079e2052bafbd86dca9","impliedFormat":1},{"version":"480ffa66827143d60025514f0d979f7bc790024821e5ecc12967ce13a7e3e08a","impliedFormat":1},{"version":"303f2d7549e1ae66106064405824e6ae141e9ff2c05ead507afff445610dbf76","impliedFormat":1},{"version":"1a18fcd7ea90842d336fb814801c837368c8ad16807f167b875b89267f1c2530","impliedFormat":1},{"version":"ed0c5e5f3b30334bbd99a73ee4faa47a799b4e5928114131f7b2d123f3d22ca0","impliedFormat":1},{"version":"6c2ad16b31ef481da774dd641a36f124dbcedeb3653891b9869639fa6f2f4a30","impliedFormat":1},{"version":"ee5e067150f421651188289a1e84f9bdf513da63cc82e8d6998b3d41a3cc39bf","impliedFormat":1},{"version":"0a78f771b4e030f1fcb03ecb7bd33e608b536e8c76ffb2f8728ad77b6ff68ad9","affectsGlobalScope":true,"impliedFormat":1},{"version":"3cfb7c0c642b19fb75132154040bb7cd840f0002f9955b14154e69611b9b3f81","impliedFormat":1},{"version":"8387ec1601cf6b8948672537cf8d430431ba0d87b1f9537b4597c1ab8d3ade5b","impliedFormat":1},{"version":"d16f1c460b1ca9158e030fdf3641e1de11135e0c7169d3e8cf17cc4cc35d5e64","impliedFormat":1},{"version":"a934063af84f8117b8ce51851c1af2b76efe960aa4c7b48d0343a1b15c01aedf","impliedFormat":1},{"version":"e3c5ad476eb2fca8505aee5bdfdf9bf11760df5d0f9545db23f12a5c4d72a718","impliedFormat":1},{"version":"d0570ce419fb38287e7b39c910b468becb5b2278cf33b1000a3d3e82a46ecae2","impliedFormat":1},{"version":"3aca7f4260dad9dcc0a0333654cb3cde6664d34a553ec06c953bce11151764d7","impliedFormat":1},{"version":"a0a6f0095f25f08a7129bc4d7cb8438039ec422dc341218d274e1e5131115988","impliedFormat":1},{"version":"1d2699a343a347a830be26eb17ab340d7875c6f549c8d7477efb1773060cc7e5","impliedFormat":1},{"version":"45785e608b3d380c79e21957a6d1467e1206ac0281644e43e8ed6498808ace72","impliedFormat":1},{"version":"bece27602416508ba946868ad34d09997911016dbd6893fb884633017f74e2c5","impliedFormat":1},{"version":"2a90177ebaef25de89351de964c2c601ab54d6e3a157cba60d9cd3eaf5a5ee1a","impliedFormat":1},{"version":"82200e963d3c767976a5a9f41ecf8c65eca14a6b33dcbe00214fcbe959698c46","impliedFormat":1},{"version":"b4966c503c08bbd9e834037a8ab60e5f53c5fd1092e8873c4a1c344806acdab2","impliedFormat":1},{"version":"b598deb1da203a2b58c76cf8d91cfc2ca172d785dacd8466c0a11e400ff6ab2d","impliedFormat":1},{"version":"f3ded47c50efa3fbc7105c933490fa0cf48df063248a5b27bca5849d5d126f9b","impliedFormat":1},{"version":"b4cbe22cf34d8725d8ffc5dd6dcf5b25832e0eefbe42ceed604e48d1052d8b59","signature":"2d9680e190fe8e941c6b3fd2d89e06ca0c624fbdd4fe6a381dea9132f4d483e7","affectsGlobalScope":true},{"version":"5191445a2f36c79c5f83948bbe7d0df7d9806b85af0d81958926ba7ac484829f","signature":"d1d8e685e20bd129c05eede662e953f662586bfd15208b842bf608eed0635d06"},{"version":"8aa9289674cf0554ad4500c2b6fed5b756e357284ab39ea945f2b4c9a82efa28","signature":"078f38467d6b6a74acd8311a49f526ddbda0def00c76db6e8feea8a00e53202c"},{"version":"d0f3553913fa92284049aa15b06c560e5e19ce12e35386b723ef1b22188b1f7d","signature":"600c627a2492c6c4fb8a4b2bc88bb66215ab2365bee7bdbd6f2bfca6a1a4484b"},{"version":"7e7f2e0029b8a4e4b1d43a9f4aeb4d00b0eaa56f5fbdf620a8e0445e0457f7a1","signature":"75582a3ec8b53056d9e8f49481521c4e8b5faf5dfbf0e67aae34fa91871d44e2"},{"version":"a90a5d2535f1de61b824dc8bf1928f68b20df3e323ba924f682d5c1f18b88d4d","impliedFormat":1},{"version":"ef73bcfef9907c8b772a30e5a64a6bd86a5669cba3d210fcdcc6b625e3312459","impliedFormat":1},{"version":"26c57c9f839e6d2048d6c25e81f805ba0ca32a28fd4d824399fd5456c9b0575b","impliedFormat":1},{"version":"431623e18582bfe5fbfe57b758d1a4bf39b00dd7a082ed792eaf6b060ad68c5a","signature":"fc9111bf6e5e067b9c3e47e4f2c2f0b3ca9c6d95408104b7f013ccc3d8200888"},{"version":"262b8040a373fcbac36de65f0d6152cb27130ca370e37ace66691c7b827c3222","signature":"83093bfb08224d2df97aa8a6428a9b75550002b15275b7d124bbc0c062b086d2"},{"version":"1fb4f794fe6a698faa823ed2a31aa416ca1ed51180f1f86bba9084e83199b65b","signature":"118b180033da183dd9d647e633405819950728b3748c4adeea950bb2ea9013f3"},{"version":"3d21411cab07961505ee39ee11fa0a4f412b055959c2a8fc3e0a40306fab594f","signature":"13f4948e337fdcd47919ccddf19e4c49978f79228cc532d85664a7c454621ddb"},{"version":"235571765a37aa53a14a593896d18f3a7c798cd2ec83c4bb39a960a1613bcfdd","signature":"9ef64374d57eba5faf28977476472b06dc820fdc3a5fd73f214d9701b8e9faf6"},{"version":"79dc313adecbee177b1b0d1c5cd45513e7cc67bbf8dcf006efcbe29457ab5ad9","signature":"47a12ed49fa74cc4d5b6c12c28cf539c951127bdb98d5dba65baf40062e50b71"},{"version":"41fe4a72ac67dc4e18beb7a816a318552e497b5a366dbee3e8a3cacbfdb91112","signature":"0a3f314977be90d37287dcc219f075f630add5611e6f9c9bfbd9fcec5b15aabb"},{"version":"c79b35070f2dd199581d87279c09c1b91945cfaaca0ccef7a844b95751547f65","signature":"9a1e8546897d87455082796a49f2a9dc037097d9f34d4a91a282ede1917356ce"},{"version":"6ab10320e34b2af552803e090024279d4c19a31aa3b70619a7963e4337d903a5","signature":"e6e85970d2e17309962495f2767a3fc3ba5d7ff03731ab82a1533671a1e51005"},{"version":"ec42d5060ebc7e5ddea66e8a1e73b0ec7e04c691cbf28b4acbf3f310aa7a2cf0","signature":"261e0734e3ddd355100af28183fce1dde80340001d7625c776db144a171e19f0"},{"version":"d33b39ebaa76aa195aaf64b6123d12ea52f8168101dd38d6a4241aff0eadebf2","signature":"06695faafc77efaa0eb1fc974ffd0253ddf716db2082d9f2410fd62a7d155745"},{"version":"a26d74bc8768e134734fa049d5a89fb674a560292f4bf1b39392416dc04cf49e","impliedFormat":1},{"version":"ea7f3d87bb25b8cf26c1b440de31b628c53b5e72e8f1ab1726356bf58acf5946","impliedFormat":1},{"version":"7ec047b73f621c526468517fea779fec2007dd05baa880989def59126c98ef79","impliedFormat":1},{"version":"6fb3298e948c919dddff11c2b835e0d78e0b7f8597aff359c359a0e5a64cffe0","impliedFormat":1},{"version":"f876363b4931492eccba17cf0416f4aca9b777d67831aaf7567d41a09c72fbc6","impliedFormat":1},{"version":"4f3fd2c8dcecbfe86c1362e32646294d695b20d8a3a23adf65257dbed02ca3e8","signature":"971374956ebede16ae3fab6047ab694163f6b794b0e49402ea63889231318ad5"},{"version":"2c39eb9744b4fb0cee1164677c0fb4ab41b9cc35f14d42f835948f9ab5585741","signature":"a5b0f751b50943d8f931d5383860dae7d1ab15ca23a920b8cb704dfda929bdde"},{"version":"6c4d9f379c5b774d1024bccfb50577731db96fc13802a0224c98be1be5874fa1","signature":"45ad231b52b86fa64929cb3fd01666a530bad538c21f45282cd7c23da2b3c4b3"},{"version":"2fbe402f0ee5aa8ab55367f88030f79d46211c0a0f342becaa9f648bf8534e9d","impliedFormat":1},{"version":"b94258ef37e67474ac5522e9c519489a55dcb3d4a8f645e335fc68ea2215fe88","impliedFormat":1},{"version":"ed78a053a9db783f48d5dfab7398b630f87c17ed2e237b6f30a3eb153675960c","signature":"9034f51292c4de03cd7c760af68335ccdaa3b45b8bedf13864785a1537ec2b4f"},{"version":"a80b7bc4eda856374c26a56f6f25297f4c393309d4c4548002a5238cd57b2b66","impliedFormat":1},{"version":"eda62fdf1d985fed447d194af8a965b540b523c3f0a7edf8094b64d952e331a6","signature":"394a86e64700ddacca6fea2d9bf459d7e04a882a3e29b7e71673da96356dd815"},{"version":"26b5585e62ced88beba1bb21425dee7cfc73ed40a1c439edf5f24a856b327dd2","signature":"8176f5c37e0dd23f1160ecdab7047e6923b5749a92fed72d42f2443606119de3"},{"version":"b788fd2e1525ca556d0f667041ed31793e4edf1f45ba1fe2f9449bdc1a9cdd1b","signature":"2ab41c6bf332cb99110c7a153d06f87404cc613491cbbc0c81e22e93f2ffab02"},{"version":"2d073c8748f27a0442a189eee817401b75ca564dc9562a21a1dcde1cfb52ef4e","signature":"0f2bb8c21abe7510965dc33a62b397d5c46a09764bb5a7e5e33731c0054c02ed"},{"version":"5e5b2093df72ccd935bc27ed43187cefa585b7134adda6419987cff55605f7f8","signature":"da57dcbcce8ec1dca8f0faf27e2b3d361fae9e28d9ffe9effb95733ea39e2d4a"},{"version":"eaf61d57ae580a284cf108dc14f6bdcde22bd5bf65571723137b90185ec78024","signature":"5eb7912d9d6a8949c7a8ad92f9019bd157247e31487b3fa463959f74d0f3dedc"},{"version":"71acd198e19fa38447a3cbc5c33f2f5a719d933fccf314aaff0e8b0593271324","impliedFormat":1},{"version":"91b4ce96f6ad631a0a6920eb0ab928159ff01a439ae0e266ecdc9ea83126a195","impliedFormat":1},{"version":"e3448881d526bfca052d5f9224cc772f61d9fc84d0c52eb7154b13bd4db9d8b2","impliedFormat":1},{"version":"e348f128032c4807ad9359a1fff29fcbc5f551c81be807bfa86db5a45649b7ba","impliedFormat":1},{"version":"42f4d7040a48e5b9c9b20b5f17a04c381676211bdb0b5a580a183cf5908664be","impliedFormat":1},{"version":"ad4d2c881a46db2a93346d760aa4e5e9f7d79a87e4b443055f5416b10dbe748c","impliedFormat":1},{"version":"c2fc483dea0580d1266c1500f17e49a739ca6cfe408691da638ddc211dfffad0","impliedFormat":1},{"version":"7c31a2b77ae042fb1f057c21367e730f364849ae8fa1d72f5a9936cef963a8b2","impliedFormat":1},{"version":"650d4007870fee41b86182e7965c6fb80283388d0ba8882ce664cc311a2840b5","impliedFormat":1},{"version":"6cfa0cdc8ff57cef4d6452ac55f5db4bc1a8967f4c005785e7b679da560d2d9c","impliedFormat":1},{"version":"c16c3b97930e8fbf05022024f049d51c998dd5eb6509047e1f841777968e85c1","impliedFormat":1},{"version":"cce15e7530c8062dea0666a174f31c1fe445a97357885480748b072778fc6f36","impliedFormat":1},{"version":"535b2fc8c89091c20124fe144699bb4a96d5db4418a1594a9a0a6a863b2195ae","impliedFormat":1},{"version":"dd5165bf834f6e784b4aad9fae6d84307c19f140829e4c6c4123b2d1a707d8bd","impliedFormat":1},{"version":"7ee6cd3fbeb95b580c5447f49129a4dc1604bfc96defe387a76f96884d59f844","impliedFormat":1},{"version":"21575cdeaca6a2c2a0beb8c2ecbc981d9deb95f879f82dc7d6e325fe8737b5ba","impliedFormat":1},{"version":"d668cc634f10837bf57e2a9bf13ccc4952cbf997015f2b8095d935f50bf625d0","impliedFormat":1},{"version":"faba53dda443d501f30e2d92ed33a8d11f88b420b0e2f03c5d7d62ebe9e7c389","impliedFormat":1},{"version":"3eb7d541136cd8b66020417086e4f481fb1ae0e2b916846d43cbf0b540371954","impliedFormat":1},{"version":"9ff4b9f562c6b70f750ca1c7a88d460442f55007843531f233ab827c102ac855","impliedFormat":1},{"version":"4f4cbbada4295ab9497999bec19bd2eea1ede9212eb5b4d0d6e529df533c5a4b","impliedFormat":1},{"version":"cf81fae6e5447acb74958bc8353b0d50b6700d4b3a220c9e483f42ca7a7041aa","impliedFormat":1},{"version":"92f6f02b25b107a282f27fde90a78cbd46e21f38c0d7fc1b67aea3fff35f083e","impliedFormat":1},{"version":"479eec32bca85c1ff313f799b894c6bb304fdab394b50296e6efe4304d9f00aa","impliedFormat":1},{"version":"27c37f4535447fb3191a4c1bd9a5fcab1922bec4e730f13bace2cfa25f8d7367","impliedFormat":1},{"version":"3e9b3266a6b9e5b3e9a293c27fd670871753ab46314ce3eca898d2bcf58eb604","impliedFormat":1},{"version":"369b7270eeeb37982203b2cb18c7302947b89bf5818c1d3d2e95a0418f02b74e","impliedFormat":1},{"version":"3d724c9a01d0171d38a7492263ae15069e276791c9403c9dd24ee6189fbd2bf5","impliedFormat":1},{"version":"039bd8d1e0d151570b66e75ee152877fb0e2f42eca43718632ac195e6884be34","impliedFormat":1},{"version":"89fb1e22c3c98cbb86dc3e5949012bdae217f2b5d768a2cc74e1c4b413c25ad2","impliedFormat":1},{"version":"7ec73b490a26cdc4ebe9cb158863fc2c40bf380e026b4bc8475fcc51ec878fb7","signature":"6d202fcaf2b48a116115057410408abe8b0e21185ef5ff19e538fc5bebf9e5dc"},{"version":"651cb047d410af525886e1a7a1214f22eebe93c3e16a39b04ccae9b6410e1c7c","signature":"4aa1dc91c9a0aff44d472825e426f3f470645707a3cf5c12950a3e00d8dcd027"},{"version":"0c53ae55eedbb5e1394e874ff8668795d76036756693d8a596870a3186706aa0","signature":"745e18ddf5af4b98c19607069c0778b2941c9eae87574457d91b742619ae1159"},{"version":"3c07596915ae93d70aedeffc539ac081e4923e9375dacbf8f723f37a06ebc192","signature":"c5a05fdea3e209a5faa0483e928a2815509a66601900a2b8bddda95826329a05"},{"version":"d3cfde44f8089768ebb08098c96d01ca260b88bccf238d55eee93f1c620ff5a5","impliedFormat":1},{"version":"b542939a35357458e62f8229c2d7578ae888d63d3ab837395d7bb8a3064c205e","impliedFormat":1},{"version":"3a5af4fba7b27b815bb40f52715aedebaa4b371da3e5a664e7e0798c9b638825","impliedFormat":1},{"version":"8485b6da53ec35637d072e516631d25dae53984500de70a6989058f24354666f","impliedFormat":1},{"version":"ebe80346928736532e4a822154eb77f57ef3389dbe2b3ba4e571366a15448ef2","impliedFormat":1},{"version":"49c632082dc8a916353288d3d8b2dc82b3471794249a381d090d960c8ceac908","impliedFormat":1},{"version":"f672c876c1a04a223cf2023b3d91e8a52bb1544c576b81bf64a8fec82be9969c","impliedFormat":1},{"version":"71addb585c2db7b8e53dc1b0bcfa58c6c67c6e4fa2b968942046749d66f82e7e","impliedFormat":1},{"version":"c76b0c5727302341d0bdfa2cc2cee4b19ff185b554edb6e8543f0661d8487116","impliedFormat":1},{"version":"25b3f581e12ede11e5739f57a86e8668fbc0124f6649506def306cad2c59d262","impliedFormat":1},{"version":"0320c5b275beb43649be5a818dfa83a2586ae110ac5bbb2c5eb7184e1fe3ca60","impliedFormat":1},{"version":"f5ef066942e4f0bd98200aa6a6694b831e73200c9b3ade77ad0aa2409e8fe1b1","impliedFormat":1},{"version":"b9e99cd94f4166a245f5158f7286c05406e2a4c694619bceb7a4f3519d1d768e","impliedFormat":1},{"version":"5568d7c32e5cf5f35e092649f4e5e168c3114c800b1d7545b7ae5e0415704802","impliedFormat":1},{"version":"708733f625436da7047894887c1c17fa53b43094f36c9c3b1ce39d99aafd0a4b","impliedFormat":1},{"version":"2ad61964f27122a3ef7cf261f8b3dbda6b0f96be6687397151709bf34e5d5c76","impliedFormat":1},{"version":"302d3d92502a06fa7071406fa96d5c7f897006d73622aaf322df8405abc6f773","impliedFormat":1},{"version":"5fb7101f6d42663f97815b431479f7c53d4e91b4173565f64d7b5ff0fbd11cde","signature":"68986b4e6fd2bb7549425d7fb21295040a1dcd53316f095a8292034a3309cc22"},{"version":"8993424bf7801471ffc1aa07c5fb35a7d38695b13c88e5af6d8b33dd42347c1c","signature":"1d931c1801ddd2774ba03fb17be153c3f67dbf19c5c29b0844db95fc6cba9ca2"},{"version":"474fa69324e850238cfb6a10af6c59b8efa1ce253288ef01221b75a2438ec580","signature":"ba79652d5c03cf680ee2e4435ffb7156e11f82e904a1554419c7f34579492662"},{"version":"cb14c76d47e50962e577b7ab04d96401381a2be01a2ebd3a3dd7efff5db194a3","signature":"1113102461c2583b8a899f706eeff24b2aba0fcbd05514560fbcdcfbbb20753a"},{"version":"a83ac96cc870f67ddb1b911cc5fbb65742b2ba431289687b0dfa23c32751d764","signature":"5557ab23e545f12d60f21bd8e597587a90c2609eb22b69be375da43b38189a0b"},{"version":"728f704e40e9add3017c01d213c091c77d83151d06a633738d069e6eb2692e82","signature":"5eeacd6a4b8e27515237fb9e1a676d398f4eb1c4226bfe4dd1d948c35e1829e5"},{"version":"3df177a4fd573e15d9e1d8306ce14e03fa99af0b8013eb1b6254791fd7b6510c","signature":"2cb822f2b39072ed0ebe76e129bc33715fca3ab78f25980d7edce44fa944ca6b"},{"version":"3df56952b946f253a37aae973c670b61c04f5eb460e49059acb526cfd273f5aa","impliedFormat":1},{"version":"886e51abb3ad4b62819be3373d2d4a4ffbfa0eaf3f05f6a9ccb6d71c81c26315","signature":"44ce2d887be9ea29ca056b5eb9564dd94d4aaf44d675b6dfc98636771dc4794a","affectsGlobalScope":true},{"version":"d0d54d59c8505bbb57e5ed80d36ca843c9319833f37da740ad72c627b25ce8de","signature":"d155b812966fb118790f766f132bfebe6d1ef4d988b0ec5b21f39eaa1f7f1a3d"},{"version":"109c3cedf247def85396150199e5d2ce54ba1b13eb1fb2eee3a72ae9a22dd51b","signature":"eb9472d367779fc930e25ba363b0923fe234b8df6464c8d223601f3fafea3639","affectsGlobalScope":true},{"version":"70b2e575cd3e463bae0e989cb5fbda9246e4b26d67d9bbf554fe10816e044c13","signature":"40223a484b64fd0ee795774d69ec984220c1ad9f41f26e52fb07aea5baadd32c"},{"version":"3b9c88853864c2b7518cdde70631901f844275d7cd786df431ef17b222a8ce9f","impliedFormat":1},{"version":"aff83d38ef47a636d4962ee7b8727d83a684410e4597f5fe0e0c3359d752aa14","impliedFormat":1},{"version":"a015389227d502f0812b0c287d801cd477dac2b68b5d3a1c6a978f886f1b406b","impliedFormat":1},{"version":"5059763982439cdb46b7207b35d7ce5d609bf099cf883e84f030e59db62188af","impliedFormat":1},{"version":"ae8ce9bb401298d004af8ef409473e463fc9d73592536de062a7c6935e5a8f52","impliedFormat":1},{"version":"5f34aadeeb8ff6f6eb1446d7a9c4779b023bd38ea0456746277977e7951f6eda","impliedFormat":1},{"version":"746ad159b169197b5fcedac905f136cec2d48d9466ad608f1b54d0aa0cc0e90c","impliedFormat":1},{"version":"f62d186e99d5df777f4370eff808bcdbd464420fe49c48ffc99eb540b957534c","impliedFormat":1},{"version":"94e29f539033dc9388b676c51f9ea5679018823bb7fb95af29e6756fdc2fdf6a","impliedFormat":1},{"version":"9ac3e73a495ea34ba7cbb7156bcd071e08453a233a5e45caa146dc4192895bd0","impliedFormat":1},{"version":"dbb8d4b96528fe81fe54e1abe4491b1730551bb8f5daa02d3f5a09b5c3c94dad","impliedFormat":1},{"version":"14fea47a58b288dbc6e9fca4eee7712c2386e64a43704b077af4b7d76359c5e8","impliedFormat":1},{"version":"0b0ed0c620dc45a41ba5256c163fa302865b3851c6c9a8b5352e65d367891915","impliedFormat":1},{"version":"b11da96ad13da10e9fb6733ab85b81b056ae3ceb95e5eaadd4d5c34f0f741a46","impliedFormat":1},{"version":"0d9657f395c04d48ad8e6ccbed9e36fcdc69de07390a4830a048ef6ed2e4a7fb","impliedFormat":1},{"version":"56e22bb81865616b2999d389a35a10c1136c6c896d764b47e8c01da39c36bf02","impliedFormat":1},{"version":"c963aa382cef59cfbf0e6e04025cc06f40f04e73085c33398e77b602e74e6f60","impliedFormat":1},{"version":"78647004e18e4c16b8a2e8345fca9267573d1c5a29e11ddfee71858fd077ef6e","impliedFormat":1},{"version":"0804044cd0488cb7212ddbc1d0f8e1a5bd32970335dbfc613052304a1b0318f9","impliedFormat":1},{"version":"b725acb041d2a18fde8f46c48a1408418489c4aa222f559b1ef47bf267cb4be0","impliedFormat":1},{"version":"85084ae98c1d319e38ef99b1216d3372a9afd7a368022c01c3351b339d52cb58","impliedFormat":1},{"version":"898ec2410fae172e0a9416448b0838bed286322a5c0c8959e8e39400cd4c5697","impliedFormat":1},{"version":"692345a43bac37c507fa7065c554258435ab821bbe4fb44b513a70063e932b45","impliedFormat":1},{"version":"cddd50d7bd9d7fddda91a576db9f61655d1a55e2d870f154485812f6e39d4c15","impliedFormat":1},{"version":"0539583b089247b73a21eb4a5f7e43208a129df6300d6b829dc1039b79b6c8c4","impliedFormat":1},{"version":"3f0be705feb148ae75766143c5c849ec4cc77d79386dcfa08f18d4c9063601cc","impliedFormat":1},{"version":"522edc786ed48304671b935cf7d3ed63acc6636ab9888c6e130b97a6aea92b46","impliedFormat":1},{"version":"a9607a8f1ce7582dbeebc0816897925bf9b307cc05235e582b272a48364f8aa0","impliedFormat":1},{"version":"de21641eb8edcbc08dd0db4ee70eea907cd07fe72267340b5571c92647f10a77","impliedFormat":1},{"version":"48af3609dc95fa62c22c8ec047530daf1776504524d284d2c3f9c163725bdbd4","impliedFormat":1},{"version":"6758f7b72fa4d38f4f4b865516d3d031795c947a45cc24f2cfba43c91446d678","impliedFormat":1},{"version":"1fefab6dc739d33b7cb3fd08cd9d35dd279fcd7746965e200500b1a44d32db9e","impliedFormat":1},{"version":"dc1a664c33f6ddd2791569999db2b3a476e52c5eeb5474768ffa542b136d78c0","impliedFormat":1},{"version":"bdf7abbd7df4f29b3e0728684c790e80590b69d92ed8d3bf8e66d4bd713941fe","impliedFormat":1},{"version":"8decb32fc5d44b403b46c3bb4741188df4fbc3c66d6c65669000c5c9cd506523","impliedFormat":1},{"version":"4beaf337ee755b8c6115ff8a17e22ceab986b588722a52c776b8834af64e0f38","impliedFormat":1},{"version":"c26dd198f2793bbdcc55103823a2767d6223a7fdb92486c18b86deaf63208354","impliedFormat":1},{"version":"93551b302a808f226f0846ad8012354f2d53d6dedc33b540d6ca69836781a574","impliedFormat":1},{"version":"040cb635dff5fc934413fa211d3a982122bf0e46acae9f7a369c61811f277047","impliedFormat":1},{"version":"778b684ebc6b006fcffeab77d25b34bf6e400100e0ec0c76056e165c6399ab05","impliedFormat":1},{"version":"463851fa993af55fb0296e0d6afa27407ef91bf6917098dd665aba1200d250c7","impliedFormat":1},{"version":"f0d8459d18cebd8a9699de96bfe1d4fe8bcf772abfa95bbfd74a2ce92d8bc55b","impliedFormat":1},{"version":"be8f369f8d7e887eab87a3e4e41f1afcf61bf06056801383152aa83bda1f6a72","impliedFormat":1},{"version":"352bfb5f3a9d8a9c2464ad2dc0b2dc56a8212650a541fb550739c286dd341de1","impliedFormat":1},{"version":"a5aae636d9afdacb22d98e4242487436d8296e5a345348325ccc68481fe1b690","impliedFormat":1},{"version":"d007c769e33e72e51286b816d82cd7c3a280cba714e7f958691155068bd7150a","impliedFormat":1},{"version":"764150c107451d2fd5b6de305cff0a9dcecf799e08e6f14b5a6748724db46d8a","impliedFormat":1},{"version":"b04cf223c338c09285010f5308b980ee6d8bfa203824ed2537516f15e92e8c43","impliedFormat":1},{"version":"4b387f208d1e468193a45a51005b1ed5b666010fc22a15dc1baf4234078b636e","impliedFormat":1},{"version":"70441eda704feffd132be0c1541f2c7f6bbaafce25cb9b54b181e26af3068e79","impliedFormat":1},{"version":"d1addb12403afea87a1603121396261a45190886c486c88e1a5d456be17c2049","impliedFormat":1},{"version":"15d43873064dc8787ca1e4c39149be59183c404d48a8cd5a0ea019bb5fdf8d58","impliedFormat":1},{"version":"ea4b5d319625203a5a96897b057fddf6017d0f9a902c16060466fe69cc007243","impliedFormat":1},{"version":"a186fde3b1dde9642dda936e23a21cb73428340eb817e62f4442bb0fca6fa351","impliedFormat":1},{"version":"985ac70f005fb77a2bc0ed4f2c80d55919ded6a9b03d00d94aab75205b0778ec","impliedFormat":1},{"version":"ab01d8fcb89fae8eda22075153053fefac69f7d9571a389632099e7a53f1922d","impliedFormat":1},{"version":"bac0ec1f4c61abc7c54ccebb0f739acb0cdbc22b1b19c91854dc142019492961","impliedFormat":1},{"version":"566b0806f9016fa067b7fecf3951fcc295c30127e5141223393bde16ad04aa4a","impliedFormat":1},{"version":"8e801abfeda45b1b93e599750a0a8d25074d30d4cc01e3563e56c0ff70edeb68","impliedFormat":1},{"version":"902997f91b09620835afd88e292eb217fbd55d01706b82b9a014ff408f357559","impliedFormat":1},{"version":"a3727a926e697919fb59407938bd8573964b3bf543413b685996a47df5645863","impliedFormat":1},{"version":"83f36c0792d352f641a213ee547d21ea02084a148355aa26b6ef82c4f61c1280","impliedFormat":1},{"version":"dce7d69c17a438554c11bbf930dec2bee5b62184c0494d74da336daee088ab69","impliedFormat":1},{"version":"1e8f2cda9735002728017933c54ccea7ebee94b9c68a59a4aac1c9a58aa7da7d","impliedFormat":1},{"version":"e327a2b222cf9e5c93d7c1ed6468ece2e7b9d738e5da04897f1a99f49d42cca1","impliedFormat":1},{"version":"65165246b59654ec4e1501dd87927a0ef95d57359709e00e95d1154ad8443bc7","impliedFormat":1},{"version":"f1bacba19e2fa2eb26c499e36b5ab93d6764f2dba44be3816f12d2bc9ac9a35b","impliedFormat":1},{"version":"bce38da5fd851520d0cb4d1e6c3c04968cec2faa674ed321c118e97e59872edc","impliedFormat":1},{"version":"3398f46037f21fb6c33560ceca257259bd6d2ea03737179b61ea9e17cbe07455","impliedFormat":1},{"version":"6e14fc6c27cb2cb203fe1727bb3a923588f0be8c2604673ad9f879182548daca","impliedFormat":1},{"version":"12b9bcf8395d33837f301a8e6d545a24dfff80db9e32f8e8e6cf4b11671bb442","impliedFormat":1},{"version":"04295cc38689e32a4ea194c954ea6604e6afb6f1c102104f74737cb8cf744422","impliedFormat":1},{"version":"7418f434c136734b23f634e711cf44613ca4c74e63a5ae7429acaee46c7024c8","impliedFormat":1},{"version":"27d40290b7caba1c04468f2b53cf7112f247f8acdd7c20589cd7decf9f762ad0","impliedFormat":1},{"version":"2608b8b83639baf3f07316df29202eead703102f1a7e32f74a1b18cf1eee54b5","impliedFormat":1},{"version":"c93657567a39bd589effe89e863aaadbc339675fca6805ae4d97eafbcce0a05d","impliedFormat":1},{"version":"909d5db5b3b19f03dfb4a8f1d00cf41d2f679857c28775faf1f10794cbbe9db9","impliedFormat":1},{"version":"e4504bffce13574bab83ab900b843590d85a0fd38faab7eff83d84ec55de4aff","impliedFormat":1},{"version":"8ab707f3c833fc1e8a51106b8746c8bc0ce125083ea6200ad881625ae35ce11e","impliedFormat":1},{"version":"730ddc2386276ac66312edbcc60853fedbb1608a99cb0b1ff82ebf26911dba1f","impliedFormat":1},{"version":"c1b3fa201aa037110c43c05ea97800eb66fea3f2ecc5f07c6fd47f2b6b5b21d2","impliedFormat":1},{"version":"636b44188dc6eb326fd566085e6c1c6035b71f839d62c343c299a35888c6f0a9","impliedFormat":1},{"version":"3b2105bf9823b53c269cabb38011c5a71360c8daabc618fec03102c9514d230c","impliedFormat":1},{"version":"f96e63eb56e736304c3aef6c745b9fe93db235ddd1fec10b45319c479de1a432","impliedFormat":1},{"version":"acb4f3cee79f38ceba975e7ee3114eb5cd96ccc02742b0a4c7478b4619f87cd6","impliedFormat":1},{"version":"cfc85d17c1493b6217bad9052a8edc332d1fde81a919228edab33c14aa762939","impliedFormat":1},{"version":"eebda441c4486c26de7a8a7343ebbc361d2b0109abff34c2471e45e34a93020a","impliedFormat":1},{"version":"727b4b8eb62dd98fa4e3a0937172c1a0041eb715b9071c3de96dad597deddcab","impliedFormat":1},{"version":"708e2a347a1b9868ccdb48f3e43647c6eccec47b8591b220afcafc9e7eeb3784","impliedFormat":1},{"version":"6bb598e2d45a170f302f113a5b68e518c8d7661ae3b59baf076be9120afa4813","impliedFormat":1},{"version":"c28e058db8fed2c81d324546f53d2a7aaefff380cbe70f924276dbad89acd7d1","impliedFormat":1},{"version":"89d029475445d677c18cf9a8c75751325616d353925681385da49aeef9260ab7","impliedFormat":1},{"version":"826a98cb79deab45ccc4e5a8b90fa64510b2169781a7cbb83c4a0a8867f4cc58","impliedFormat":1},{"version":"618189f94a473b7fdc5cb5ba8b94d146a0d58834cd77cd24d56995f41643ccd5","impliedFormat":1},{"version":"1645dc6f3dd9a3af97eb5a6a4c794f5b1404cab015832eba67e3882a8198ec27","impliedFormat":1},{"version":"b5267af8d0a1e00092cceed845f69f5c44264cb770befc57d48dcf6a098cb731","impliedFormat":1},{"version":"91b0965538a5eaafa8c09cf9f62b46d6125aa1b3c0e0629dce871f5f41413f90","impliedFormat":1},{"version":"2978e33a00b4b5fb98337c5e473ab7337030b2f69d1480eccef0290814af0d51","impliedFormat":1},{"version":"ba71e9777cb5460e3278f0934fd6354041cb25853feca542312807ce1f18e611","impliedFormat":1},{"version":"608dbaf8c8bb64f4024013e73d7107c16dba4664999a8c6e58f3e71545e48f66","impliedFormat":1},{"version":"61937cefd7f4d6fa76013d33d5a3c5f9b0fc382e90da34790764a0d17d6277fb","impliedFormat":1},{"version":"af7db74826f455bfef6a55a188eb6659fd85fdc16f720a89a515c48724ee4c42","impliedFormat":1},{"version":"d6ce98a960f1b99a72de771fb0ba773cb202c656b8483f22d47d01d68f59ea86","impliedFormat":1},{"version":"2a47dc4a362214f31689870f809c7d62024afb4297a37b22cb86f679c4d04088","impliedFormat":1},{"version":"42d907ac511459d7c4828ee4f3f81cc331a08dc98d7b3cb98e3ff5797c095d2e","impliedFormat":1},{"version":"63d010bff70619e0cdf7900e954a7e188d3175461182f887b869c312a77ecfbd","impliedFormat":1},{"version":"1452816d619e636de512ca98546aafb9a48382d570af1473f0432a9178c4b1ff","impliedFormat":1},{"version":"9e3e3932fe16b9288ec8c948048aef4edf1295b09a5412630d63f4a42265370e","impliedFormat":1},{"version":"8bdba132259883bac06056f7bacd29a4dcf07e3f14ce89edb022fe9b78dcf9b3","impliedFormat":1},{"version":"5a5406107d9949d83e1225273bcee1f559bb5588942907d923165d83251a0e37","impliedFormat":1},{"version":"ca0ca4ca5ad4772161ee2a99741d616fea780d777549ba9f05f4a24493ab44e1","impliedFormat":1},{"version":"e7ee7be996db0d7cce41a85e4cae3a5fc86cf26501ad94e0a20f8b6c1c55b2d4","impliedFormat":1},{"version":"72263ae386d6a49392a03bde2f88660625da1eca5df8d95120d8ccf507483d20","impliedFormat":1},{"version":"b498375d015f01585269588b6221008aae6f0c0dc53ead8796ace64bdfcf62ea","impliedFormat":1},{"version":"c37aa3657fa4d1e7d22565ae609b1370c6b92bafb8c92b914403d45f0e610ddc","impliedFormat":1},{"version":"34534c0ead52cc753bdfdd486430ef67f615ace54a4c0e5a3652b4116af84d6d","impliedFormat":1},{"version":"a1079b54643537f75fa4f4bb963d787a302bddbe3a6001c4b0a524b746e6a9de","impliedFormat":1},{"version":"cea05cc31d2ad2d61a95650a3cff8cf502b779c014585aa6e2f300e0c8b76101","impliedFormat":1},{"version":"cb39b155bbb935f18fa166e293e27ccd00636b28690084e3b48257d881e26fba","impliedFormat":1},{"version":"cc7a13b6a6b4932764e79423bec950ce1fc5172224fbc762b311e6d74d0f75c7","impliedFormat":1},{"version":"a65b4862558ac528e60160a3049e987db01838e9b8a28df367203b225b6d4f48","impliedFormat":1},{"version":"f80fc81f38e11bd080a7d71f4b4839ad4a7209f82c1b487a026ad93cda2832d4","impliedFormat":1},{"version":"2e20310e928e9e8685e370417b3ec666b58895f96edd1ba50d1920b9f4927771","impliedFormat":1},{"version":"8c8449d6f86adb1f8eb7d006d407acd00d016498f824370b355b287a163c5980","impliedFormat":1},{"version":"958a09aeddfc2e1de2ab81ca4da2088404a254ef26cd9f38e3c7ab4129c70efc","impliedFormat":1},{"version":"fa30060fde9dc4f42e52f95ca5f2d97a895b0e42f60abc0603e25ffb3439bba5","impliedFormat":1},{"version":"e37560c3ef491e0d04bfa9a535b8e384bf36b68d28c7a537edafa98f417d4b1a","impliedFormat":1},{"version":"8c50d31e7346ba1df2286ed5477311c794757e4622f7e277cf91c77b34e10088","impliedFormat":1},{"version":"871334f5a91f32e01ecd85f26eef03e670bb2acd3d0db257ab67fb3cb7d8b964","signature":"faffdcb550f7acc30b7dcc6388b2f1841c6ee7932ce025a9080d26490fbce462"},{"version":"7811f9edd59d9ddc0c917de40fe9e8a9c7fb089e19bde07be0009e84c6b2707f","signature":"e189788cd1a9f70abbd9c8bb08fb314d42b686ab50bd871d60e5b8ba3e850990"},{"version":"cd51ceafea7762ad639afb3ca5b68e1e4ffeaacaa402d7ef2cae17016e29e098","impliedFormat":1},{"version":"1b8357b3fef5be61b5de6d6a4805a534d68fe3e040c11f1944e27d4aec85936a","impliedFormat":1},{"version":"130ec22c8432ade59047e0225e552c62a47683d870d44785bee95594c8d65408","impliedFormat":1},{"version":"4f24c2781b21b6cd65eede543669327d68a8cf0c6d9cf106a1146b164a7c8ef9","affectsGlobalScope":true,"impliedFormat":1},{"version":"8c44636cd32c9f5279e967d56e67d7623341d90382871adf63eb9ba427a3f820","impliedFormat":1},{"version":"d9720d542df1d7feba0aa80ed11b4584854951f9064232e8d7a76e65dc676136","impliedFormat":1},{"version":"d0fb3d0c64beba3b9ab25916cc018150d78ccb4952fac755c53721d9d624ba0d","impliedFormat":1},{"version":"86b484bcf6344a27a9ee19dd5cef1a5afbbd96aeb07708cc6d8b43d7dfa8466c","impliedFormat":1},{"version":"ba93f0192c9c30d895bee1141dd0c307b75df16245deef7134ac0152294788cc","impliedFormat":1},{"version":"75a7db3b7ddf0ca49651629bb665e0294fda8d19ba04fddc8a14d32bb35eb248","impliedFormat":1},{"version":"eb31477c87de3309cbe4e9984fa74a052f31581edb89103f8590f01874b4e271","impliedFormat":1},{"version":"892abbe1081799073183bab5dc771db813938e888cf49eb166f0e0102c0c1473","impliedFormat":1},{"version":"6ff14b0a89cb61cef9424434ee740f91b239c09272c02031db85d388b84b7442","impliedFormat":1},{"version":"865f3db83300a1303349cc49ed80943775a858e0596e7e5a052cc65ac03b10bb","impliedFormat":1},{"version":"28fa41063a242eafcf51e1a62013fccdd9fd5d6760ded6e3ff5ce10a13c2ab31","impliedFormat":1},{"version":"ada60ff3698e7fd0c7ed0e4d93286ee28aed87f648f6748e668a57308fde5a67","impliedFormat":1},{"version":"1a67ba5891772a62706335b59a50720d89905196c90719dad7cec9c81c2990e6","impliedFormat":1},{"version":"5d6f919e1966d45ea297c2478c1985d213e41e2f9a6789964cdb53669e3f7a6f","impliedFormat":1},{"version":"a8289d1d525cf4a3a2d5a8db6b8e14e19f43d122cc47f8fb6b894b0aa2e2bde6","impliedFormat":1},{"version":"d7735a9ccd17767352ab6e799d76735016209aadd5c038a2fc07a29e7b235f02","impliedFormat":1},{"version":"aa1e3e6955faa399dc86747f8a904185a80cefdc1df5c9b952be4a657b3c98e9","impliedFormat":1},{"version":"742be2239f1a967692c4562a16973a08a1177663f972cbb4e1ef2b21bc97c9cf","impliedFormat":1},{"version":"ce92e662f86a36fc38c5aaa2ec6e6d6eed0bc6cf231bd06a9cb64cc652487550","impliedFormat":1},{"version":"bcf177e80d5a2c3499f587886b4a190391fc9ad4388f74ae6aa935a1c22cd623","impliedFormat":1},{"version":"521f9f4dd927972ed9867e3eb2f0dd6990151f9edbb608ce59911864a9a2712d","impliedFormat":1},{"version":"b2a793bde18962a2e1e0f9fa5dce43dd3e801331d36d3e96a7451727185fb16f","impliedFormat":1},{"version":"4e251317bb109337e4918e5d7bcda7ef2d88f106cac531dcea03f7eee1dd2240","impliedFormat":1},{"version":"c71b7d61c20bce394784daa24afcff1a0be74bac91195a61ee47b851851d18fe","impliedFormat":1},{"version":"8504003e88870caa5474ab8bd270f318d0985ba7ede4ee30fe37646768b5362a","impliedFormat":1},{"version":"65465a64d5ee2f989ad4cf8db05f875204a9178f36b07a1e4d3a09a39f762e2e","impliedFormat":1},{"version":"2878f694f7d3a13a88a5e511da7ac084491ca0ddde9539e5dad76737ead9a5a9","impliedFormat":1},{"version":"1c0c6bd0d9b697040f43723d5b1dd6bb9feb743459ff9f95fda9adb6c97c9b37","impliedFormat":1},{"version":"0915ce92bb54e905387b7907e98982620cb7143f7b44291974fb2e592602fe00","impliedFormat":1},{"version":"3cd6df04a43858a6d18402c87a22a68534425e1c8c2fc5bb53fead29af027fcc","impliedFormat":1},{"version":"3aeae89ee20d53e08727a4eb5b5055211a6389a54a9a0a10f800a97616b5cd1b","impliedFormat":1},{"version":"4733c832fb758f546a4246bc62f2e9d68880eb8abf0f08c6bec484decb774dc9","impliedFormat":1},{"version":"58d91c410f31f4dd6fa8d50ad10b4ae9a8d1789306e73a5fbe8abea6a593099b","impliedFormat":1},{"version":"7ca6bb19f016eadcff4eb8993a37ba89be7b42bdf0dbc630d0b0db34e5fc7df0","impliedFormat":1},{"version":"d8d5061cb4521772457a2a3f0fcec028669990daceea78068bc968620641cd25","impliedFormat":1},{"version":"81671608efe86adf90b9037cb6ea0f97c03bd1ae654d4974e511b682bf7658ea","impliedFormat":1},{"version":"1f129869a0ee2dcb7ea9a92d6bc8ddf2c2cdaf2d244eec18c3a78efeb5e05c83","impliedFormat":1},{"version":"843e98d09268e2b5b9e6ff60487cf68f4643a72c2e55f7c29b35d1091a4ee4e9","impliedFormat":1},{"version":"4502caaa3fff6c9766bfc145b1b586ef26d53e5f104271db046122b8eef57fd1","impliedFormat":1},{"version":"382f061a24f63ef8bfb1f7a748e1a2568ea62fb91ed1328901a6cf5ad129d61c","impliedFormat":1},{"version":"6927ceeb41bb451f47593de0180c8ff1be7403965d10dc9147ee8d5c91372fff","impliedFormat":1},{"version":"ef4c9ef3ec432ccbf6508f8aa12fbb8b7f4d535c8b484258a3888476de2c6c36","impliedFormat":1},{"version":"77ff2aeb024d9e1679c00705067159c1b98ccac8310987a0bdaf0e38a6ca7333","impliedFormat":1},{"version":"1b609b28df5d753bb0ba20c7eb674fa93298fa268c9b20f40176f088878caef3","impliedFormat":1},{"version":"952c4a8d2338e19ef26c1c0758815b1de6c082a485f88368f5bece1e555f39d4","impliedFormat":1},{"version":"1d953cb875c69aeb1ec8c58298a5226241c6139123b1ff885cedf48ac57b435c","impliedFormat":1},{"version":"1a80e164acd9ee4f3e2a919f9a92bfcdb3412d1fe680b15d60e85eadbaa460f8","impliedFormat":1},{"version":"f981ffdbd651f67db134479a5352dac96648ca195f981284e79dc0a1dbc53fd5","impliedFormat":1},{"version":"a1c85a61ff2b66291676ab84ae03c1b1ff7139ffde1942173f6aee8dc4ee357b","impliedFormat":1},{"version":"ee1969bda02bd6c3172c259d33e9ea5456f1662a74e0acf9fa422bb38263f535","impliedFormat":1},{"version":"f1a5a12e04ad1471647484e7ff11e36eef7960f54740f2e60e17799d99d6f5ab","impliedFormat":1},{"version":"672c1ebc4fa15a1c9b4911f1c68de2bc889f4d166a68c5be8f1e61f94014e9d8","impliedFormat":1},{"version":"ed1b2a459aa469d032f0bd482f4550d0bcd38e9e013532907eb30157054a52d7","impliedFormat":1},{"version":"5a0d920468aa4e792285943cadad77bcb312ba2acf1c665e364ada1b1ee56264","impliedFormat":1},{"version":"de54198142e582c1e26baa21c72321bcdde2a7c38b34cf18e246c7ff95bafd18","impliedFormat":1},{"version":"eccffdb59d6d42e3e773756e8bbe1fa8c23f261ef0cef052f3a8c0194dc6a0e0","impliedFormat":1},{"version":"2d98be5066df3ec9f217b93ef40abab987ec3b55b8f8756a43a081362a356e61","impliedFormat":1},{"version":"928f96b9948742cbaec33e1c34c406c127c2dad5906edb7df08e92b963500a41","impliedFormat":1},{"version":"a2e4333bf0c330ae26b90c68e395ad0a8af06121f1c977979c75c4a5f9f6bc29","impliedFormat":1},{"version":"f29768cdfdf7120ace7341b42cdcf1a215933b65da9b64784e9d5b8c7b0e1d3d","impliedFormat":1},{"version":"2cbf557a03f80df74106cb7cfb38386db82725b720b859e511bdead881171c32","impliedFormat":1},{"version":"520e09c896f218d5871ba109df4fcf006642084cf6e6cd677897f7b93139ce46","impliedFormat":1},{"version":"5718274a266c16d3fbe9cd44c0e591ca981c374904137807e0ee7d601524deda","impliedFormat":1},{"version":"dd9694eecd70a405490ad23940ccd8979a628f1d26928090a4b05a943ac61714","impliedFormat":1},{"version":"42ca885a3c8ffdffcd9df252582aef9433438cf545a148e3a5e7568ca8575a56","impliedFormat":1},{"version":"309586820e31406ed70bb03ea8bca88b7ec15215e82d0aa85392da25d0b68630","impliedFormat":1},{"version":"98245fec2e886e8eb5398ce8f734bd0d0b05558c6633aefc09b48c4169596e4e","impliedFormat":1},{"version":"1410d60fe495685e97ed7ca6ff8ac6552b8c609ebe63bd97e51b7afe3c75b563","impliedFormat":1},{"version":"c6843fd4514c67ab4caf76efab7772ceb990fbb1a09085fbcf72b4437a307cf7","impliedFormat":1},{"version":"03ed68319c97cd4ce8f1c4ded110d9b40b8a283c3242b9fe934ccfa834e45572","impliedFormat":1},{"version":"956618754d139c7beb3c97df423347433473163d424ff8248af18851dd7d772a","impliedFormat":1},{"version":"7d8f40a7c4cc81db66ac8eaf88f192996c8a5542c192fdebb7a7f2498c18427d","impliedFormat":1},{"version":"c69ecf92a8a9fb3e4019e6c520260e4074dc6cb0044a71909807b8e7cc05bb65","impliedFormat":1},{"version":"6807ed1978fef907bc36bec5724e0ab83f12142498b10a5fe21accccc28bf27c","impliedFormat":1},{"version":"1f9e8df7616803167f2e4a2ed9ea86bea7c1fd57b3360edfd38ebdbef44b689b","impliedFormat":1},{"version":"23986924a7c47a841bb6feb897f62d3b6c09024ea7413e4e31098454ec38ccde","impliedFormat":1},{"version":"1f0ee5ddb64540632c6f9a5b63e242b06e49dd6472f3f5bd7dfeb96d12543e15","impliedFormat":1},{"version":"18b86125c67d99150f54225df07349ddd07acde086b55f3eeac1c34c81e424d8","impliedFormat":1},{"version":"2d3f23c577a913d0f396184f31998507e18c8712bc74303a433cf47f94fd7e07","impliedFormat":1},{"version":"0f2c77683296ca2d0e0bee84f8aa944a05df23bc4c5b5fef31dda757e75f660f","impliedFormat":1},{"version":"b848b40bfeb73dfe2e782c5b7588ef521010a3d595297e69386670cbde6b4d82","impliedFormat":1},{"version":"aa79b64f5b3690c66892f292e63dfe3e84eb678a886df86521f67c109d57a0c5","impliedFormat":1},{"version":"a692e092c3b9860c9554698d84baf308ba51fc8f32ddd6646e01a287810b16c6","impliedFormat":1},{"version":"64df9b13259fe3e3fea8ed9cdce950b7a0d40859d706c010eeea8c8d353d53fd","impliedFormat":1},{"version":"1848ebe5252ccb5ca1ca4ff52114516bdbbc7512589d6d0839beeea768bfb400","impliedFormat":1},{"version":"d2e3a1de4fde9291f9fb3b43672a8975a83e79896466f1af0f50066f78dbf39e","impliedFormat":1},{"version":"e37650b39727a6cf036c45a2b6df055e9c69a0afdd6dbab833ab957eb7f1a389","impliedFormat":1},{"version":"b848c5cd9ba9a70d6933e9bafde26b9fe442bfbeb4bef2427b9d9cf09375553d","impliedFormat":1},{"version":"dd8ded51112dedf953e09e211e423bcc9c8a3943b4b42d0c66c89466e55635a6","impliedFormat":1},{"version":"31073e7d0e51f33b1456ff2ab7f06546c95e24e11c29d5b39a634bc51f86d914","impliedFormat":1},{"version":"9ce0473b0fbaf7287afb01b6a91bd38f73a31093e59ee86de1fd3f352f3fc817","impliedFormat":1},{"version":"6f0d708924c3c4ee64b0fef8f10ad2b4cb87aa70b015eb758848c1ea02db0ed7","impliedFormat":1},{"version":"6addbb18f70100a2de900bace1c800b8d760421cdd33c1d69ee290b71e28003d","impliedFormat":1},{"version":"37569cc8f21262ca62ec9d3aa8eb5740f96e1f325fad3d6aa00a19403bd27b96","impliedFormat":1},{"version":"e0ef70ca30cdc08f55a9511c51a91415e814f53fcc355b14fc8947d32ce9e1aa","impliedFormat":1},{"version":"14be139e0f6d380a3d24aaf9b67972add107bea35cf7f2b1b1febac6553c3ede","impliedFormat":1},{"version":"23195b09849686462875673042a12b7f4cd34b4e27d38e40ca9c408dae8e6656","impliedFormat":1},{"version":"ff1731974600a4dad7ec87770e95fc86ca3d329b1ce200032766340f83585e47","impliedFormat":1},{"version":"91bc53a57079cf32e1a10ccf1a1e4a068e9820aa2fc6abc9af6bd6a52f590ffb","impliedFormat":1},{"version":"8dd284442b56814717e70f11ca22f4ea5b35feeca680f475bfcf8f65ba4ba296","impliedFormat":1},{"version":"a304e0af52f81bd7e6491e890fd480f3dc2cb0541dec3c7bd440dba9fea5c34e","impliedFormat":1},{"version":"c60fd0d7a1ba07631dfae8b757be0bffd5ef329e563f9a213e4a5402351c679f","impliedFormat":1},{"version":"02687b095a01969e6e300d246c9566a62fa87029ce2c7634439af940f3b09334","impliedFormat":1},{"version":"e79e530a8216ee171b4aca8fc7b99bd37f5e84555cba57dc3de4cd57580ff21a","impliedFormat":1},{"version":"ceb2c0bc630cca2d0fdd48b0f48915d1e768785efaabf50e31c8399926fee5b1","impliedFormat":1},{"version":"f351eaa598ba2046e3078e5480a7533be7051e4db9212bb40f4eeb84279aa24d","impliedFormat":1},{"version":"12aeda564ee3f1d96ac759553d6749534fafeb2e5142ea2867f22ed39f9d3260","impliedFormat":1},{"version":"4ce53edb8fb1d2f8b2f6814084b773cdf5846f49bf5a426fbe4029327bda95bf","impliedFormat":1},{"version":"1edc9192dfc277c60b92525cdfa1980e1bfd161ae77286c96777d10db36be73c","impliedFormat":1},{"version":"85d63aaff358e8390b666a6bc68d3f56985f18764ab05f750cb67910f7bccb1a","impliedFormat":1},{"version":"0a0bf0cb43af5e0ac1703b48325ebc18ad86f6bf796bdbe96a429c0e95ca4486","impliedFormat":1},{"version":"22fcfd509683e3edfaf0150c255f6afdf437fec04f033f56b43d66fe392e2ad3","impliedFormat":1},{"version":"f08d2151bd91cdaa152532d51af04e29201cfc5d1ea40f8f7cfca0eb4f0b7cf3","impliedFormat":1},{"version":"3d5d9aa6266ea07199ce0a1e1f9268a56579526fad4b511949ddb9f974644202","impliedFormat":1},{"version":"b9c889d8a4595d02ebb3d3a72a335900b2fe9e5b5c54965da404379002b4ac44","impliedFormat":1},{"version":"a3cd30ebae3d0217b6b3204245719fc2c2f29d03b626905cac7127e1fb70e79c","impliedFormat":1},{"version":"1502a23e43fd7e9976a83195dc4eaf54acaff044687e0988a3bd4f19fc26b02b","impliedFormat":1},{"version":"918956b37f3870f02f0659d14bba32f7b0e374fd9c06a241db9da7f5214dcd79","impliedFormat":1},{"version":"5faa3d4b828440882a089a3f8514f13067957f6e5e06ec21ddd0bc2395df1c33","impliedFormat":1},{"version":"f0f95d40b0b5a485b3b97bd99931230e7bf3cbbe1c692bd4d65c69d0cdd6fa9d","impliedFormat":1},{"version":"d9c6f10eebf03d123396d4fee1efbe88bc967a47655ec040ffe7e94271a34fc7","impliedFormat":1},{"version":"380b4fe5dac74984ac6a58a116f7726bede1bdca7cec5362034c0b12971ac9c1","impliedFormat":1},{"version":"00de72aa7abede86b016f0b3bfbf767a08b5cff060991b0722d78b594a4c2105","impliedFormat":1},{"version":"fdf949030336b31644def7e6529d500301fb2b235a51691de84c36ffdaf8a2db","impliedFormat":1},{"version":"5208bf3184136d545f7a68a3991f68f15c8319ae35a86a51c93c9bc7cc04b6e6","impliedFormat":1},{"version":"4f5bbef956920cfd90f2cbffccb3c34f8dfc64faaba368d9d41a46925511b6b0","impliedFormat":1},{"version":"dd7a3e1f2a79a6fa8e08b00c8f9095b6102b814492106a62062c845c3696975d","impliedFormat":1},{"version":"fd53b02b51f3b38b6c57bc7a2af7d766d9b0dbbf7376d9ec5027339a478438b5","impliedFormat":1},{"version":"7b7f39411329342a28ea19a4ca3aa4c7f7d888c9f01a411b05e4126280026ea6","impliedFormat":1},{"version":"ba3ef8ea20ac0186dc0d58c1e96ffaf84327d09c377fd82f0ae99236e3430c3a","impliedFormat":1},{"version":"d66e97aa992c0fe797878bcad6257562829582f5f3a2842df71e613e60f7b778","impliedFormat":1},{"version":"a86492d82baf906c071536e8de073e601eaa5deed138c2d9c42d471d72395d7e","impliedFormat":1},{"version":"789110b95e963c99ace4e9ad8b60901201ddc4cab59f32bde5458c1359a4d887","impliedFormat":1},{"version":"92eb8a98444729aa61be5e6e489602363d763da27d1bcfdf89356c1d360484da","impliedFormat":1},{"version":"72bbfa838556113625a605be08f9fed6a4aed73ba03ab787badb317ab6f3bcd7","impliedFormat":1},{"version":"d729b8b400507b9b51ff40d11e012379dbf0acd6e2f66bf596a3bc59444d9bf1","impliedFormat":1},{"version":"32ac4394bb4b0348d46211f2575f22ab762babb399aca1e34cf77998cdef73b2","impliedFormat":1},{"version":"665c7850d78c30326b541d50c4dfad08cea616a7f58df6bb9c4872dd36778ad0","impliedFormat":1},{"version":"1567c6dcf728b0c1044606f830aafd404c00590af56d375399edef82e9ddce92","impliedFormat":1},{"version":"c00b402135ef36fb09d59519e34d03445fd6541c09e68b189abb64151f211b12","impliedFormat":1},{"version":"e08e58ac493a27b29ceee80da90bb31ec64341b520907d480df6244cdbec01f8","impliedFormat":1},{"version":"c0fe2b1135ca803efa203408c953e1e12645b8065e1a4c1336ad8bb11ea1101b","impliedFormat":1},{"version":"d82c245bfb76da44dd573948eca299ff75759b9714f8410468d2d055145a4b64","impliedFormat":1},{"version":"25b1108faedaf2043a97a76218240b1b537459bbca5ae9e2207c236c40dcfdef","impliedFormat":1},{"version":"5a4d0b09de173c391d5d50064fc20166becc194248b1ce738e8a56af5196d28c","impliedFormat":1},{"version":"0e0b8353d6d7f7cc3344adbabf3866e64f2f2813b23477254ba51f69e8fdf0eb","impliedFormat":1},{"version":"fc9ed6f3665b53b9b258ae7eda6394d8387e17fab6d85f48f4603d19633b006b","impliedFormat":1},{"version":"18012cb157b4eaa861284a3d7ed19d4f3c4d708859e5b20d5208966688a67922","impliedFormat":1},{"version":"db08c1807e3ae065930d88a3449d926273816d019e6c2a534e82da14e796686d","impliedFormat":1},{"version":"9e5c7463fc0259a38938c9afbdeda92e802cff87560277fd3e385ad24663f214","impliedFormat":1},{"version":"ef83477cca76be1c2d0539408c32b0a2118abcd25c9004f197421155a4649c37","impliedFormat":1},{"version":"93962f33d5f95ebfe4a8299843b6a76d119e45d0e16ed8550da2667dbaf1928d","impliedFormat":1},{"version":"3444af3f413d9f7f2852d5c0baa1074c63437ef2188cbb6c35512e5fa6cac744","impliedFormat":1},{"version":"e06ac247bcc9063f81106cda7d54cbab69c721286e2d37a7ac1d978ed462edb7","impliedFormat":1},{"version":"5ef45605db641e9841e39681475636e0543766c90249ce8eb2d74479a579c036","impliedFormat":1},{"version":"4ec075c5021dc5e83869396e626c8ba410b152025293fab60ac25eb7daa40bd8","impliedFormat":1},{"version":"854b2812970b91bd9f612269c30cec5d43e7237a6b21a92d6502a15aa0e8356d","impliedFormat":1},{"version":"90e6dfcc6907ea992a94ddee671aa44f389fb193b436ec5a36a8c06011f37a91","impliedFormat":1},{"version":"891e0b0bb37c8df5da002c1862c045e1241886831bedd67d1f82c683c7627789","signature":"4fbf5b658864956542a4c3f4496742f826af53a30aad402f9690a5434b8dc68f"},{"version":"6e3b65092bf8b469b1929afe7f8fd8945995013a15df2f135af25c0fa4e8a7e2","signature":"e588fd98279af01395a41b15b85dab5ed72f4e68f2a55b9ca943221dc76eb940"},{"version":"8c2844dc8c2126a3ec8d4831eeeb98a7966bbbbb320def2b79322f1aa6cd8fbd","signature":"b1c952e1210cd114ed16c5dc569615f8b434387b518439a686f7c53e522cd377"},{"version":"9635955553713a8c28954860f0028a9191e9f37ecd1dc6dd0327f86c3847510f","signature":"f892489d783d7fc1f5da16d6c5fa25cd0047f3d3b0f9a153a84dd7b21d5593a5"},{"version":"ecc18fa87b242cc3b7f1b00463d2ac73d5636a5a80b5bb2737774ed446a400e6","signature":"dc780f8f9dbee5f39244f8e567251d0b4659dc6a94315795982cf74307a0041c"},"66b2ba107bb2a360de5b59f741e864b81d9566a34e6c3d6d62366b22f22b3c24",{"version":"167a90104c2501bce0ae1cdb5b269a5ef573ec10ebc442fb2735a0597a0779ed","signature":"82f2799c91889b8a50533c72d702ec2033daef3e41ef4642514ddcd792a67de0"},{"version":"83bbb6dc1118c6cd4c4b71ebb617f6acd9f3e04b62cf7fea81f92bab3b893526","signature":"535b126885b5adcc3000f516b55a821576e02b0cf60af4547c16ab8f3f7dcd35"},{"version":"e99d792a57fa34243375135455bd39d124a6d4037270add1650581d9de55888b","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"ca5a6ec10f05023a9c072f2bca10fc25f4b38409a519e4d99928164384efb768","signature":"865f41348f4394b2c7e3890a1d766e83568346b331ba2499e9f5d362919d57af"},{"version":"cd2e41d28de20e5ae3f26f0e8eb3a07284a977e81ac95fe73f759d7493907426","signature":"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","affectsGlobalScope":true},{"version":"98992a4a4d1a96639cd37e9bfe6af4f2a95b27c1847cbfaf8d30b97adc58d0c2","signature":"49becdfabf57a299fb70b7f595db4364696c087432604f96d4b8b1d02c9b9411","affectsGlobalScope":true},{"version":"3764956c3c31d9dc1d9b501d89b906ed46f352d8f519de65de94f76247470600","signature":"90ec9100c29e008c3d9194acd818e2cfa6dc6e177154bc8e10c5959aa35619ed"},{"version":"9b5df5183b5feff4f725efa31af362156b479ab67f8bfa9d17d3545b1016b6b1","affectsGlobalScope":true},{"version":"cfbc73d11e0ca344ce65fecde7cddca515c139ca4e66d1710db83924d8226ee1","signature":"ae4b964c15da96b7c2dc08635b556184009849a05a73c591962ebfebf91ee76e"},{"version":"3d8cd0728081a023edf08dbdab155e22091a7f36e09750029a0af66b65939d02","affectsGlobalScope":true},{"version":"6f40beb82ac5337504d8333a3fea9aee5c9e9eabc8d348f4feb325ea629cdbb1","signature":"51aaa91ec31467437dade647f34b2ce3e996389768cfc2b7c680ba3706357e57"},{"version":"fe93c474ab38ac02e30e3af073412b4f92b740152cf3a751fdaee8cbea982341","impliedFormat":1},{"version":"aa4feed67c9af19fa98fe02a12f424def3cdc41146fb87b8d8dab077ad9ceb3c","impliedFormat":1},{"version":"1e00b8bf9e3766c958218cd6144ffe08418286f89ff44ba5a2cc830c03dd22c7","impliedFormat":1},{"version":"02f78a17ba1bd25a38b91d4d46bbae218c9c45523a57d41c8bebbab4bfb664de","signature":"9c812e3ffabdcba4fb766673d8cd1340c8e3536115b96ce4baa842fdfe8e421d"},{"version":"8ea1130bbf3436e3b4e923b60dcdaec39848007123c675432ea5c22520b6a9f4","signature":"71f255c282738f3d1bd895a59df9a7270e2890169778e8e9f45032469555ffcb"},{"version":"886709915fed34de11b505a35f7250fedd1d5f6f310f23976f99eeb992879965","signature":"9e598e868acbe7d3133f819f00eaabee8531b093e792da69ea0219f808da6672"},{"version":"cd9778f383b3fda05409e445fb679319b2f7b51b5fe7b8c4c6e2c1aca4c395fd","signature":"ba54342937eb116567785cc93f6ef7c8ce3b041a67bb2ecb579ab28359b06047"},{"version":"fca45059262aa64ccce251931bc4b68819c1c58e6e7ebaf800483d0abbdf85ec","signature":"bae7cca155085405f67f39edf2596f866c3c6a27d4c02cd5d54b663f9904b4e0"},{"version":"b5644641095bc94b5421085b40fdf07a3e4b209a020c4d1d037c10819f41bb56","signature":"f41477f2fc46ce250b3fa7f593b39136330e7231d3ddbc4906d029537622fdc0"},{"version":"b5db5f7b1cbd97d53e834412a4ed45e0fad0a2f45399df20cd10b1a6ef281e24","signature":"7c9600e1dde52a1739d5775038cfe9faa84b91a1c57fbaffcb61b062cb5e1493"},{"version":"f9acf38bcbdb8910c55fe63b2a20f52ccb8729b8b8f60518bc528632108ce4de","signature":"115cac0a32335fccd5c9647e0861525c7c03c029d0a1335f56a58c559d3b82e4"},{"version":"f3a50fc69400982dc7e5c701999a10f5e35ea6df39e6c2a6ee71ba6ea1908af0","signature":"2de6449ce9b3125d0b2f20d47a6bdb4f5bf9c591a4ff46335a1c903b70fedd76"},{"version":"e113c5cc0d33306974ce747040dd94af6aae573acb049479b7c4fea62ddd7fc2","impliedFormat":1},{"version":"1f7a45e400abaf57198ab07b61836e6e2064dbf34e63b989c27b7d45da861e50","impliedFormat":1},{"version":"72437fd7259f217eb2f64b6e911e0b08e6d3f57c5ad3d7591da6d093270c97b5","affectsGlobalScope":true,"impliedFormat":1},{"version":"50673625890854afc4b1886dbe5db2bf00dfd8adaba840356b5ea507706d8724","impliedFormat":1},{"version":"f453c7a4fa3a927747a7f844fb14d5149d0543fb79a4803fd2edbc5e3e3fa7c0","impliedFormat":1},{"version":"84ec1703b7cbba570b78f28f5b237402ba1960052094bb468f4ecad868f7ef71","impliedFormat":1},{"version":"3e267ac5389dd4c2bd59456cddf01db7fa6688b5e0a5cdbe7d5fa1d50121ac7d","impliedFormat":1},{"version":"76630e8108de18738f76636bd7d6fc87173809a7405eab44deea5ed32c1a9dcb","impliedFormat":1},{"version":"e632dcb52ce58c5d1949f36c27be6c0d986ad10b459c25cdca290de558119aba","signature":"4621894986d6f9939fd354616b8d586969f16234076cac648f953a1e09e6fa7b"},{"version":"631f054888f36c0993573a27b447147d66efa9f7f71edb3e8c0a68e05161aa40","signature":"4b6ef75eaf2de8d9c6bd4738f895d01d98693f7efd1f84891975b64dd5cd2010"},{"version":"6c63db2d67010968b94f192dd66b822bc6d1935887f6ef91d5d3949b62d4fdfc","signature":"3eb972ae325aa293fdb6077cdf956f209ee6ea34b4e874ff7ec8686b3079972f"},{"version":"124f985e7844bf2fb512bf0580a5d55d5539184456653ee65d7e3449ea7ad555","signature":"3e04da11407ac89346987d4f2eeb5bcc53ff8bb450ec035f93ce489aac552498"},{"version":"314807c437cc4d8c9d2292c667928fd30e4ec0dde266ec1a64fd488061664332","signature":"f095316f268b07d7ffa10b349bbe85f8e34b4392709b04dce9f735fbda14dedf"},{"version":"70ad0baf7e3f0a3784a9a4ea2687092c9c1be0a4fe06699dcec318b161bf4beb","signature":"ce2056618fa34c330f394b70f37fb298383dc2d134b44ac53088c15ea2484d67"},{"version":"9c5014ea50a7ef2d9044cec7ca9df0c624945d852ffa39c2ab20470a03cbfa65","signature":"809b69d996067def344b4cf2e6451caba89ca6317007ecaddf6b172f2be09a0e"},{"version":"6acd2ad4bc0f682070e0e558463893962a63f37e760c6afc57aa41fce68a225e","signature":"0394c3738875a1a8c0bd2f2e7d7e52180eb3d515d485151035d639df632e7569"},{"version":"3b9d4e0cbef69c1247a1e3f46f7d352996d7cf703793547a71f91881cd00d403","signature":"e5bec06849e85a3f781c308d8447c6ce49f895ddbdedcec2d2d997c802fcd920"},{"version":"a0c344da729528e8425a8717ee537e419b8ea720b360724b8058690a5dc4bd6e","signature":"5eb406833f53404c8739ae5f5f749313e436e9963cdf351ae9f2c285fe327a6d"},{"version":"7542fce1492a793b47a9f4e8c5a6482a309a3d45dcf74274ac038dfba3a58923","signature":"e9ea4b8f9547d6814e4f50985c8b1667a2c2e3e9b2fec870b5c9f688d6cbf133"},{"version":"3fabafeb9d4a87d998d275cfcae1319ece10fda55a526d49edd3df8b9cfd936e","signature":"64841439643262fbf65cc9660e3ec891622036d2b73a720c70e24346613a9ce0"},{"version":"bdc6ab2c26405148fd2ed25dfbeff9eac66d235accbe9d106a68c20aa6208b5a","signature":"97d269f1e14fc0dc554231e8cec77e83b21283c979ad519adc195a389b5fff28"},{"version":"66331bce2b7021f324ccdd4f2b339abfbe15e42121433c4e23f55c8012597ed0","signature":"f48b38233a9ea31fed0a0368dc53b45c481aeb78743fa9d5c87a26380b844982"},{"version":"40a1a6b0d5a332c549ebcc5974809233843bd2be44e67c97e1efbf132dbcecf1","signature":"9733027e4e6922b40f5f72861023db6a093a9a9b95bd6d411dcd5f68930856c2"},{"version":"5eaf5ffeddc2ba2ceafba58fbefcd9e46211d5afe5b1ce00c7f1c9d4a97724b7","signature":"84edb57ed360de98e250f8474db3629ef524b15938d34dd63709cc13f07b2316"},{"version":"41f51ebbb6b7bae85661f20c95f51cd44d0b747b6ffb12330b996dc98a1547cf","signature":"ab0306ce9b846cf246be9f56e09fa24311ba388f5cfd7774d5279453dd922a77"},{"version":"c09d5ca39921c7109fc9f5d444f3165a3a0363d86b288b3bcd61969e214f9bd6","signature":"088672105d19d1e7d39d73077b4991bc9129e694bebdaa239fe655bcbb82b56e"},{"version":"2bd286959128e17e74faa8a2ccb3507c6737b006a50adae40c445f5e2a64066f","signature":"f0fcc98721aaebaf258759014829ac046f0c3d7ba1937a5309eec0e6aa623239"},{"version":"34e8f3422a965d7e5133ff67660641ccded317e2c6bb2fd5a7643ae515baef29","signature":"b41568086cbc802ee04927ceeb92f5d5567d49322e016891f11df778f4bdf603"},{"version":"32f8b3cf63c60c407ddfff66cbbb8000bdc98e16ce5c5c38f58037e8e06c96fd","signature":"f736fb9f91910d72a7ad91e70f9fdc39db48bd34a4a08cb3c27ab127782160fd"},{"version":"b6d1344d5fce0dbc80b374e66b7a42cf922b781ed85985cb6ac0c0088d3a4e81","signature":"2cbf70f8082e6717c97dd226be149e812535cff26a36946164c32c9a53671bee"},{"version":"ff8c79e0c66308b18b551a1ce601f9a5841b8ef64f3f4c3c375462fc8a8058ac","signature":"fc80218c806f68a81df246ed048fbf27b2312f5d518ac5de727ecbfb69224821"},{"version":"2dc1cf789aae0e36b65ad724992869f2af85a26fd4c3630fa9d21b9739a26ea1","signature":"9f6cd3e5f9968b55eac74fb9895260dd3be735bf158409aa7d42b5b946084ef9"},{"version":"27e789b04bd716c7c4043a80649b8ac5fefee47be75be84e0c23fc33ce25b6bf","signature":"10eda88d9c024a46e5a04f8736afa504328f4a90782403b6084f5d2668bba0c7"},{"version":"415f50cc2910a08ffaca23fced037f8a47823e5405a11cdfcfcd1cee773bfb13","signature":"f981caf28d44a5261206b5d9096569180d4812c70a44e977af16c58919bdb257"},{"version":"5937ae5778e66ec1f80a79a4f2e419e025a44b3697b75075331748774df096da","signature":"4ff5e8666b58304c779006da5b94aa247078f05e716c80e1649bb9afc1d73253"},{"version":"fe415d798b0dba2e27212a3db372630ab25e0721027d65be77775911e5c20a07","signature":"aed82d0b7f348a0512a32e014bc0937d3d2511cfc09b91f0d9c0584b74391954"},{"version":"989e8d539fe460118217a9b4ad6e95bda7a4db3d4dd31830153a97eb65b689fb","signature":"0e2e8c6ade30d98c4fd2d9ba4b0c355e922c0ea911b854aa781a76d4a45999e3"},{"version":"af9cb04614e4f602df7898985b09a91413470754ef4f079fa2158769bc6f9245","signature":"68dfc22d24a462e2344abc4d521b2b7191d8e1a719f72b5d92fe3eee76d18d20"},{"version":"235f5387a92944fa2e931c2cdadc054553c0741790035326434baab92d9e4a72","signature":"78d90671a9d995f9bcd9bb274b3c31d538cc614b609fc2ab2ae71c49f6bf1e6c"},{"version":"0392d697815dc1c4d624f88f231e256dc89b9f597b7bd126794138e3fec450ce","signature":"f1ce0721fdd6973475903e740b07231af9224f50ec50c806cffcaa1c04c2b503"},{"version":"3fc52eb9836e6deb69a7fc545823e83b3d94747a8bdbcf896260df9d6594e763","signature":"f50836aa7c3d3e7b3e8207ce25c278af1c7d38814bcf1e74ea6f36c8e7beb022"},{"version":"5c8376eac4ba3405536b48ff81ad28cb6347d0984792f8171abd034d50b9fee0","signature":"37a45eab7fa4ffd1af469af845a8aefca54337d96ac480d95d1f8fcb8158d41e"},{"version":"8fa7bd7286b0cbc2794500be0fdac3821463e77a35c0d62bbdd668291109f03a","signature":"24417a57926a6db9b1f9494b0654ea5a95f3d31e37afc55c37b2e392c96d8593"},{"version":"c18d0357655134509646ecf611ff2c58e64f32a31734aed9a5e989cfcb8d9ca1","signature":"04a915f0f6efc8073dd37d01d889a61b742f9f5c27f2e4e54ac92aeecd97005f"},{"version":"43c06196ce9afd60a6660e79f4a0321725f6259241cd19ec7b6fa9a6203d8435","signature":"af72e994bade5f47cec84e819e369247ebde528ab25e442f54dae0ded2240bae"},{"version":"52e61ae476c91146180ea3961a6fe3a67a1f10fc2729d3544e2748ac7f70fe20","signature":"a539cb8ea896bd25a2148d84ed145b3a2b5cb9f2a065e02a41550146fbcbc8c1"},{"version":"4c57d1d82ec75ba3f2a97edc1e3848bec6335b54281111352b2f3e9af6e9641d","signature":"2ebc90be29c541cbe65fc76ab9642c7348e8f76f04a670930d705b67cc0df910"},{"version":"3be1930d2a8af3cfc5cf6b109c4180ae9a874bc61ee744bbf080252e66f71f8b","signature":"5d4609d2e8ad169d57921e6208464452a66d9efb4b5d514b1eae260684d73781"},{"version":"f704e951f8c530b0fec286fa25e90e5022305065abe17e873fc15490d6f7f857","signature":"a54bc0aa317294bfaa334a680b34f50f24fc6eeb3c108dbe3ca6abcf556666a2"},{"version":"581afac7104db08d4cddf27d13958e0b8230c07982264c8ff621cfaf246957f7","signature":"3f778a44d10b25e89d01fa03df59e8b533ade2b50a7657d1bc627dbc0637f975"},{"version":"21a3b66396be75f7cf52da90e74a816580e05fbbb64a1d048f6e3dc2108af583","signature":"de7bbdc46c46e1dd9a7d5ad5e540be387b436e99cb98056cc424f813f921bfed"},{"version":"c160bb60d1377e7fbfcec4205b7a1f511ea10dc62a50c28e77e7fd43d6e79d16","signature":"8bf87b2d11c320f6d4f7cd2262864aa315ac19b984aec9171fb4574594244782"},{"version":"aebfa00f6a0368c0927a4e2b4897ad88def9e1ab2acea200674d7e8d5ddd448a","signature":"9815a09685beae5661d29e12902cae9e349e5cece7dfd73a12a5041a09935ea3"},{"version":"af594def0cdc0bf635778efd5f7d41202a27f6b44413e23bed90c676d6a55472","signature":"fd6d6052604decb72d92a16b7d3910db8c3b4d2cbce9d1f9bf6f19ca8adb6474"},{"version":"93f001f9b9111a93dea560ccc0a86a5afce282ca4759e724612c8b8261a29aea","signature":"b56871160528f3c252e252a086773c088b52886e33cda678c598666f4e0034f0"},{"version":"ae0d70b4f8a3a43cb0a5a89859aca3611f2789a3bca6a387f9deab912b7605b0","impliedFormat":1},{"version":"966b0f7789547bb149ad553f5a8c0d7b4406eceac50991aaad8a12643f3aec71","impliedFormat":1},{"version":"b7c40d1e8de7df495445590464590003a348fe6c65461a37b999d803ad0a5d74","signature":"2d0cfebc3ccdbb2df4964146ffbf99de0986bb5f7c6b254e0286a7e09a295711"},{"version":"927526049d8a369638640dec9b1d20b99126f0ecba3c486eb9bb6ea139b32c6d","signature":"288dd59fea7653f27343b408c9365177f88006d56c04d2e187a61f5fbd5800ab"},{"version":"5f36027cf9d93fd11a88af80db78e77c9c719613ae34db62fbe878cc283083ff","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"4cf2842e22fe6e6cedeecca5e0ddc17d8bcb12045e19add649805ab352dbb73a","signature":"ff7ba3b550868caf9c51357cca161c0a53e76452327f8cae0acb6fc93e355041"},{"version":"fda285c650c80721abb6c1d26376fe08a086325a1489934699f3c2ded938dac9","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"482593f88e5fbb176a4465c871b37f296df1edba6185f8ed3daae44e79b4b833","signature":"e203fe8e5573c1ed98769a24f7835f13dfc4dd6353463e274eca24915b7ac5f6"},{"version":"3e3c00f23469744a696da17f4b3d931cc745761bc97e2c94f2aed7cd5faee932","signature":"ee66c102e6f9d3482798844bbc62a805791c24aef9d0afb1d556c9b52fcc0083"},{"version":"9a965c358cb0d6218127273874b518d55a296e1ccce04b14d6eba4a68b7027c3","signature":"005579d7f38864f38205f51b91c0beeffbe47c94b6fdfb7942d9402141ee8301"},{"version":"68d7a46cac96e5ecad604c8fafdd8fe7338dc4377f9939ec1ccd544354e739ec","impliedFormat":1},{"version":"4e83149ba07d2201b728b5326c6d86013e9e295af5ec3fd7b6d980878e6d0b73","impliedFormat":1},{"version":"90a86863e3a57143c50fec5129d844ec12cef8fe44d120e56650ed51a6ce9867","impliedFormat":1},{"version":"472c0a98c5de98b8f5206132c941b052f5cc1ae78860cb8712ac4f1ebf4550ca","impliedFormat":1},{"version":"538c4903ef9f8df7d84c6cf2e065d589a2532d152fa44105c7093a606393b814","impliedFormat":1},{"version":"cfcb6acbb793a78b20899e6537c010bfbbf939c77471abcdc2a41faf9682ca1a","impliedFormat":1},{"version":"a7798e86de8e76844f774f8e0e338149893789cdc08970381f0ae78c86e8667f","impliedFormat":1},{"version":"4f5247ca2cff5b143a88eed88f6630ada26ad28257592a94c8d0dd5e0afa8609","impliedFormat":1},{"version":"6b359d3c3138a9f4d3a9c9a8fda24be6fd15bd789e692252b53e68ce99db8edc","impliedFormat":1},{"version":"9488b648a6a4146b26c0fd4e85984f617056293092a89861f5259a69be16ca5c","impliedFormat":1},{"version":"e156513655462b5811a8f980e32ccd204c19042f8c9756430fe4e8d6f7c1326e","impliedFormat":1},{"version":"5679b694d138b8c4b3d56c9b1210f903c6b0ca2b5e7f1682a2dd41a6c955f094","impliedFormat":1},{"version":"ca8da035b76fb0136d2c1390dda650b7979202dbe0f5dc7eaefcde1c76dee4f4","impliedFormat":1},{"version":"4b1022a607444684abeee6537e4cace97263d1ef047c31b012c41fdc15838a79","impliedFormat":1},{"version":"dd0271250f1e4314e52d7e0da9f3b25a708827f8a43ceff847a2a5e3fd3283e8","affectsGlobalScope":true,"impliedFormat":1},{"version":"47971d8a8639a2a2dd684091c6e7660ec5909fed540c4479ca24e22ac237194e","affectsGlobalScope":true,"impliedFormat":1},{"version":"e1075312b07671ef1cbf46409a0fa2eb2b90bb59c6215c94f0e530113013eeda","impliedFormat":1},{"version":"1bfd63c3f3749c5dc925bb0c05f229f9a376b8d3f8173d0e01901c08202caf6f","impliedFormat":1},{"version":"da850b4fdbabdd528f8b9c2784c5ba3b3bedc4e2e1e34dcd08b6407f9ec61a25","impliedFormat":1},{"version":"e61c918bb5f4a39b795a06e22bc4d44befcefd22f6a5c8a732c9ed0b565a6128","impliedFormat":1},{"version":"ee56351989b0e6f31fd35c9048e222146ced0aac68c64ce2e034f7c881327d6d","impliedFormat":1},{"version":"f58b2f1c8f4bcf519377d39f9555631b6507977ad2f4d8b73ac04622716dc925","impliedFormat":1},{"version":"4c805d3d1228c73877e7550afd8b881d89d9bc0c6b73c88940cffcdd2931b1f6","impliedFormat":1},{"version":"4aa74b4bc57c535815ae004550c59a953c8f8c3c61418ac47a7dcfefba76d1ba","impliedFormat":1},{"version":"78b17ceb133d95df989a1e073891259b54c968f71f416cd76185308af4f9a185","impliedFormat":1},{"version":"d76e5d04d111581b97e0aa35de3063022d20d572f22f388d3846a73f6ce0b788","impliedFormat":1},{"version":"0a53bb48eba6e9f5a56e3b85529fbbe786d96e84871579d10593d4f3ae0f9dba","impliedFormat":1},{"version":"d34fb8b0a66f0a406c7ce63a36f16dda7ff4500b11b0bd30a491aa0d59336d1f","impliedFormat":1},{"version":"282b31893b18a06114e5173f775dd085597ca220d183b8bd474d21846c048334","impliedFormat":1},{"version":"ed27d5ce258f069acf0036471d1fbb56b4cb3c16d7401b52a51297eca651db62","impliedFormat":1},{"version":"ec203a515afd88589bf1d384535024f5b90ebe6b5c416fb3dcca0abd428a8ba4","impliedFormat":1},{"version":"32a2a1374b57f0744d284ca93b477bd97825922513a24dfe262cbf3497377d96","impliedFormat":1},{"version":"a8b60d24dc1eb26c0e987f9461c893744339a7f48e4496f8077f258a644cffab","impliedFormat":1},{"version":"3f9df27a77a23d69088e369b42af5f95bcb3e605e6b5c2395f0bfcd82045e051","affectsGlobalScope":true,"impliedFormat":1},{"version":"9fd080a9458c6d6f3eb6d4e2b12a3ec498d7d219863e9dca0646bdee9acce875","impliedFormat":1},{"version":"e5d31928bee2ba0e72aeb858881891f8948326e4f91823028d0aea5c6f9e7564","affectsGlobalScope":true,"impliedFormat":1},{"version":"9a9ba9f6fd097bb2f57d68da8a39403bbe4dc818b8ccd155a780e4e23fa556f2","impliedFormat":1},{"version":"e50c4cd1f5cbce3e74c19a5bbf503c460e6ae86597e6d648a98c7f6c90b596dd","impliedFormat":1},{"version":"fa140f881e20591ce163039a7968b54c5e51c11228708b4f9147473d06471cf5","affectsGlobalScope":true,"impliedFormat":1},{"version":"295eca0c47be1191690fd2fe588195fff9d4dc43852aceb8b4cab2aa634579f0","impliedFormat":1},{"version":"59ee7346e19b0050508a592702871dc943083c6dcb69a47d52e888115d840781","impliedFormat":1},{"version":"067712491fb2094c212c733dd8e2d56e74c309a9ce9dac9e919286b7245a1eb4","impliedFormat":1},{"version":"a5eae58ac55bd30c42359e4b01fb2be5eddac336869d3f04ffb4daa54b58f009","impliedFormat":1},{"version":"d12d691ef8933e8db39f2ca81d6973940ff5e37bb421752f5b6e7bc15dea3abf","impliedFormat":1},{"version":"4c5f8bd9b3a1aae4e4fddfee41667e495a045f73ed603993038fa6a8ba92fa14","impliedFormat":1},{"version":"dfb274ab0f319cf18ce7152067c25f984c7fd1924fc72b3f66734588444c934a","impliedFormat":1},{"version":"108c8c05cbc3fbbbd4ff4fc0779c9bef55655c28528eb0f77829795dc9f0b484","impliedFormat":1},{"version":"a7e5444d24cdec45f113f4fb8a687e1c83a5d30c55d2da19a04be71108ad77bd","impliedFormat":1},{"version":"41ec17e218b7358fcff25c719bc419fec8ec98f13e561b9a33b07392d4fec24c","impliedFormat":1},{"version":"23c204326746e981e02d7f0a15ab6f8015f9035998cb3766c9ddbf8ea247aea2","impliedFormat":1},{"version":"25f994b5d76ce6a3186a3319555bbba79706dac2174019915c39ac6080e98c7e","impliedFormat":1},{"version":"dfa4e2c6a612d43851ccbc499598cb006a3a78bc8c7f972c52078f862fa84e47","impliedFormat":1},{"version":"02c1705fa902f172be6e9020d74bcd92ce5db8d2ef3e1b03aabc2ac8eb46c3db","impliedFormat":1},{"version":"99d2d8a0c7bb3dd77459552269a7b5865fa912cedab69db686d40d2586b551f7","impliedFormat":1},{"version":"b47abe58626d76d258472b1d5f76752dd29efe681545f32698db84e7f83517df","impliedFormat":1},{"version":"84b12ca0a824a80a548e4ba3fa2b137f40717b3f0de238789ca6caf092c8b6d5","impliedFormat":1},{"version":"52492ed677c9f93cda1835ed5cf6bc9b74aacb1fcccb3f457cafffee05e3307b","impliedFormat":1},{"version":"3b4195afd41a9215afc7be0820f8083f6bd2e85e5e0b45bb0061fb041944711e","impliedFormat":1},{"version":"108df8095f5e25d7189dd0d1433ac2df75ec40c779d8faf7d2670f1485beb643","impliedFormat":1},{"version":"ddd3c1d3c9ff67140191a3cf49b09875e20f28f2fc5535ae5ea16e14293a989b","impliedFormat":1},{"version":"7b496e53d5f7e1737adcb5610516476ee055bf547918797348f245c68e7418fe","impliedFormat":1},{"version":"577f44389d7faedd7fc9c0330caf73140e5d0d5f6c968210bff78be569f398a7","impliedFormat":1},{"version":"3046c57724587a59bceefadd30040d418e9df81b9f3cfd680618a3511302ed7a","impliedFormat":1},{"version":"15ccc911ed15397e838471bfe6d476c28deffe976c05cb057e6b1ea7491242c2","impliedFormat":1},{"version":"64b5a5ebdaead77a9a564aa938f4fb7a45e27cda7441d3bee8c9de8a4df5a04f","impliedFormat":1},{"version":"a48037f7af5f80df8973db5e562e17566407541de284b8dadf1879ea3aed8a2f","impliedFormat":1},{"version":"dab97d96ce986857150db03f0d435b44c060d126b4a387c7807f4e9f6c92e531","impliedFormat":1},{"version":"85f39366ea7bc5e34b596fc97de18a7e377856755e789d8e931054f2191d9b8b","impliedFormat":1},{"version":"daf3ea3d49f6e8a2fa70b7ca1f21bd97f1b65021b31fbfccb73dd55f86abb792","impliedFormat":1},{"version":"b15bd260805f9dd06cd4b2b741057209994823942c5696fd835e8a04fb4aab6b","impliedFormat":1},{"version":"6635a824edf99ed52dbd3502d5bce35990c3ed5e2ec5cef88229df8ac0c52b06","impliedFormat":1},{"version":"d6577effa37aae713c34363b7cc4c84851cbabe399882c60e2b70bcbb02bfa01","impliedFormat":1},{"version":"8eaf80ad438890fe5880c39a7bbf2c998ce7d29d4c14dd56d82db63bd871eefb","impliedFormat":1},{"version":"9b3e7f776f312c76ac67e1060e5398d7ac2c69d6a3a928a9daaae2eb05b15f56","impliedFormat":1},{"version":"202042eccb4789b7dee51ba9ecab0b854834ea5c1d6a3946504bfc733d4468c3","impliedFormat":1},{"version":"2b2ef76a9f36094b07ee6f76a5ac6903f2f65c0a20283201814a8d1e752cb592","impliedFormat":1},{"version":"8882e4e087d0bc8cc713cb3d8090c45d33e373e6f5c83e0f8d00fe6a950ef875","impliedFormat":1},{"version":"d199b9a9eb6190db46e0a1398c443da30cbc0cd48a76dbb03b79b2c0f820e6db","signature":"a1d8c1c55c58d065af02d0c544ae15555ffdb483e306bab4fb96d46e5e5e811b"},{"version":"11b4922d3ea16e0cc507d70a3e7ebca8c1d687aebcaa7e03f637d3148fa32859","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"fc461954686d67e14b9de72f4a9c2fb1fcb33f9514fafa75428bf47d94ed6a3a","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"0ef34826c5cdb1b5178f4dbe85f1284879ffa45b28043d5739025965628848e4","signature":"444b0ef54600f5a328ee52787c29c0206f8afa2146db62ff067ea18f00f3e1b9"},{"version":"6f8806f89591ea3fd04d57d5c8574ed2e7e92988babbc949ed376bd1e3d04562","signature":"cdaf70376ed32e25dfa972c9ac654f2d4f9adac0d53d210e96aa25df1788a81b"},{"version":"84a9c9a4eb0bc6dfbca7ef1ed1139736527ca00aa67deaf638eb47b569932ea7","signature":"8d619e6fc109d97fd0b81e7cfadf1aae110c9c9960a934f09bb34ee12d481cdc"},{"version":"f99866e4d557fd35f057f7a3d1cc708872a57737fa3d430feeee07c0d76ded62","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"0c8903012173e3f1ebdd9e87e52baf36cb081d8a17b057bebf0fe0f82155a354","signature":"df805af295f327f7e06bbe822f334ea659dab7f6e07c9a1961276e25c7af37ac"},{"version":"6aa7298467331d5758cfb012c1bd91c1e81a884ebec9b799f36e581a96370787","signature":"45ba41e57ea9a00600c93643a836f0927c0722dc431314ea6ec80e56e975ef1f"},{"version":"07d5f08e646adfe163342c5dd9a79951622a271eb2ab919e978d95e0cc74f45d","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"9335214a8666d03fa39c56ae23c332efe6de152ac25e24c8dd0d6fa7246dbf6f","signature":"005579d7f38864f38205f51b91c0beeffbe47c94b6fdfb7942d9402141ee8301"},{"version":"3d7c11ed6ceb2bbb00810b89322fb1fffe8e8fa7e2e5f249ae8bdbdabb6c4705","signature":"5b061df57cbcf8ad4f41e3f35e8d53a937a9796e3fe8808689effb3a1c779ca7"},{"version":"34c7991e6c362f7e8a9e62a509304af131a18cf5f5dc270896c2e6c87b7aa4a7","signature":"2b95d8a0278213352b3ac8ac19cb5c2f70f9a1c15fc2251512f14948c04cf967"},{"version":"12414ba39f570a8a15a7217a24dd7895e5c39b23e2295b1bf8c47fbde6a647fd","signature":"b1292c2773d0bce9a95f6d7bc24b87dc35e39839ab9610386b288c6947e56678"},{"version":"bcb26c58ed59e4e91e5585c03b9bf36217ad0fcd627714c5c9ff455de11b86d3","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"b47a52ee175d3eb76d2b627c45cdd9b90e1be4573a73d8c03d117d782724a18d","signature":"d2bb2ae5e26a6a6062e50340a0e041cea69484cc4e80ffb2e876e29aceebb580"},{"version":"12846215acecbe123264f42c2780786c740926e4e51beea75310aa14c62fec09","signature":"3e65b7b7c903b880b17c37cc1429a5fe7632d47454706cd17d2145a51287f0b8"},{"version":"95ac93c478a8ad6dc841d8cd68acd75a65e3cc98af1ae03d48c4e3f42b21ce27","signature":"c51c52a4bfe4ae8a6a39a7668463d3c1436a91270af73ed86d46cb6c14568ec8"},{"version":"397296bd5bbb2c97011d0545dd574c26fb880cce20b38de1b93b0b1092073052","signature":"f778f9fbba27f533fd73d2d9f981768ca3c4d43bb99799b3b570c8c3b648e835"},{"version":"dddb28c4e4e6cfae7b41b181f3bfbe926d913663d41241c4539f1f6bf2c0e057","signature":"9ec9675413e1fe9c0a297e54cec2e8409fd680249c3e433fc6747ef47067588e"},{"version":"c99b1e013be34734ac8aca2fab9af91112c7f7eca3ec7c84bf88e66c686ee0e9","signature":"5645aae92c722870fbfc853546fbdd230b555a276ca11918bee9e3889889a047"},{"version":"31a37b2b7d8a98d30c1afa763a242c2ad14dbe40b228766de64b2970273eb07c","signature":"ecb6448ebd8caa6cb44d368bf2ffca66df24a00b511dbc47ff62bc6a388a89e9"},{"version":"cf4df5ebd23fee69297fd0ec497f3bac75edcfdd0a76220c52ecdd7506252c9c","signature":"3d7610dd4a679501760137c1a82ce1046b6bc2f6be51826e2f6b02bba94742c1"},{"version":"400ab7ef28333a6ebfa45f4e4297064c101a4809e6e962feab9ccab1df4bdc40","signature":"49b1c032d0befc5978749c9df6671b175f6a85751d985a616d53a2c4b85c305d"},{"version":"cecdd3161b6ffd720037eef4a416b88b94d92ed0972b0774a746d1de06835849","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"29b04d5fb5da738c3007414a2ab810b13a56ffc3bb9045af3026b2be63a1bdae","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"b98ba9ffe8299bbd76b5e4c01aad767b0a69d914b03fa2d747e9910c8bda0841","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"dde46e2a1d1aba76138668fd49344fc68f9eca78f6e984a47906b875e64403fa","signature":"70ae02c6c1b1034e4eaabe6fbc17cdbf8c3d4fb580ee3ceaa3697fdc0e1379d1"},{"version":"9db7b7e25da6d92d59e9c92bc2d9c007e3f820629b9df05c834f59bcbebe6cc0","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"2734a01837dc7788c715dd87cef84b3c4103fb055ae04fc791a246b266c5d0f5","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"2725fde6c2643799b3fad1b041288635bc3b711a57a57782303e8513fbac58e9","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"28e3e2b840626e2fa02062cb4e07b28e19e4a4c78b34819bdbf488e6c8737cf3","signature":"06c3ce7fe31a4e81575a6ac9ac318c5ecec58b32d5e0a5ed0faae30de642450a"},{"version":"0ec8c55526441426ee82118b18c45eb31bf37b06834c673c0badcb6ca072b99d","signature":"a1349196716a3bc62f7856e7af917e2b089dbc6284534bf3f5158d9c7c7bb3fa"},{"version":"630f21fb5fa5bcd053fd83cc5d118fefd34186bcd833ba784978f0e3fc255424","signature":"08379b271461d8455944286da9a9de0d9224549144982f5cc03eaade09d0752f"},{"version":"241b91b611a043a917a626b9d8416095b110fc99deb3752dd07cf5898c61db16","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"596fad21c20e78815290e926657c3998c1139780050563480ff0c718437e6e69","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"3d11e619bc3c61cd8c80f4bcb703abfeaf99621c8f43fd704a00e637a5bfa7a6","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"177be9cec36496b2aeea9ee99a5249ad5960444fb91f46035dfba1a7023731bd","signature":"08350470caf6b68a2fda08caf7c213e124b391c7961c06e0c3d299347b7669a2"},{"version":"ad7cf670cf7c09588bd2f0755ce3c96357ac2700761a070fc7d5404ab7024a40","signature":"1fb7bd503cc6f3ec0a9901879fe1fe1f3c4fa1759c74c3384f71e2da1f4935a2"},{"version":"100f550f57a3b1bd20a1320b356afd26cc18aa8f9c3405bd1d5bcfe269db4191","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"58274adf67278ac50b61f38527c76d691c9a30a6948872567179f6fbe9898d27","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"df350883a357b19097b85c8258bdedda6b57c2de007c84d825d5132816c967e9","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"8e993bfd49aff7f34a70d8498cc6e0988d7e34c0474ebffba10c7c5fda14877c","signature":"2e01bb099f325b0bd5fe6dccb6b967d08c9feda28dedc8a61b619fc2ee413f85"},{"version":"c6392a97db6b6e745e36392874ddd104961d78031239e879ae96c3953bfb7962","signature":"2fb215f670f2c7fe4651dc3b3e86d10541a9ad9c8049a4214739321f58fd003d"},{"version":"03f1d83d61696326ea29c8a1c15cbaccf61e92598d53f2ccae06078531f42448","impliedFormat":1},{"version":"2c8e55457aaf4902941dfdba4061935922e8ee6e120539c9801cd7b400fae050","impliedFormat":1},{"version":"3a9313fe5ace558b8b18e85f931da10b259e738775f411c061e5f15787b138eb","impliedFormat":1},{"version":"670a76db379b27c8ff42f1ba927828a22862e2ab0b0908e38b671f0e912cc5ed","impliedFormat":1},{"version":"9e0cf651e8e2c5b9bebbabdff2f7c6f8cedd91b1d9afcc0a854cdff053a88f1b","impliedFormat":1},{"version":"069bebfee29864e3955378107e243508b163e77ab10de6a5ee03ae06939f0bb9","impliedFormat":1},{"version":"104c67f0da1bdf0d94865419247e20eded83ce7f9911a1aa75fc675c077ca66e","impliedFormat":1},{"version":"cc0d0b339f31ce0ab3b7a5b714d8e578ce698f1e13d7f8c60bfb766baeb1d35c","impliedFormat":1},{"version":"868f16a33ccfa800b82bd0975bc9fe7a4a3aa0d747873e2f7e5886c32665ad6d","impliedFormat":1},{"version":"1748c03e7a7d118f7f6648c709507971eb0d416f489958492c5ae625de445184","impliedFormat":1},{"version":"a1c79f857f5c7754e14c93949dad8cfefcd7df2ecc0dc9dd79a30fd493e28449","impliedFormat":1},{"version":"f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","impliedFormat":1},{"version":"a4a39b5714adfcadd3bbea6698ca2e942606d833bde62ad5fb6ec55f5e438ff8","impliedFormat":1},{"version":"bbc1d029093135d7d9bfa4b38cbf8761db505026cc458b5e9c8b74f4000e5e75","impliedFormat":1},{"version":"1f68ab0e055994eb337b67aa87d2a15e0200951e9664959b3866ee6f6b11a0fe","impliedFormat":1},{"version":"d3f2d715f57df3f04bf7b16dde01dec10366f64fce44503c92b8f78f614c1769","impliedFormat":1},{"version":"b78cd10245a90e27e62d0558564f5d9a16576294eee724a59ae21b91f9269e4a","impliedFormat":1},{"version":"f0c3a51c7314523b169d4756b2df6e3e59a3f0d9bc4848248362edaf75b5d315","impliedFormat":1},{"version":"2f5747b1508ccf83fad0c251ba1e5da2f5a30b78b09ffa1cfaf633045160afed","impliedFormat":1},{"version":"21e0b438a5e837907407bcb5bc9cd375b05e05fba21958d0eae50b66834a5c2d","affectsGlobalScope":true,"impliedFormat":1},{"version":"b71c603a539078a5e3a039b20f2b0a0d1708967530cf97dec8850a9ca45baa2b","impliedFormat":1},{"version":"0e13570a7e86c6d83dd92e81758a930f63747483e2cd34ef36fcdb47d1f9726a","impliedFormat":1},{"version":"5c45abf1e13e4463eacfd5dedda06855da8748a6a6cb3334f582b52e219acc04","impliedFormat":1},{"version":"afe73051ff6a03a9565cbd8ebb0e956ee3df5e913ad5c1ded64218aabfa3dcb5","impliedFormat":1},{"version":"b2d0630483bf337ef9dac326c3334a245aa4946e9f60f12baf7da5be44beafbb","impliedFormat":1},{"version":"035a5df183489c2e22f3cf59fc1ed2b043d27f357eecc0eb8d8e840059d44245","impliedFormat":1},{"version":"a4809f4d92317535e6b22b01019437030077a76fec1d93b9881c9ed4738fcc54","impliedFormat":1},{"version":"5f53fa0bd22096d2a78533f94e02c899143b8f0f9891a46965294ee8b91a9434","impliedFormat":1},{"version":"19990350fca066265b2c190c9b6cde1229f35002ea2d4df8c9e397e9942f6c89","impliedFormat":99},{"version":"8fb8fdda477cd7382477ffda92c2bb7d9f7ef583b1aa531eb6b2dc2f0a206c10","impliedFormat":99},{"version":"66995b0c991b5c5d42eff1d950733f85482c7419f7296ab8952e03718169e379","impliedFormat":99},{"version":"9863f888da357e35e013ca3465b794a490a198226bd8232c2f81fb44e16ff323","impliedFormat":99},{"version":"3ee468ba409b231f05d8120a257d8fd52f81db173cfd55d2d38825d4a9e0d4d8","impliedFormat":1},{"version":"3ee468ba409b231f05d8120a257d8fd52f81db173cfd55d2d38825d4a9e0d4d8","impliedFormat":1},{"version":"8eda1b176639dc7e6dfb326bd10532e2de9e18c4f100ed9f3d0753b04e2c9f53","impliedFormat":1},{"version":"e61235deb17d4d200b1aebd5e1b78a9f7f03108d3fe73c522476de89f2169d88","impliedFormat":1},{"version":"fa292ea8941a603dc795593c5811d9b865b96e560f99dcfcec94705d5264296d","impliedFormat":99},{"version":"db085d2171d48938a99e851dafe0e486dce9859e5dfa73c21de5ed3d4d6fb0c5","impliedFormat":99},{"version":"fb741132c87a219532b69832d9389ed13db734b436ad3d0d62d722de86321869","impliedFormat":99},{"version":"a77be6fc44c876bc10c897107f84eaba10790913ebdcad40fcda7e47469b2160","impliedFormat":99},{"version":"0b098b627c5198819456b7466aef8253f562a6a64d66810804cfad6ff36204c6","impliedFormat":99},{"version":"91f5dbcdb25d145a56cffe957ec665256827892d779ef108eb2f3864faff523b","impliedFormat":99},{"version":"052ba354bab8fb943e0bc05a0769f7b81d7c3b3c6cd0f5cfa53c7b2da2a525c5","impliedFormat":99},{"version":"927955a3de5857e0a1c575ced5a4245e74e6821d720ed213141347dd1870197f","impliedFormat":99},{"version":"fec804d54cd97dd77e956232fc37dc13f53e160d4bbeeb5489e86eeaa91f7ebd","impliedFormat":99},{"version":"03c258e060b7da220973f84b89615e4e9850e9b5d30b3a8e4840b3e3268ae8eb","impliedFormat":1},{"version":"fd0589ca571ad090b531d8c095e26caa53d4825c64d3ff2b2b1ab95d72294175","impliedFormat":1},{"version":"669843ecafb89ae1e944df06360e8966219e4c1c34c0d28aa2503272cdd444a7","affectsGlobalScope":true,"impliedFormat":1},{"version":"96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","impliedFormat":1},{"version":"7220461ab7f6d600b313ce621346c315c3a0ebc65b5c6f268488c5c55b68d319","impliedFormat":1},{"version":"f90d4c1ae3af9afb35920b984ba3e41bdd43f0dc7bae890b89fbd52b978f0cac","impliedFormat":1},{"version":"fcf79300e5257a23ed3bacaa6861d7c645139c6f7ece134d15e6669447e5e6db","impliedFormat":1},{"version":"187119ff4f9553676a884e296089e131e8cc01691c546273b1d0089c3533ce42","impliedFormat":1},{"version":"aa2c18a1b5a086bbcaae10a4efba409cc95ba7287d8cf8f2591b53704fea3dea","impliedFormat":1},{"version":"b88749bdb18fc1398370e33aa72bc4f88274118f4960e61ce26605f9b33c5ba2","impliedFormat":1},{"version":"0aaef8cded245bf5036a7a40b65622dd6c4da71f7a35343112edbe112b348a1e","impliedFormat":1},{"version":"00baffbe8a2f2e4875367479489b5d43b5fc1429ecb4a4cc98cfc3009095f52a","impliedFormat":1},{"version":"bdf0ed7d9ebae6175a5d1b4ec4065d07f8099379370a804b1faff05004dc387d","impliedFormat":1},{"version":"7c14ccd2eaa82619fffc1bfa877eb68a012e9fb723d07ee98db451fadb618906","impliedFormat":1},{"version":"288d992cd0d35fd4bb5a0f23df62114b8bfbc53e55b96a4ad00dde7e6fb72e31","impliedFormat":1},{"version":"df996e25faa505f85aeb294d15ebe61b399cf1d1e49959cdfaf2cc0815c203f9","impliedFormat":1},{"version":"4f6a12044ee6f458db11964153830abbc499e73d065c51c329ec97407f4b13dd","impliedFormat":1},{"version":"736097ddbb2903bef918bb3b5811ef1c9c5656f2a73bd39b22a91b9cc2525e50","impliedFormat":1},{"version":"4340936f4e937c452ae783514e7c7bbb7fc06d0c97993ff4865370d0962bb9cf","impliedFormat":1},{"version":"b70c7ea83a7d0de17a791d9b5283f664033a96362c42cc4d2b2e0bdaa65ef7d1","impliedFormat":1},{"version":"cf3d384d082b933d987c4e2fe7bfb8710adfd9dc8155190056ed6695a25a559e","impliedFormat":1},{"version":"9871b7ee672bc16c78833bdab3052615834b08375cb144e4d2cba74473f4a589","impliedFormat":1},{"version":"c863198dae89420f3c552b5a03da6ed6d0acfa3807a64772b895db624b0de707","impliedFormat":1},{"version":"8b03a5e327d7db67112ebbc93b4f744133eda2c1743dbb0a990c61a8007823ef","impliedFormat":1},{"version":"86c73f2ee1752bac8eeeece234fd05dfcf0637a4fbd8032e4f5f43102faa8eec","impliedFormat":1},{"version":"42fad1f540271e35ca37cecda12c4ce2eef27f0f5cf0f8dd761d723c744d3159","impliedFormat":1},{"version":"ff3743a5de32bee10906aff63d1de726f6a7fd6ee2da4b8229054dfa69de2c34","impliedFormat":1},{"version":"83acd370f7f84f203e71ebba33ba61b7f1291ca027d7f9a662c6307d74e4ac22","impliedFormat":1},{"version":"1445cec898f90bdd18b2949b9590b3c012f5b7e1804e6e329fb0fe053946d5ec","impliedFormat":1},{"version":"0e5318ec2275d8da858b541920d9306650ae6ac8012f0e872fe66eb50321a669","impliedFormat":1},{"version":"cf530297c3fb3a92ec9591dd4fa229d58b5981e45fe6702a0bd2bea53a5e59be","impliedFormat":1},{"version":"c1f6f7d08d42148ddfe164d36d7aba91f467dbcb3caa715966ff95f55048b3a4","impliedFormat":1},{"version":"f4e9bf9103191ef3b3612d3ec0044ca4044ca5be27711fe648ada06fad4bcc85","impliedFormat":1},{"version":"0c1ee27b8f6a00097c2d6d91a21ee4d096ab52c1e28350f6362542b55380059a","impliedFormat":1},{"version":"7677d5b0db9e020d3017720f853ba18f415219fb3a9597343b1b1012cfd699f7","impliedFormat":1},{"version":"bc1c6bc119c1784b1a2be6d9c47addec0d83ef0d52c8fbe1f14a51b4dfffc675","impliedFormat":1},{"version":"52cf2ce99c2a23de70225e252e9822a22b4e0adb82643ab0b710858810e00bf1","impliedFormat":1},{"version":"770625067bb27a20b9826255a8d47b6b5b0a2d3dfcbd21f89904c731f671ba77","impliedFormat":1},{"version":"d1ed6765f4d7906a05968fb5cd6d1db8afa14dbe512a4884e8ea5c0f5e142c80","impliedFormat":1},{"version":"799c0f1b07c092626cf1efd71d459997635911bb5f7fc1196efe449bba87e965","impliedFormat":1},{"version":"2a184e4462b9914a30b1b5c41cf80c6d3428f17b20d3afb711fff3f0644001fd","impliedFormat":1},{"version":"9eabde32a3aa5d80de34af2c2206cdc3ee094c6504a8d0c2d6d20c7c179503cc","impliedFormat":1},{"version":"397c8051b6cfcb48aa22656f0faca2553c5f56187262135162ee79d2b2f6c966","impliedFormat":1},{"version":"a8ead142e0c87dcd5dc130eba1f8eeed506b08952d905c47621dc2f583b1bff9","impliedFormat":1},{"version":"a02f10ea5f73130efca046429254a4e3c06b5475baecc8f7b99a0014731be8b3","impliedFormat":1},{"version":"c2576a4083232b0e2d9bd06875dd43d371dee2e090325a9eac0133fd5650c1cb","impliedFormat":1},{"version":"4c9a0564bb317349de6a24eb4efea8bb79898fa72ad63a1809165f5bd42970dd","impliedFormat":1},{"version":"f40ac11d8859092d20f953aae14ba967282c3bb056431a37fced1866ec7a2681","impliedFormat":1},{"version":"cc11e9e79d4746cc59e0e17473a59d6f104692fd0eeea1bdb2e206eabed83b03","impliedFormat":1},{"version":"b444a410d34fb5e98aa5ee2b381362044f4884652e8bc8a11c8fe14bbd85518e","impliedFormat":1},{"version":"c35808c1f5e16d2c571aa65067e3cb95afeff843b259ecfa2fc107a9519b5392","impliedFormat":1},{"version":"14d5dc055143e941c8743c6a21fa459f961cbc3deedf1bfe47b11587ca4b3ef5","impliedFormat":1},{"version":"a3ad4e1fc542751005267d50a6298e6765928c0c3a8dce1572f2ba6ca518661c","impliedFormat":1},{"version":"f237e7c97a3a89f4591afd49ecb3bd8d14f51a1c4adc8fcae3430febedff5eb6","impliedFormat":1},{"version":"3ffdfbec93b7aed71082af62b8c3e0cc71261cc68d796665faa1e91604fbae8f","impliedFormat":1},{"version":"662201f943ed45b1ad600d03a90dffe20841e725203ced8b708c91fcd7f9379a","impliedFormat":1},{"version":"c9ef74c64ed051ea5b958621e7fb853fe3b56e8787c1587aefc6ea988b3c7e79","impliedFormat":1},{"version":"2462ccfac5f3375794b861abaa81da380f1bbd9401de59ffa43119a0b644253d","impliedFormat":1},{"version":"34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","impliedFormat":1},{"version":"7d8ddf0f021c53099e34ee831a06c394d50371816caa98684812f089b4c6b3d4","impliedFormat":1},{"version":"ab82804a14454734010dcdcd43f564ff7b0389bee4c5692eec76ff5b30d4cf66","impliedFormat":1},{"version":"1f4ae755492a669b317903a6b1664cb7af3fe0c3d1eec6447f4e95a80616d15a","impliedFormat":1},{"version":"cfb95dbcdee02402fb9373c62ec4ba735b5479e5d879f39e7c23fe1d58186e31","affectsGlobalScope":true,"impliedFormat":1},{"version":"bae8d023ef6b23df7da26f51cea44321f95817c190342a36882e93b80d07a960","impliedFormat":1},{"version":"26a770cec4bd2e7dbba95c6e536390fffe83c6268b78974a93727903b515c4e7","impliedFormat":1}],"root":[404,429,[486,490],[494,504],[510,512],515,[517,522],[553,556],[574,580],[582,585],714,715,[878,894],[898,906],[915,961],[964,971],[1049,1092]],"options":{"allowJs":true,"esModuleInterop":true,"jsx":1,"module":99,"skipLibCheck":true,"strict":true,"target":2},"referencedMap":[[404,1],[1095,2],[1093,3],[581,3],[573,4],[571,5],[572,6],[430,3],[433,7],[594,8],[595,9],[875,10],[876,11],[874,12],[356,3],[873,3],[593,3],[505,13],[507,14],[523,14],[509,15],[506,13],[516,16],[508,14],[432,3],[428,3],[443,17],[442,18],[441,19],[481,3],[478,3],[477,3],[474,20],[483,21],[470,19],[479,22],[473,23],[472,24],[480,3],[475,25],[482,3],[476,26],[471,3],[485,27],[1034,28],[1035,28],[1037,29],[1036,28],[1029,28],[1030,28],[1032,30],[1031,28],[1009,3],[1008,3],[1011,31],[1010,3],[1007,3],[974,32],[972,33],[975,3],[1022,34],[976,28],[1012,35],[1021,36],[1013,3],[1016,37],[1014,3],[1017,3],[1019,3],[1015,37],[1018,3],[1020,3],[973,38],[1048,39],[1033,28],[1028,40],[1038,41],[1044,42],[1045,43],[1047,44],[1046,45],[1026,40],[1027,46],[1023,47],[1025,48],[1024,49],[1039,28],[1043,50],[1040,28],[1041,51],[1042,28],[977,3],[978,3],[981,3],[979,3],[980,3],[983,3],[984,52],[985,3],[986,3],[982,3],[987,3],[988,3],[989,3],[990,3],[991,53],[992,3],[1006,54],[993,3],[994,3],[995,3],[996,3],[997,3],[998,3],[999,3],[1002,3],[1000,3],[1001,3],[1003,28],[1004,28],[1005,55],[440,3],[1098,56],[1094,2],[1096,57],[1097,2],[1100,58],[1101,59],[1099,60],[1102,3],[1107,61],[1106,62],[1105,63],[1103,3],[1112,64],[1115,65],[1116,66],[1117,13],[1113,3],[1118,3],[1119,67],[1120,68],[439,69],[438,70],[1139,71],[1140,72],[1104,3],[1141,3],[1143,73],[1144,74],[1142,75],[1145,76],[1146,77],[1147,78],[1148,79],[1149,80],[1150,81],[1151,82],[1152,83],[1153,84],[1154,85],[1108,3],[1156,3],[1157,86],[135,87],[136,87],[137,88],[95,89],[138,90],[139,91],[140,92],[90,3],[93,93],[91,3],[92,3],[141,94],[142,95],[143,96],[144,97],[145,98],[146,99],[147,99],[149,100],[148,101],[150,102],[151,103],[152,104],[134,105],[94,3],[153,106],[154,107],[155,108],[187,109],[156,110],[157,111],[158,112],[159,113],[160,114],[161,115],[162,116],[163,117],[164,118],[165,119],[166,119],[167,120],[168,3],[169,121],[171,122],[170,123],[172,124],[173,125],[174,126],[175,127],[176,128],[177,129],[178,130],[179,131],[180,132],[181,133],[182,134],[183,135],[184,136],[185,137],[186,138],[82,3],[1110,3],[1111,3],[192,139],[193,140],[191,13],[484,141],[189,142],[190,143],[80,3],[83,144],[280,13],[1182,145],[1183,146],[1158,147],[1161,147],[1180,145],[1181,145],[1171,145],[1170,148],[1168,145],[1163,145],[1176,145],[1174,145],[1178,145],[1162,145],[1175,145],[1179,145],[1164,145],[1165,145],[1177,145],[1159,145],[1166,145],[1167,145],[1169,145],[1173,145],[1184,149],[1172,145],[1160,145],[1197,150],[1196,3],[1191,149],[1193,151],[1192,149],[1185,149],[1186,149],[1188,149],[1190,149],[1194,151],[1195,151],[1187,151],[1189,151],[1109,152],[1114,153],[1198,3],[1199,3],[1200,154],[463,3],[1138,3],[1201,3],[1202,155],[96,3],[514,156],[513,157],[492,3],[910,3],[81,3],[1128,158],[1127,3],[1125,3],[1126,3],[437,159],[1155,59],[909,160],[613,161],[680,162],[679,163],[678,164],[618,165],[634,166],[632,167],[633,168],[619,169],[703,170],[604,3],[606,3],[607,171],[608,3],[611,172],[614,3],[631,173],[609,3],[626,174],[612,175],[627,176],[630,177],[628,177],[625,178],[605,3],[610,3],[629,179],[635,180],[623,3],[617,181],[615,182],[624,183],[621,184],[620,184],[616,185],[622,186],[699,187],[693,188],[686,189],[685,190],[694,191],[695,177],[687,192],[700,193],[681,194],[682,195],[683,196],[702,197],[684,190],[688,193],[689,198],[696,199],[697,175],[698,198],[701,177],[690,196],[636,200],[691,201],[692,202],[677,203],[675,204],[676,204],[641,204],[642,204],[643,204],[644,204],[645,204],[646,204],[647,204],[648,204],[667,204],[639,204],[649,204],[650,204],[651,204],[652,204],[653,204],[654,204],[674,204],[655,204],[656,204],[657,204],[672,204],[658,204],[673,204],[659,204],[670,204],[671,204],[660,204],[661,204],[662,204],[668,204],[669,204],[663,204],[664,204],[665,204],[666,204],[640,205],[638,206],[637,207],[603,3],[435,208],[434,70],[436,209],[431,3],[469,210],[491,13],[908,3],[907,3],[600,211],[711,3],[710,3],[708,212],[705,213],[704,214],[601,215],[592,212],[597,216],[602,217],[591,218],[713,219],[712,212],[599,220],[588,221],[590,3],[707,222],[598,3],[589,3],[596,3],[587,3],[709,3],[706,223],[877,224],[872,225],[745,226],[841,3],[807,227],[779,228],[763,229],[842,3],[790,3],[798,3],[817,230],[718,3],[847,231],[849,232],[848,233],[801,234],[800,235],[803,236],[802,237],[761,3],[850,229],[854,238],[852,239],[721,240],[722,240],[723,3],[764,241],[814,242],[813,3],[826,243],[728,226],[820,3],[809,3],[867,244],[869,3],[748,245],[747,246],[830,247],[832,248],[726,249],[834,250],[840,251],[724,252],[799,253],[845,254],[785,255],[862,226],[839,256],[838,257],[736,258],[737,3],[756,259],[752,260],[753,261],[755,262],[751,263],[750,264],[754,265],[792,3],[738,3],[727,3],[739,266],[740,267],[743,268],[742,3],[783,3],[784,254],[812,3],[805,3],[819,269],[818,270],[851,239],[855,271],[853,272],[720,3],[868,3],[806,245],[749,273],[824,274],[823,3],[780,275],[766,276],[767,3],[760,277],[810,278],[811,278],[730,279],[762,3],[741,280],[719,3],[782,281],[758,3],[828,3],[746,226],[829,282],[870,283],[772,229],[786,284],[856,233],[858,285],[857,285],[776,286],[778,287],[759,3],[716,3],[789,3],[788,229],[831,226],[827,3],[865,3],[769,229],[729,288],[768,3],[770,289],[773,229],[725,3],[822,3],[863,290],[843,241],[796,3],[793,291],[816,292],[794,291],[795,291],[815,255],[781,293],[844,294],[765,295],[734,3],[771,296],[859,239],[861,271],[860,272],[864,3],[835,297],[825,3],[866,298],[808,299],[804,3],[821,300],[775,301],[774,302],[733,3],[791,3],[744,229],[871,3],[836,3],[717,3],[787,229],[777,3],[837,303],[732,3],[731,3],[797,3],[846,229],[757,229],[833,226],[735,304],[963,305],[962,13],[89,306],[359,307],[363,308],[365,309],[213,310],[227,311],[330,312],[259,3],[333,313],[295,314],[303,315],[331,316],[214,317],[258,3],[260,318],[332,319],[234,320],[215,321],[239,320],[228,320],[198,320],[286,322],[287,323],[203,3],[283,324],[288,16],[374,325],[281,16],[375,326],[265,3],[284,327],[387,328],[386,329],[290,16],[385,3],[383,3],[384,330],[285,13],[272,331],[273,332],[282,333],[298,334],[299,335],[289,336],[267,337],[268,338],[378,339],[381,340],[246,341],[245,342],[244,343],[390,13],[243,344],[219,3],[393,3],[896,345],[895,3],[396,3],[395,13],[397,346],[194,3],[324,3],[226,347],[196,348],[347,3],[348,3],[350,3],[353,349],[349,3],[351,350],[352,350],[212,3],[225,3],[358,351],[366,352],[370,353],[208,354],[275,355],[274,3],[266,337],[294,356],[292,357],[291,3],[293,3],[297,358],[270,359],[207,360],[232,361],[321,362],[199,59],[206,363],[195,312],[335,364],[345,365],[334,3],[344,366],[233,3],[217,367],[312,368],[311,3],[318,369],[320,370],[313,371],[317,372],[319,369],[316,371],[315,369],[314,371],[255,373],[240,373],[306,374],[241,374],[201,375],[200,3],[310,376],[309,377],[308,378],[307,379],[202,380],[279,381],[296,382],[278,383],[302,384],[304,385],[301,383],[235,380],[188,3],[322,386],[261,387],[343,388],[264,389],[338,390],[205,3],[339,391],[341,392],[342,393],[325,3],[337,59],[237,394],[323,395],[346,396],[209,3],[211,3],[216,397],[305,398],[204,399],[210,3],[263,400],[262,401],[218,402],[271,60],[269,403],[220,404],[222,405],[394,3],[221,406],[223,407],[361,3],[360,3],[362,3],[392,3],[224,408],[277,13],[88,3],[300,409],[247,3],[257,410],[236,3],[368,13],[377,411],[254,13],[372,16],[253,412],[355,413],[252,411],[197,3],[379,414],[250,13],[251,13],[242,3],[256,3],[249,415],[248,416],[238,417],[231,336],[340,3],[230,418],[229,3],[364,3],[276,13],[357,419],[79,3],[87,420],[84,13],[85,3],[86,3],[336,421],[329,422],[328,3],[327,423],[326,3],[367,424],[369,425],[371,426],[897,427],[373,428],[376,429],[402,430],[380,430],[401,431],[382,432],[403,433],[388,434],[389,435],[391,436],[398,437],[400,3],[399,438],[354,439],[1123,440],[1136,441],[1121,3],[1122,442],[1137,443],[1132,444],[1133,445],[1131,446],[1135,447],[1129,448],[1124,449],[1134,450],[1130,441],[421,451],[419,452],[420,453],[408,454],[409,452],[416,455],[407,456],[412,457],[422,3],[413,458],[418,459],[423,460],[406,461],[414,462],[415,463],[410,464],[417,451],[411,465],[445,466],[444,3],[912,467],[914,468],[911,469],[913,467],[524,3],[539,470],[540,470],[552,471],[541,472],[542,473],[537,474],[535,475],[526,3],[530,476],[534,477],[532,478],[538,479],[527,480],[528,481],[529,482],[531,483],[533,484],[536,485],[543,472],[544,472],[545,472],[546,470],[547,472],[548,472],[525,472],[549,3],[551,486],[550,472],[405,3],[586,3],[467,487],[456,3],[454,488],[457,488],[458,489],[460,490],[455,491],[461,488],[468,492],[449,493],[459,493],[462,494],[464,495],[450,13],[466,496],[448,497],[447,498],[446,489],[453,499],[451,3],[452,3],[465,489],[493,3],[426,500],[425,3],[424,3],[427,501],[77,3],[78,3],[13,3],[14,3],[16,3],[15,3],[2,3],[17,3],[18,3],[19,3],[20,3],[21,3],[22,3],[23,3],[24,3],[3,3],[25,3],[26,3],[4,3],[27,3],[31,3],[28,3],[29,3],[30,3],[32,3],[33,3],[34,3],[5,3],[35,3],[36,3],[37,3],[38,3],[6,3],[42,3],[39,3],[40,3],[41,3],[43,3],[7,3],[44,3],[49,3],[50,3],[45,3],[46,3],[47,3],[48,3],[8,3],[54,3],[51,3],[52,3],[53,3],[55,3],[9,3],[56,3],[57,3],[58,3],[60,3],[59,3],[61,3],[62,3],[10,3],[63,3],[64,3],[65,3],[11,3],[66,3],[67,3],[68,3],[69,3],[70,3],[1,3],[71,3],[72,3],[12,3],[75,3],[74,3],[73,3],[76,3],[112,502],[122,503],[111,502],[132,504],[103,505],[102,506],[131,438],[125,507],[130,508],[105,509],[119,510],[104,511],[128,512],[100,513],[99,438],[129,514],[101,515],[106,516],[107,3],[110,516],[97,3],[133,517],[123,518],[114,519],[115,520],[117,521],[113,522],[116,523],[126,438],[108,524],[109,525],[118,526],[98,527],[121,518],[120,516],[124,3],[127,528],[570,529],[561,530],[568,531],[563,3],[564,3],[562,532],[565,529],[557,3],[558,3],[569,533],[560,534],[566,3],[567,535],[559,536],[929,3],[930,537],[932,538],[918,539],[928,540],[941,3],[942,537],[943,541],[934,542],[940,543],[944,544],[945,545],[946,546],[487,545],[950,547],[901,548],[917,549],[953,550],[954,551],[956,552],[957,553],[958,553],[952,554],[961,555],[959,556],[488,13],[955,557],[966,558],[965,559],[489,560],[967,561],[968,562],[490,560],[971,563],[1050,564],[1051,565],[970,566],[501,567],[1052,568],[502,569],[1053,570],[503,569],[1054,571],[1055,572],[504,569],[1057,573],[1058,574],[510,575],[947,576],[949,3],[948,550],[1059,577],[906,578],[1060,579],[1062,580],[511,581],[1063,582],[512,3],[1067,583],[1066,584],[1064,3],[1065,585],[899,550],[898,586],[905,587],[1068,588],[926,589],[927,590],[921,591],[1069,592],[919,593],[922,594],[925,595],[924,596],[923,597],[936,598],[937,599],[935,592],[938,600],[933,3],[1070,601],[939,602],[1071,603],[915,604],[903,605],[902,606],[916,607],[931,608],[904,609],[951,590],[900,610],[960,611],[964,612],[515,613],[1073,614],[1072,615],[521,569],[517,616],[522,617],[1074,618],[519,619],[518,569],[1076,620],[1075,621],[969,622],[553,623],[520,624],[496,625],[1077,626],[495,569],[1061,627],[1078,628],[554,13],[1056,629],[498,630],[1079,631],[497,569],[500,632],[499,569],[555,3],[556,633],[574,634],[920,3],[1080,635],[575,3],[577,636],[578,3],[579,3],[582,637],[585,638],[583,639],[584,640],[580,3],[494,641],[1081,636],[715,642],[714,643],[878,644],[1082,645],[486,646],[1083,647],[1084,648],[1085,649],[885,650],[1086,651],[884,649],[886,652],[882,3],[879,3],[883,653],[881,3],[880,3],[1088,654],[887,655],[888,3],[889,656],[890,3],[1087,657],[1089,658],[1090,659],[1049,660],[1091,620],[576,3],[891,3],[892,3],[893,3],[894,3],[1092,660],[429,661]],"affectedFilesPendingEmit":[929,930,932,918,928,941,942,943,934,940,944,945,946,487,950,901,917,953,954,956,957,958,952,961,959,488,955,966,965,489,967,968,490,971,1050,1051,970,501,1052,502,1053,503,1054,1055,504,1057,1058,510,947,949,948,1059,906,1060,1062,511,1063,512,1067,1066,1064,1065,899,898,905,1068,926,927,921,1069,919,922,925,924,923,936,937,935,938,933,1070,939,1071,915,903,902,916,931,904,951,900,960,964,515,1073,1072,521,517,522,1074,519,518,1076,1075,969,553,520,496,1077,495,1061,1078,554,1056,498,1079,497,500,499,555,556,574,920,1080,575,577,578,579,582,585,583,584,580,494,1081,715,714,878,1082,486,1083,1084,1085,885,1086,884,886,882,879,883,881,880,1088,887,888,889,890,1087,1089,1090,1049,1091,576,892,894,1092,429],"version":"5.7.2"}
